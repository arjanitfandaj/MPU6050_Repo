
MPU6050_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08006c68  08006c68  00016c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080070e4  080070e4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e4  080070e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080070ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000011c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff72  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002113  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c0  00000000  00000000  00032d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b00  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e0dd  00000000  00000000  000541e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc6eb  00000000  00000000  000622bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e9a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b54  00000000  00000000  0011e9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c50 	.word	0x08006c50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006c50 	.word	0x08006c50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MPU6050_init>:
uint32_t Ay = 0;
uint32_t Az = 0;


void MPU6050_init(mpu6050_t *obj, I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *UART)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
//	uint8_t data 0x00;
	obj->_i2c = hi2c;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	601a      	str	r2, [r3, #0]
	obj->_uart = UART;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	605a      	str	r2, [r3, #4]
	obj->interrupt_flag = 0;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	739a      	strb	r2, [r3, #14]
//	memset(obj->_X_data, 0, sizeof(uint32_t));
//	memset(obj->_Y_data, 0, sizeof(uint32_t));
//	memset(obj->_Z_data, 0,sizeof(uint32_t));
	obj->_X_data = 0;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	811a      	strh	r2, [r3, #8]
	obj->_Y_data = 0;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	815a      	strh	r2, [r3, #10]
	obj->_Z_data = 0;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	819a      	strh	r2, [r3, #12]



}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <MPU6050_write>:
//}



void MPU6050_write(mpu6050_t *obj, uint8_t reg, uint8_t * buf, uint16_t buflen)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	460b      	mov	r3, r1
 8000c92:	72fb      	strb	r3, [r7, #11]
 8000c94:	4613      	mov	r3, r2
 8000c96:	813b      	strh	r3, [r7, #8]
	uint8_t *payload = (uint8_t *)malloc((buflen+1) * sizeof(uint8_t));
 8000c98:	893b      	ldrh	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fae7 	bl	8004270 <malloc>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	617b      	str	r3, [r7, #20]
	*payload = reg;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	7afa      	ldrb	r2, [r7, #11]
 8000caa:	701a      	strb	r2, [r3, #0]

	if(buf != NULL && buflen != 0)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d009      	beq.n	8000cc6 <MPU6050_write+0x42>
 8000cb2:	893b      	ldrh	r3, [r7, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <MPU6050_write+0x42>
	{
		memcpy(payload+1,buf,buflen);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	893a      	ldrh	r2, [r7, #8]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fadd 	bl	8004280 <memcpy>

	}

	HAL_I2C_Master_Transmit(obj->_i2c, MPU6050_ADDRESS << 1, payload, buflen+1, 50);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	893b      	ldrh	r3, [r7, #8]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	2232      	movs	r2, #50	; 0x32
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	21d0      	movs	r1, #208	; 0xd0
 8000cd8:	f000 fff2 	bl	8001cc0 <HAL_I2C_Master_Transmit>

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MPU6050_read>:



void MPU6050_read(mpu6050_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	72fb      	strb	r3, [r7, #11]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	813b      	strh	r3, [r7, #8]
//	uint8_t data = 0;
	uint8_t reg_address = reg;
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(obj->_i2c, MPU6050_ADDRESS<<1, &reg_address, 1, 50);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	f107 0217 	add.w	r2, r7, #23
 8000d04:	2332      	movs	r3, #50	; 0x32
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	f000 ffd8 	bl	8001cc0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(obj->_i2c, (MPU6050_ADDRESS << 1)|1, buf, buflen, 50);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	893b      	ldrh	r3, [r7, #8]
 8000d16:	2232      	movs	r2, #50	; 0x32
 8000d18:	9200      	str	r2, [sp, #0]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	21d1      	movs	r1, #209	; 0xd1
 8000d1e:	f001 f8c3 	bl	8001ea8 <HAL_I2C_Master_Receive>

}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <MPU6050_SMPL_DIV>:
//}



void MPU6050_SMPL_DIV(mpu6050_t * obj)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x07;
 8000d32:	2307      	movs	r3, #7
 8000d34:	73fb      	strb	r3, [r7, #15]

	MPU6050_write(obj, SMPLRT_DIV, &data, 1);
 8000d36:	f107 020f 	add.w	r2, r7, #15
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	2119      	movs	r1, #25
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa0 	bl	8000c84 <MPU6050_write>

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <MPU6050_FIFO_EN_Config>:
}



void MPU6050_FIFO_EN_Config(mpu6050_t *obj, fifo_en_t fifo_en)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]

	uint8_t config;
	MPU6050_read(obj, FIFO_EN, &config, 1);
 8000d58:	f107 020f 	add.w	r2, r7, #15
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	2123      	movs	r1, #35	; 0x23
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffbf 	bl	8000ce4 <MPU6050_read>
	config = ((config & 0xBF) | 0x01 << fifo_en);// enabling fifo for the accel data. By using the fifo_en check header you can use fifo for temp or gyro.
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	73fb      	strb	r3, [r7, #15]
	MPU6050_write(obj, FIFO_EN, &config, 1);
 8000d82:	f107 020f 	add.w	r2, r7, #15
 8000d86:	2301      	movs	r3, #1
 8000d88:	2123      	movs	r1, #35	; 0x23
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff7a 	bl	8000c84 <MPU6050_write>
//	uint8_t test_data;
//
//	MPU6050_read(obj, FIFO_EN, &test_data, 1);


}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MPU6050_FIFO_EN_DATA>:
}



void MPU6050_FIFO_EN_DATA(mpu6050_t *obj)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	uint8_t config;

	MPU6050_read(obj, USER_CTRL, &config, 1);
 8000da0:	f107 020f 	add.w	r2, r7, #15
 8000da4:	2301      	movs	r3, #1
 8000da6:	216a      	movs	r1, #106	; 0x6a
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff9b 	bl	8000ce4 <MPU6050_read>

	config = ((config & 0xBF) | 0x01 << 6);
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	73fb      	strb	r3, [r7, #15]

	MPU6050_write(obj, USER_CTRL, &config, 1);
 8000db8:	f107 020f 	add.w	r2, r7, #15
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	216a      	movs	r1, #106	; 0x6a
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff5f 	bl	8000c84 <MPU6050_write>




}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <mpu6050_power_management>:


}

void mpu6050_power_management(mpu6050_t * obj)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]

	//if turn on 1 we will start the sensor

	uint8_t config = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]

	MPU6050_write(obj, PWR_MGMT_1, &config, 1);
 8000dda:	f107 020f 	add.w	r2, r7, #15
 8000dde:	2301      	movs	r3, #1
 8000de0:	216b      	movs	r1, #107	; 0x6b
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff4e 	bl	8000c84 <MPU6050_write>
//	config |= (enable_disable << pwr_mng);
//	MPU6050_write(obj, PWR_MGMT_1, &config, 1);
	//wait_100ms
//	HAL_Delay(100);
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <read_fifo>:
//
//
//}

void read_fifo(mpu6050_t * obj)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	float Ax,Ay,Az;

	uint8_t config[2];
	uint8_t user_ct = 0x00;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	74fb      	strb	r3, [r7, #19]

	MPU6050_read(obj, FIFO_COUNTH, &config[0], 1);
 8000dfc:	f107 0214 	add.w	r2, r7, #20
 8000e00:	2301      	movs	r3, #1
 8000e02:	2172      	movs	r1, #114	; 0x72
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff6d 	bl	8000ce4 <MPU6050_read>
//	MPU6050_read(obj, FIFO_COUNTL, &config[1], 1);

	if(config[0] != 0){
 8000e0a:	7d3b      	ldrb	r3, [r7, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 8090 	beq.w	8000f32 <read_fifo+0x142>

	for(uint8_t i =0; i<32;i++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e18:	e085      	b.n	8000f26 <read_fifo+0x136>
	{
		uint8_t samples[6];
		uint8_t conf;
		MPU6050_read(obj, FIFO_R_W, &samples, 6);
 8000e1a:	f107 020c 	add.w	r2, r7, #12
 8000e1e:	2306      	movs	r3, #6
 8000e20:	2174      	movs	r1, #116	; 0x74
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff5e 	bl	8000ce4 <MPU6050_read>
		obj->_X_data = (int16_t)(samples[0] << 8 | samples[1]);
 8000e28:	7b3b      	ldrb	r3, [r7, #12]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	7b7b      	ldrb	r3, [r7, #13]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	811a      	strh	r2, [r3, #8]
		obj->_Y_data = (int16_t)(samples[2] << 8 | samples[3]);
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	815a      	strh	r2, [r3, #10]
		obj->_Z_data = (int16_t)(samples[4] << 8 | samples[5]);
 8000e4c:	7c3b      	ldrb	r3, [r7, #16]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	7c7b      	ldrb	r3, [r7, #17]
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	819a      	strh	r2, [r3, #12]

			Ax = (obj->_X_data/16384.0);//*1000; // dont use float because the lib will take processing power and flash storage :)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb5d 	bl	8000524 <__aeabi_i2d>
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <read_fifo+0x158>)
 8000e70:	f7ff fcec 	bl	800084c <__aeabi_ddiv>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fe94 	bl	8000ba8 <__aeabi_d2f>
 8000e80:	4603      	mov	r3, r0
 8000e82:	623b      	str	r3, [r7, #32]
			Ay = (obj->_Y_data/16384.0);//*1000;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb4a 	bl	8000524 <__aeabi_i2d>
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <read_fifo+0x158>)
 8000e96:	f7ff fcd9 	bl	800084c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fe81 	bl	8000ba8 <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	61fb      	str	r3, [r7, #28]
			Az = (obj->_Z_data/16384.0);//*1000;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fb37 	bl	8000524 <__aeabi_i2d>
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <read_fifo+0x158>)
 8000ebc:	f7ff fcc6 	bl	800084c <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fe6e 	bl	8000ba8 <__aeabi_d2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	61bb      	str	r3, [r7, #24]

			MPU6050_read(obj, INT_STATUS, &conf, 1);
 8000ed0:	f107 020b 	add.w	r2, r7, #11
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	213a      	movs	r1, #58	; 0x3a
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff03 	bl	8000ce4 <MPU6050_read>

			if(((conf >> 4) & 0x01)){
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <read_fifo+0x114>
				user_ct |=(0x01 << 2);
 8000eec:	7cfb      	ldrb	r3, [r7, #19]
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	74fb      	strb	r3, [r7, #19]
				MPU6050_write(obj, USER_CTRL, &user_ct, 1);
 8000ef6:	f107 0213 	add.w	r2, r7, #19
 8000efa:	2301      	movs	r3, #1
 8000efc:	216a      	movs	r1, #106	; 0x6a
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fec0 	bl	8000c84 <MPU6050_write>
			}
			conf = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	72fb      	strb	r3, [r7, #11]

			MPU6050_read(obj, INT_STATUS, &conf, 1);
 8000f08:	f107 020b 	add.w	r2, r7, #11
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	213a      	movs	r1, #58	; 0x3a
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fee7 	bl	8000ce4 <MPU6050_read>
			printf("HELLO world");
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <read_fifo+0x15c>)
 8000f18:	f003 fedc 	bl	8004cd4 <iprintf>
	for(uint8_t i =0; i<32;i++)
 8000f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f20:	3301      	adds	r3, #1
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f2a:	2b1f      	cmp	r3, #31
 8000f2c:	f67f af75 	bls.w	8000e1a <read_fifo+0x2a>
	}
	else{
		HAL_UART_Transmit(obj->_uart, (uint8_t*)"FIFO full", strlen("FIFO full"), 100);
	}

}
 8000f30:	e006      	b.n	8000f40 <read_fifo+0x150>
		HAL_UART_Transmit(obj->_uart, (uint8_t*)"FIFO full", strlen("FIFO full"), 100);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6858      	ldr	r0, [r3, #4]
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2209      	movs	r2, #9
 8000f3a:	4905      	ldr	r1, [pc, #20]	; (8000f50 <read_fifo+0x160>)
 8000f3c:	f002 fdf4 	bl	8003b28 <HAL_UART_Transmit>
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40d00000 	.word	0x40d00000
 8000f4c:	08006c68 	.word	0x08006c68
 8000f50:	08006c74 	.word	0x08006c74

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f000 fb4b 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f82f 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 f8f7 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f66:	f000 f8c5 	bl	80010f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f6a:	f000 f883 	bl	8001074 <MX_I2C1_Init>
//  MPU6050_GYRO_CFG(&MPU6050_t);

//  uint8_t data;

//  uint8_t config;
  MPU6050_init(&MPU6050, &hi2c1,&huart2);
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <main+0x60>)
 8000f70:	4911      	ldr	r1, [pc, #68]	; (8000fb8 <main+0x64>)
 8000f72:	4812      	ldr	r0, [pc, #72]	; (8000fbc <main+0x68>)
 8000f74:	f7ff fe68 	bl	8000c48 <MPU6050_init>
  mpu6050_power_management(&MPU6050);
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <main+0x68>)
 8000f7a:	f7ff ff28 	bl	8000dce <mpu6050_power_management>
  MPU6050_SMPL_DIV(&MPU6050);
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <main+0x68>)
 8000f80:	f7ff fed3 	bl	8000d2a <MPU6050_SMPL_DIV>
//  MPU6050_READ_ACCEL_DATA(&MPU6050);
  MPU6050_FIFO_EN_Config(&MPU6050,ACCEL_FIFO_EN);
 8000f84:	2103      	movs	r1, #3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <main+0x68>)
 8000f88:	f7ff fee0 	bl	8000d4c <MPU6050_FIFO_EN_Config>
  MPU6050_FIFO_EN_DATA(&MPU6050);
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <main+0x68>)
 8000f8e:	f7ff ff03 	bl	8000d98 <MPU6050_FIFO_EN_DATA>
//  uint32_t Ay;
//  uint32_t Az;

//

  read_fifo(&MPU6050);
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <main+0x68>)
 8000f94:	f7ff ff2c 	bl	8000df0 <read_fifo>
  MPU6050_read(&MPU6050, FIFO_COUNTH, &data1, 6);
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	2172      	movs	r1, #114	; 0x72
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <main+0x68>)
 8000fa2:	f7ff fe9f 	bl	8000ce4 <MPU6050_read>
  MPU6050_read(&MPU6050, FIFO_COUNTL, &data2, 6);
 8000fa6:	463a      	mov	r2, r7
 8000fa8:	2306      	movs	r3, #6
 8000faa:	2173      	movs	r1, #115	; 0x73
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <main+0x68>)
 8000fae:	f7ff fe99 	bl	8000ce4 <MPU6050_read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x5e>
 8000fb4:	20000260 	.word	0x20000260
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	20000250 	.word	0x20000250

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b096      	sub	sp, #88	; 0x58
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fca:	2228      	movs	r2, #40	; 0x28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 f964 	bl	800429c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffe:	2310      	movs	r3, #16
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001006:	2300      	movs	r3, #0
 8001008:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800100a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800100e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fac5 	bl	80025a4 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001020:	f000 f90c 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2102      	movs	r1, #2
 8001040:	4618      	mov	r0, r3
 8001042:	f002 f9b7 	bl	80033b4 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800104c:	f000 f8f6 	bl	800123c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001050:	2320      	movs	r3, #32
 8001052:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fbe0 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001066:	f000 f8e9 	bl	800123c <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3758      	adds	r7, #88	; 0x58
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_I2C1_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_I2C1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_I2C1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010b0:	f000 fd76 	bl	8001ba0 <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 f8bf 	bl	800123c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010c2:	f001 f9d7 	bl	8002474 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f8b6 	bl	800123c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010d4:	f001 fa19 	bl	800250a <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 f8ad 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000204 	.word	0x20000204
 80010ec:	40005400 	.word	0x40005400
 80010f0:	2000090e 	.word	0x2000090e

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART2_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <MX_USART2_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART2_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART2_UART_Init+0x58>)
 8001138:	f002 fca8 	bl	8003a8c <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f87b 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000260 	.word	0x20000260
 8001150:	40004400 	.word	0x40004400

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_GPIO_Init+0xe0>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <MX_GPIO_Init+0xe0>)
 8001170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <MX_GPIO_Init+0xe0>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_GPIO_Init+0xe0>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <MX_GPIO_Init+0xe0>)
 8001188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_GPIO_Init+0xe0>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_GPIO_Init+0xe0>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <MX_GPIO_Init+0xe0>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_GPIO_Init+0xe0>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_GPIO_Init+0xe0>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <MX_GPIO_Init+0xe0>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_GPIO_Init+0xe0>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2120      	movs	r1, #32
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f000 fccd 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <MX_GPIO_Init+0xe4>)
 80011ee:	f000 fb4d 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f000 fb3f 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800120e:	2320      	movs	r3, #32
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001228:	f000 fb30 	bl	800188c <HAL_GPIO_Init>

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	48000800 	.word	0x48000800

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_MspInit+0x44>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_MspInit+0x44>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_MspInit+0x44>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_MspInit+0x44>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_MspInit+0x44>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_MspInit+0x44>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127e:	2007      	movs	r0, #7
 8001280:	f000 fad0 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_I2C_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_I2C_MspInit+0x80>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <HAL_I2C_MspInit+0x80>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6153      	str	r3, [r2, #20]
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_I2C_MspInit+0x80>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <HAL_I2C_MspInit+0x84>)
 80012e8:	f000 fad0 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_I2C_MspInit+0x80>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_I2C_MspInit+0x80>)
 80012f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f6:	61d3      	str	r3, [r2, #28]
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_I2C_MspInit+0x80>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005400 	.word	0x40005400
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_UART_MspInit+0x7c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d128      	bne.n	800138c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_UART_MspInit+0x80>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_UART_MspInit+0x80>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_UART_MspInit+0x80>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_UART_MspInit+0x80>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_UART_MspInit+0x80>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_UART_MspInit+0x80>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800136a:	230c      	movs	r3, #12
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137a:	2307      	movs	r3, #7
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f000 fa80 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40004400 	.word	0x40004400
 8001398:	40021000 	.word	0x40021000

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f94a 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
	return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_kill>:

int _kill(int pid, int sig)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800140a:	f002 ff07 	bl	800421c <__errno>
 800140e:	4603      	mov	r3, r0
 8001410:	2216      	movs	r2, #22
 8001412:	601a      	str	r2, [r3, #0]
	return -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_exit>:

void _exit (int status)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ffe7 	bl	8001400 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001432:	e7fe      	b.n	8001432 <_exit+0x12>

08001434 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e00a      	b.n	800145c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001446:	f3af 8000 	nop.w
 800144a:	4601      	mov	r1, r0
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	60ba      	str	r2, [r7, #8]
 8001452:	b2ca      	uxtb	r2, r1
 8001454:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	dbf0      	blt.n	8001446 <_read+0x12>
	}

return len;
 8001464:	687b      	ldr	r3, [r7, #4]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e009      	b.n	8001494 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf1      	blt.n	8001480 <_write+0x12>
	}
	return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_close>:

int _close(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ce:	605a      	str	r2, [r3, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_isatty>:

int _isatty(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f002 fe6c 	bl	800421c <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20003000 	.word	0x20003000
 8001570:	00000400 	.word	0x00000400
 8001574:	200001f8 	.word	0x200001f8
 8001578:	200002f8 	.word	0x200002f8

0800157c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ca:	f7ff ffd7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f002 fe2b 	bl	8004228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015d2:	f7ff fcbf 	bl	8000f54 <main>

080015d6 <LoopForever>:

LoopForever:
    b LoopForever
 80015d6:	e7fe      	b.n	80015d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015e4:	080070ec 	.word	0x080070ec
  ldr r2, =_sbss
 80015e8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015ec:	200002f8 	.word	0x200002f8

080015f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_2_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_Init+0x28>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_Init+0x28>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f90d 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	2000      	movs	r0, #0
 800160c:	f000 f808 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fe1a 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000

08001620 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x54>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f917 	bl	8001872 <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d80a      	bhi.n	800166a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f000 f8ed 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_InitTick+0x5c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000000 	.word	0x20000000
 8001678:	20000008 	.word	0x20000008
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008
 80016a4:	200002e4 	.word	0x200002e4

080016a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200002e4 	.word	0x200002e4

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff47 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff5c 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffb0 	bl	80017e0 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e14e      	b.n	8001b3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8140 	beq.w	8001b34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_GPIO_Init+0x40>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 0201 	and.w	r2, r3, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b03      	cmp	r3, #3
 8001938:	d017      	beq.n	800196a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d123      	bne.n	80019be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	6939      	ldr	r1, [r7, #16]
 80019ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0203 	and.w	r2, r3, #3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 809a 	beq.w	8001b34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a18:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <HAL_GPIO_Init+0x2d4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1dc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_GPIO_Init+0x2d8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1d8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <HAL_GPIO_Init+0x2dc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1d4>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a60:	2305      	movs	r3, #5
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7e:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x2d0>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_GPIO_Init+0x2e0>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f47f aea9 	bne.w	800189c <HAL_GPIO_Init+0x10>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000c00 	.word	0x48000c00
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e081      	b.n	8001cb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fb62 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	e006      	b.n	8001c28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d104      	bne.n	8001c3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69d9      	ldr	r1, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	f040 80da 	bne.w	8001e96 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_I2C_Master_Transmit+0x30>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e0d3      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x1d8>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fcd6 	bl	80016a8 <HAL_GetTick>
 8001cfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2319      	movs	r3, #25
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f9e6 	bl	80020dc <I2C_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0be      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2221      	movs	r2, #33	; 0x21
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2210      	movs	r2, #16
 8001d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	893a      	ldrh	r2, [r7, #8]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2bff      	cmp	r3, #255	; 0xff
 8001d4a:	d90e      	bls.n	8001d6a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	22ff      	movs	r2, #255	; 0xff
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	8979      	ldrh	r1, [r7, #10]
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fb58 	bl	8002418 <I2C_TransferConfig>
 8001d68:	e06c      	b.n	8001e44 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	4b48      	ldr	r3, [pc, #288]	; (8001ea0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fb47 	bl	8002418 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d8a:	e05b      	b.n	8001e44 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f9e3 	bl	800215c <I2C_WaitOnTXISFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e07b      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d034      	beq.n	8001e44 <HAL_I2C_Master_Transmit+0x184>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d130      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	2200      	movs	r2, #0
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f975 	bl	80020dc <I2C_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e04d      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2bff      	cmp	r3, #255	; 0xff
 8001e04:	d90e      	bls.n	8001e24 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	22ff      	movs	r2, #255	; 0xff
 8001e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	8979      	ldrh	r1, [r7, #10]
 8001e14:	2300      	movs	r3, #0
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fafb 	bl	8002418 <I2C_TransferConfig>
 8001e22:	e00f      	b.n	8001e44 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 faea 	bl	8002418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d19e      	bne.n	8001d8c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	6a39      	ldr	r1, [r7, #32]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f9c2 	bl	80021dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e01a      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2220      	movs	r2, #32
 8001e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e76:	400b      	ands	r3, r1
 8001e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
  }
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	80002000 	.word	0x80002000
 8001ea4:	fe00e800 	.word	0xfe00e800

08001ea8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	f040 80db 	bne.w	8002080 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2C_Master_Receive+0x30>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0d4      	b.n	8002082 <HAL_I2C_Master_Receive+0x1da>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ee0:	f7ff fbe2 	bl	80016a8 <HAL_GetTick>
 8001ee4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2319      	movs	r3, #25
 8001eec:	2201      	movs	r2, #1
 8001eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f8f2 	bl	80020dc <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0bf      	b.n	8002082 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2222      	movs	r2, #34	; 0x22
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	893a      	ldrh	r2, [r7, #8]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	d90e      	bls.n	8001f52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	8979      	ldrh	r1, [r7, #10]
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_I2C_Master_Receive+0x1e4>)
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fa64 	bl	8002418 <I2C_TransferConfig>
 8001f50:	e06d      	b.n	800202e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_I2C_Master_Receive+0x1e4>)
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fa53 	bl	8002418 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f72:	e05c      	b.n	800202e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	6a39      	ldr	r1, [r7, #32]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f96b 	bl	8002254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e07c      	b.n	8002082 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d034      	beq.n	800202e <HAL_I2C_Master_Receive+0x186>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d130      	bne.n	800202e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f880 	bl	80020dc <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e04d      	b.n	8002082 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d90e      	bls.n	800200e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa06 	bl	8002418 <I2C_TransferConfig>
 800200c:	e00f      	b.n	800202e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	2300      	movs	r3, #0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f9f5 	bl	8002418 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d19d      	bne.n	8001f74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	6a39      	ldr	r1, [r7, #32]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f8cd 	bl	80021dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e01a      	b.n	8002082 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2220      	movs	r2, #32
 8002052:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_I2C_Master_Receive+0x1e8>)
 8002060:	400b      	ands	r3, r1
 8002062:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	80002400 	.word	0x80002400
 8002090:	fe00e800 	.word	0xfe00e800

08002094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d103      	bne.n	80020b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d007      	beq.n	80020d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	619a      	str	r2, [r3, #24]
  }
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ec:	e022      	b.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d01e      	beq.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7ff fad7 	bl	80016a8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d113      	bne.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00f      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	429a      	cmp	r2, r3
 8002150:	d0cd      	beq.n	80020ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002168:	e02c      	b.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f8dc 	bl	800232c <I2C_IsAcknowledgeFailed>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e02a      	b.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d01e      	beq.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002186:	f7ff fa8f 	bl	80016a8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d113      	bne.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f043 0220 	orr.w	r2, r3, #32
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e007      	b.n	80021d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d1cb      	bne.n	800216a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e8:	e028      	b.n	800223c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f89c 	bl	800232c <I2C_IsAcknowledgeFailed>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e026      	b.n	800224c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fe:	f7ff fa53 	bl	80016a8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	429a      	cmp	r2, r3
 800220c:	d302      	bcc.n	8002214 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d113      	bne.n	800223c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e007      	b.n	800224c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b20      	cmp	r3, #32
 8002248:	d1cf      	bne.n	80021ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002260:	e055      	b.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f860 	bl	800232c <I2C_IsAcknowledgeFailed>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e053      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d129      	bne.n	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b04      	cmp	r3, #4
 8002290:	d105      	bne.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e03f      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2220      	movs	r2, #32
 80022a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80022b2:	400b      	ands	r3, r1
 80022b4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e022      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d8:	f7ff f9e6 	bl	80016a8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d302      	bcc.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e007      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d1a2      	bne.n	8002262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	fe00e800 	.word	0xfe00e800

0800232c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d161      	bne.n	800240a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002354:	d02b      	beq.n	80023ae <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002364:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002366:	e022      	b.n	80023ae <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236e:	d01e      	beq.n	80023ae <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002370:	f7ff f99a 	bl	80016a8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	d302      	bcc.n	8002386 <I2C_IsAcknowledgeFailed+0x5a>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d113      	bne.n	80023ae <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f043 0220 	orr.w	r2, r3, #32
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e02e      	b.n	800240c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d1d5      	bne.n	8002368 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2210      	movs	r2, #16
 80023c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2220      	movs	r2, #32
 80023ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff fe61 	bl	8002094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <I2C_IsAcknowledgeFailed+0xe8>)
 80023de:	400b      	ands	r3, r1
 80023e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	fe00e800 	.word	0xfe00e800

08002418 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	4613      	mov	r3, r2
 8002428:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <I2C_TransferConfig+0x58>)
 800243a:	430b      	orrs	r3, r1
 800243c:	43db      	mvns	r3, r3
 800243e:	ea02 0103 	and.w	r1, r2, r3
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002448:	7a7b      	ldrb	r3, [r7, #9]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	431a      	orrs	r2, r3
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	03ff63ff 	.word	0x03ff63ff

08002474 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	d138      	bne.n	80024fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002494:	2302      	movs	r3, #2
 8002496:	e032      	b.n	80024fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	; 0x24
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b20      	cmp	r3, #32
 800251e:	d139      	bne.n	8002594 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800252a:	2302      	movs	r3, #2
 800252c:	e033      	b.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2224      	movs	r2, #36	; 0x24
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800255c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f000 bef4 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 816a 	beq.w	80028a2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025ce:	4bb3      	ldr	r3, [pc, #716]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d00c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025da:	4bb0      	ldr	r3, [pc, #704]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d159      	bne.n	800269a <HAL_RCC_OscConfig+0xf6>
 80025e6:	4bad      	ldr	r3, [pc, #692]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f2:	d152      	bne.n	800269a <HAL_RCC_OscConfig+0xf6>
 80025f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002608:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x82>
 8002620:	4b9e      	ldr	r3, [pc, #632]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0xae>
 8002626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800263a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002642:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800264e:	4b93      	ldr	r3, [pc, #588]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002656:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800265a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800265e:	fa92 f2a2 	rbit	r2, r2
 8002662:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002666:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0220 	orr.w	r2, r2, #32
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 810c 	beq.w	80028a0 <HAL_RCC_OscConfig+0x2fc>
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 8106 	bne.w	80028a0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f000 be86 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x110>
 80026a6:	4b7d      	ldr	r3, [pc, #500]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7c      	ldr	r2, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e030      	b.n	8002716 <HAL_RCC_OscConfig+0x172>
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x134>
 80026be:	4b77      	ldr	r3, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a76      	ldr	r2, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a73      	ldr	r2, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01e      	b.n	8002716 <HAL_RCC_OscConfig+0x172>
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x15a>
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a69      	ldr	r2, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x172>
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002716:	4b61      	ldr	r3, [pc, #388]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	f023 020f 	bic.w	r2, r3, #15
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	495d      	ldr	r1, [pc, #372]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d059      	beq.n	80027e8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe ffb8 	bl	80016a8 <HAL_GetTick>
 8002738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273e:	f7fe ffb3 	bl	80016a8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d902      	bls.n	8002754 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	f000 be29 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002758:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002768:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x1e2>
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x20e>
 8002786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800279a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027be:	fa92 f2a2 	rbit	r2, r2
 80027c2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027c6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f042 0220 	orr.w	r2, r2, #32
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f002 021f 	and.w	r2, r2, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ab      	beq.n	800273e <HAL_RCC_OscConfig+0x19a>
 80027e6:	e05c      	b.n	80028a2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe ff5e 	bl	80016a8 <HAL_GetTick>
 80027ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f2:	f7fe ff59 	bl	80016a8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d902      	bls.n	8002808 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	f000 bdcf 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800281c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_OscConfig+0x296>
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x2c2>
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800284e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002852:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002856:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_RCC_OscConfig+0x2f8>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800286a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800286e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800287a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f002 021f 	and.w	r2, r2, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ab      	bne.n	80027f2 <HAL_RCC_OscConfig+0x24e>
 800289a:	e002      	b.n	80028a2 <HAL_RCC_OscConfig+0x2fe>
 800289c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 816f 	beq.w	8002b90 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028b2:	4bd0      	ldr	r3, [pc, #832]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028be:	4bcd      	ldr	r3, [pc, #820]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d16c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x400>
 80028ca:	4bca      	ldr	r3, [pc, #808]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d166      	bne.n	80029a4 <HAL_RCC_OscConfig+0x400>
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_RCC_OscConfig+0x362>
 8002900:	4bbc      	ldr	r3, [pc, #752]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	e013      	b.n	800292e <HAL_RCC_OscConfig+0x38a>
 8002906:	2302      	movs	r3, #2
 8002908:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002918:	2302      	movs	r3, #2
 800291a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800291e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800292a:	4bb2      	ldr	r3, [pc, #712]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2202      	movs	r2, #2
 8002930:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002934:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002938:	fa92 f2a2 	rbit	r2, r2
 800293c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002940:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002944:	fab2 f282 	clz	r2, r2
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	f042 0220 	orr.w	r2, r2, #32
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	f002 021f 	and.w	r2, r2, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_RCC_OscConfig+0x3cc>
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	f000 bd1b 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	21f8      	movs	r1, #248	; 0xf8
 8002980:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002988:	fa91 f1a1 	rbit	r1, r1
 800298c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002990:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002994:	fab1 f181 	clz	r1, r1
 8002998:	b2c9      	uxtb	r1, r1
 800299a:	408b      	lsls	r3, r1
 800299c:	4995      	ldr	r1, [pc, #596]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e0f5      	b.n	8002b90 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8085 	beq.w	8002aba <HAL_RCC_OscConfig+0x516>
 80029b0:	2301      	movs	r3, #1
 80029b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	461a      	mov	r2, r3
 80029d8:	2301      	movs	r3, #1
 80029da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fe64 	bl	80016a8 <HAL_GetTick>
 80029e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe fe5f 	bl	80016a8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	f000 bcd5 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_OscConfig+0x488>
 8002a26:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e013      	b.n	8002a54 <HAL_RCC_OscConfig+0x4b0>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a50:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2202      	movs	r2, #2
 8002a56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a66:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a6a:	fab2 f282 	clz	r2, r2
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f042 0220 	orr.w	r2, r2, #32
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f002 021f 	and.w	r2, r2, #31
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0af      	beq.n	80029e6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b5b      	ldr	r3, [pc, #364]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	21f8      	movs	r1, #248	; 0xf8
 8002a96:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a9e:	fa91 f1a1 	rbit	r1, r1
 8002aa2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002aa6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002aaa:	fab1 f181 	clz	r1, r1
 8002aae:	b2c9      	uxtb	r1, r1
 8002ab0:	408b      	lsls	r3, r1
 8002ab2:	4950      	ldr	r1, [pc, #320]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e06a      	b.n	8002b90 <HAL_RCC_OscConfig+0x5ec>
 8002aba:	2301      	movs	r3, #1
 8002abc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002acc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ada:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fddf 	bl	80016a8 <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af0:	f7fe fdda 	bl	80016a8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d902      	bls.n	8002b06 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	f000 bc50 	b.w	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_OscConfig+0x592>
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	e013      	b.n	8002b5e <HAL_RCC_OscConfig+0x5ba>
 8002b36:	2302      	movs	r3, #2
 8002b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x650>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b64:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b68:	fa92 f2a2 	rbit	r2, r2
 8002b6c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b70:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f002 021f 	and.w	r2, r2, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1af      	bne.n	8002af0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80da 	beq.w	8002d54 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d069      	beq.n	8002c7e <HAL_RCC_OscConfig+0x6da>
 8002baa:	2301      	movs	r3, #1
 8002bac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x654>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fd68 	bl	80016a8 <HAL_GetTick>
 8002bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bdc:	e00e      	b.n	8002bfc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe fd63 	bl	80016a8 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d906      	bls.n	8002bfc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e3d9      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	10908120 	.word	0x10908120
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c0e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4ba5      	ldr	r3, [pc, #660]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c42:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c46:	2102      	movs	r1, #2
 8002c48:	6019      	str	r1, [r3, #0]
 8002c4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f1a3 	rbit	r1, r3
 8002c54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c58:	6019      	str	r1, [r3, #0]
  return result;
 8002c5a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0b0      	beq.n	8002bde <HAL_RCC_OscConfig+0x63a>
 8002c7c:	e06a      	b.n	8002d54 <HAL_RCC_OscConfig+0x7b0>
 8002c7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c94:	601a      	str	r2, [r3, #0]
  return result;
 8002c96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c9a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <HAL_RCC_OscConfig+0x934>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	461a      	mov	r2, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fcfa 	bl	80016a8 <HAL_GetTick>
 8002cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	e009      	b.n	8002cce <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe fcf5 	bl	80016a8 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e36b      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002cce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d02:	2202      	movs	r2, #2
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d16:	4b6f      	ldr	r3, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d1e:	2102      	movs	r1, #2
 8002d20:	6019      	str	r1, [r3, #0]
 8002d22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f1a3 	rbit	r1, r3
 8002d2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d30:	6019      	str	r1, [r3, #0]
  return result;
 8002d32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1b2      	bne.n	8002cba <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8158 	beq.w	8003014 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4b57      	ldr	r3, [pc, #348]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a56      	ldr	r2, [pc, #344]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	61d3      	str	r3, [r2, #28]
 8002d82:	4b54      	ldr	r3, [pc, #336]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCC_OscConfig+0x938>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d11a      	bne.n	8002dde <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da8:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCC_OscConfig+0x938>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_RCC_OscConfig+0x938>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fc78 	bl	80016a8 <HAL_GetTick>
 8002db8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fe fc73 	bl	80016a8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e2e9      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	4b42      	ldr	r3, [pc, #264]	; (8002edc <HAL_RCC_OscConfig+0x938>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ef      	beq.n	8002dbe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x852>
 8002de8:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a39      	ldr	r2, [pc, #228]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	e02f      	b.n	8002e56 <HAL_RCC_OscConfig+0x8b2>
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x876>
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e12:	f023 0304 	bic.w	r3, r3, #4
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	e01d      	b.n	8002e56 <HAL_RCC_OscConfig+0x8b2>
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCC_OscConfig+0x89a>
 8002e24:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x8b2>
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d06b      	beq.n	8002f38 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fc22 	bl	80016a8 <HAL_GetTick>
 8002e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	e00b      	b.n	8002e82 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fc1d 	bl	80016a8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e291      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002e82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e86:	2202      	movs	r2, #2
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f2a3 	rbit	r2, r3
 8002eac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eb0:	601a      	str	r2, [r3, #0]
  return result;
 8002eb2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002eb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x93c>
 8002ecc:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <HAL_RCC_OscConfig+0x930>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x958>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	10908120 	.word	0x10908120
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	4bbb      	ldr	r3, [pc, #748]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f00:	2102      	movs	r1, #2
 8002f02:	6011      	str	r1, [r2, #0]
 8002f04:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fa92 f1a2 	rbit	r1, r2
 8002f0e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f12:	6011      	str	r1, [r2, #0]
  return result;
 8002f14:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d099      	beq.n	8002e6a <HAL_RCC_OscConfig+0x8c6>
 8002f36:	e063      	b.n	8003000 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fbb6 	bl	80016a8 <HAL_GetTick>
 8002f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fbb1 	bl	80016a8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e225      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 8002f5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f76:	2202      	movs	r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f88:	601a      	str	r2, [r3, #0]
  return result;
 8002f8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0xa06>
 8002fa4:	4b90      	ldr	r3, [pc, #576]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	e00d      	b.n	8002fc6 <HAL_RCC_OscConfig+0xa22>
 8002faa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fae:	2202      	movs	r2, #2
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4b89      	ldr	r3, [pc, #548]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fca:	2102      	movs	r1, #2
 8002fcc:	6011      	str	r1, [r2, #0]
 8002fce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fa92 f1a2 	rbit	r1, r2
 8002fd8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fdc:	6011      	str	r1, [r2, #0]
  return result;
 8002fde:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fab2 f282 	clz	r2, r2
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f002 021f 	and.w	r2, r2, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1a0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003000:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b77      	ldr	r3, [pc, #476]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	4a76      	ldr	r2, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 81c2 	beq.w	80033a4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003020:	4b71      	ldr	r3, [pc, #452]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b08      	cmp	r3, #8
 800302a:	f000 819c 	beq.w	8003366 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b02      	cmp	r3, #2
 8003036:	f040 8114 	bne.w	8003262 <HAL_RCC_OscConfig+0xcbe>
 800303a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800303e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003058:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fb1a 	bl	80016a8 <HAL_GetTick>
 8003074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e009      	b.n	800308e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fb15 	bl	80016a8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e18b      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 800308e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_OscConfig+0xb24>
 80030c2:	4b49      	ldr	r3, [pc, #292]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e01b      	b.n	8003100 <HAL_RCC_OscConfig+0xb5c>
 80030c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003104:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003108:	6011      	str	r1, [r2, #0]
 800310a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fa92 f1a2 	rbit	r1, r2
 8003114:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003118:	6011      	str	r1, [r2, #0]
  return result;
 800311a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fab2 f282 	clz	r2, r2
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f042 0220 	orr.w	r2, r2, #32
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	f002 021f 	and.w	r2, r2, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d19e      	bne.n	800307a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	430b      	orrs	r3, r1
 8003152:	4925      	ldr	r1, [pc, #148]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
 8003158:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800315c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003170:	601a      	str	r2, [r3, #0]
  return result;
 8003172:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003176:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003182:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	461a      	mov	r2, r3
 800318a:	2301      	movs	r3, #1
 800318c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe fa8b 	bl	80016a8 <HAL_GetTick>
 8003192:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003196:	e009      	b.n	80031ac <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003198:	f7fe fa86 	bl	80016a8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0fc      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 80031ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031c4:	601a      	str	r2, [r3, #0]
  return result;
 80031c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0xc48>
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <HAL_RCC_OscConfig+0xc44>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	e01e      	b.n	8003224 <HAL_RCC_OscConfig+0xc80>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fa93 f2a3 	rbit	r2, r3
 8003200:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800320a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_OscConfig+0xe0c>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003228:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800322c:	6011      	str	r1, [r2, #0]
 800322e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fa92 f1a2 	rbit	r1, r2
 8003238:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800323c:	6011      	str	r1, [r2, #0]
  return result;
 800323e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f002 021f 	and.w	r2, r2, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f202 	lsl.w	r2, r1, r2
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d09b      	beq.n	8003198 <HAL_RCC_OscConfig+0xbf4>
 8003260:	e0a0      	b.n	80033a4 <HAL_RCC_OscConfig+0xe00>
 8003262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003266:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800326a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327a:	601a      	str	r2, [r3, #0]
  return result;
 800327c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003280:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800328c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	461a      	mov	r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fa06 	bl	80016a8 <HAL_GetTick>
 800329c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fa01 	bl	80016a8 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e077      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
 80032b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ce:	601a      	str	r2, [r3, #0]
  return result;
 80032d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0xd4c>
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0xe0c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e01b      	b.n	8003328 <HAL_RCC_OscConfig+0xd84>
 80032f0:	f107 0320 	add.w	r3, r7, #32
 80032f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f107 0320 	add.w	r3, r7, #32
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f107 0318 	add.w	r3, r7, #24
 800330e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f107 0318 	add.w	r3, r7, #24
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_OscConfig+0xe0c>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f107 0210 	add.w	r2, r7, #16
 800332c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003330:	6011      	str	r1, [r2, #0]
 8003332:	f107 0210 	add.w	r2, r7, #16
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	fa92 f1a2 	rbit	r1, r2
 800333c:	f107 020c 	add.w	r2, r7, #12
 8003340:	6011      	str	r1, [r2, #0]
  return result;
 8003342:	f107 020c 	add.w	r2, r7, #12
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	fab2 f282 	clz	r2, r2
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f042 0220 	orr.w	r2, r2, #32
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f002 021f 	and.w	r2, r2, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d19e      	bne.n	80032a2 <HAL_RCC_OscConfig+0xcfe>
 8003364:	e01e      	b.n	80033a4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e018      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_RCC_OscConfig+0xe0c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800337c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	429a      	cmp	r2, r3
 800338c:	d108      	bne.n	80033a0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800338e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b09e      	sub	sp, #120	; 0x78
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e162      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b90      	ldr	r3, [pc, #576]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d910      	bls.n	80033fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b8d      	ldr	r3, [pc, #564]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 0207 	bic.w	r2, r3, #7
 80033e2:	498b      	ldr	r1, [pc, #556]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b89      	ldr	r3, [pc, #548]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e14a      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b82      	ldr	r3, [pc, #520]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	497f      	ldr	r1, [pc, #508]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80dc 	beq.w	80035e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d13c      	bne.n	80034aa <HAL_RCC_ClockConfig+0xf6>
 8003430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003434:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d102      	bne.n	800345a <HAL_RCC_ClockConfig+0xa6>
 8003454:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	e00f      	b.n	800347a <HAL_RCC_ClockConfig+0xc6>
 800345a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	667b      	str	r3, [r7, #100]	; 0x64
 8003468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346c:	663b      	str	r3, [r7, #96]	; 0x60
 800346e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003482:	fa92 f2a2 	rbit	r2, r2
 8003486:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800348a:	fab2 f282 	clz	r2, r2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f042 0220 	orr.w	r2, r2, #32
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f002 021f 	and.w	r2, r2, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f202 	lsl.w	r2, r1, r2
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d17b      	bne.n	800359e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0f3      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d13c      	bne.n	800352c <HAL_RCC_ClockConfig+0x178>
 80034b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_RCC_ClockConfig+0x128>
 80034d6:	4b4f      	ldr	r3, [pc, #316]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	e00f      	b.n	80034fc <HAL_RCC_ClockConfig+0x148>
 80034dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40
 80034f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f8:	4b46      	ldr	r3, [pc, #280]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003500:	63ba      	str	r2, [r7, #56]	; 0x38
 8003502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003504:	fa92 f2a2 	rbit	r2, r2
 8003508:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800350a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0220 	orr.w	r2, r2, #32
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d13a      	bne.n	800359e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b2      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
 800352c:	2302      	movs	r3, #2
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_RCC_ClockConfig+0x1a0>
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	e00d      	b.n	8003570 <HAL_RCC_ClockConfig+0x1bc>
 8003554:	2302      	movs	r3, #2
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	2302      	movs	r3, #2
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	2202      	movs	r2, #2
 8003572:	61ba      	str	r2, [r7, #24]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	fa92 f2a2 	rbit	r2, r2
 800357a:	617a      	str	r2, [r7, #20]
  return result;
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	fab2 f282 	clz	r2, r2
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f042 0220 	orr.w	r2, r2, #32
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	f002 021f 	and.w	r2, r2, #31
 800358e:	2101      	movs	r1, #1
 8003590:	fa01 f202 	lsl.w	r2, r1, r2
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e079      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	491a      	ldr	r1, [pc, #104]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7fe f87a 	bl	80016a8 <HAL_GetTick>
 80035b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fe f876 	bl	80016a8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e061      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_RCC_ClockConfig+0x260>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d214      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 0207 	bic.w	r2, r3, #7
 80035f6:	4906      	ldr	r1, [pc, #24]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <HAL_RCC_ClockConfig+0x25c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e040      	b.n	8003692 <HAL_RCC_ClockConfig+0x2de>
 8003610:	40022000 	.word	0x40022000
 8003614:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCC_ClockConfig+0x2e8>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	491a      	ldr	r1, [pc, #104]	; (800369c <HAL_RCC_ClockConfig+0x2e8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_RCC_ClockConfig+0x2e8>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4912      	ldr	r1, [pc, #72]	; (800369c <HAL_RCC_ClockConfig+0x2e8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003656:	f000 f829 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800365a:	4601      	mov	r1, r0
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCC_ClockConfig+0x2e8>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003664:	22f0      	movs	r2, #240	; 0xf0
 8003666:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	60fa      	str	r2, [r7, #12]
  return result;
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	40d3      	lsrs	r3, r2
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x2ec>)
 800367c:	5cd3      	ldrb	r3, [r2, r3]
 800367e:	fa21 f303 	lsr.w	r3, r1, r3
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <HAL_RCC_ClockConfig+0x2f0>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x2f4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd ffc8 	bl	8001620 <HAL_InitTick>
  
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3778      	adds	r7, #120	; 0x78
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	08006ccc 	.word	0x08006ccc
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b08b      	sub	sp, #44	; 0x2c
 80036b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x30>
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x36>
 80036da:	e03c      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036de:	623b      	str	r3, [r7, #32]
      break;
 80036e0:	e03c      	b.n	800375c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	fa92 f2a2 	rbit	r2, r2
 80036f4:	607a      	str	r2, [r7, #4]
  return result;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	40d3      	lsrs	r3, r2
 8003700:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	220f      	movs	r2, #15
 8003710:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	fa92 f2a2 	rbit	r2, r2
 8003718:	60fa      	str	r2, [r7, #12]
  return result;
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	40d3      	lsrs	r3, r2
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003734:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	e004      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	4a0c      	ldr	r2, [pc, #48]	; (800377c <HAL_RCC_GetSysClockFreq+0xd0>)
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	623b      	str	r3, [r7, #32]
      break;
 8003754:	e002      	b.n	800375c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003758:	623b      	str	r3, [r7, #32]
      break;
 800375a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375c:	6a3b      	ldr	r3, [r7, #32]
}
 800375e:	4618      	mov	r0, r3
 8003760:	372c      	adds	r7, #44	; 0x2c
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	007a1200 	.word	0x007a1200
 8003774:	08006ce4 	.word	0x08006ce4
 8003778:	08006cf4 	.word	0x08006cf4
 800377c:	003d0900 	.word	0x003d0900

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800379e:	f7ff ffef 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a2:	4601      	mov	r1, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	603a      	str	r2, [r7, #0]
  return result;
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	40d3      	lsrs	r3, r2
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08006cdc 	.word	0x08006cdc

080037dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037e2:	f7ff ffcd 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	603a      	str	r2, [r7, #0]
  return result;
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	fab2 f282 	clz	r2, r2
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	40d3      	lsrs	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <HAL_RCC_GetPCLK2Freq+0x40>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	08006cdc 	.word	0x08006cdc

08003820 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b092      	sub	sp, #72	; 0x48
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80cd 	beq.w	80039de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003844:	4b8e      	ldr	r3, [pc, #568]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10e      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b8b      	ldr	r3, [pc, #556]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	4a8a      	ldr	r2, [pc, #552]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	61d3      	str	r3, [r2, #28]
 800385c:	4b88      	ldr	r3, [pc, #544]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b85      	ldr	r3, [pc, #532]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b82      	ldr	r3, [pc, #520]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a81      	ldr	r2, [pc, #516]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fd ff0f 	bl	80016a8 <HAL_GetTick>
 800388a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd ff0b 	bl	80016a8 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	; 0x64
 800389a:	d901      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0ea      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b78      	ldr	r3, [pc, #480]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ac:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d07d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d076      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	461a      	mov	r2, r3
 80038f4:	2301      	movs	r3, #1
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d045      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd febc 	bl	80016a8 <HAL_GetTick>
 8003930:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fd feb8 	bl	80016a8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e095      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800394a:	2302      	movs	r3, #2
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	2302      	movs	r3, #2
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	61fb      	str	r3, [r7, #28]
  return result;
 8003962:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d102      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003978:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	e007      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800397e:	2302      	movs	r3, #2
 8003980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2202      	movs	r2, #2
 8003990:	613a      	str	r2, [r7, #16]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	fa92 f2a2 	rbit	r2, r2
 8003998:	60fa      	str	r2, [r7, #12]
  return result;
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0bd      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	492e      	ldr	r1, [pc, #184]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ea:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	4922      	ldr	r1, [pc, #136]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f023 0210 	bic.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	491a      	ldr	r1, [pc, #104]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	4913      	ldr	r1, [pc, #76]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	490b      	ldr	r1, [pc, #44]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	4904      	ldr	r1, [pc, #16]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3748      	adds	r7, #72	; 0x48
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
 8003a88:	10908100 	.word	0x10908100

08003a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e040      	b.n	8003b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fc32 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	; 0x24
 8003ab8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8c0 	bl	8003c50 <UART_SetConfig>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e022      	b.n	8003b20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9ea 	bl	8003ebc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa71 	bl	8004000 <UART_CheckIdleState>
 8003b1e:	4603      	mov	r3, r0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	f040 8082 	bne.w	8003c46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_UART_Transmit+0x26>
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07a      	b.n	8003c48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Transmit+0x38>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e073      	b.n	8003c48 <HAL_UART_Transmit+0x120>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2221      	movs	r2, #33	; 0x21
 8003b74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fd97 	bl	80016a8 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d108      	bne.n	8003ba8 <HAL_UART_Transmit+0x80>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bb8:	e02d      	b.n	8003c16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fa64 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e039      	b.n	8003c48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	881a      	ldrh	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be6:	b292      	uxth	r2, r2
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3302      	adds	r3, #2
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e008      	b.n	8003c04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b292      	uxth	r2, r2
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3301      	adds	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1cb      	bne.n	8003bba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fa30 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e005      	b.n	8003c48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b8a      	ldr	r3, [pc, #552]	; (8003ea4 <UART_SetConfig+0x254>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a78      	ldr	r2, [pc, #480]	; (8003ea8 <UART_SetConfig+0x258>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d120      	bne.n	8003d0e <UART_SetConfig+0xbe>
 8003ccc:	4b77      	ldr	r3, [pc, #476]	; (8003eac <UART_SetConfig+0x25c>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d817      	bhi.n	8003d08 <UART_SetConfig+0xb8>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x90>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003cfd 	.word	0x08003cfd
 8003ce8:	08003d03 	.word	0x08003d03
 8003cec:	08003cf7 	.word	0x08003cf7
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e01d      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e01a      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e017      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003d02:	2308      	movs	r3, #8
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e014      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e011      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a67      	ldr	r2, [pc, #412]	; (8003eb0 <UART_SetConfig+0x260>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d102      	bne.n	8003d1e <UART_SetConfig+0xce>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e009      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a64      	ldr	r2, [pc, #400]	; (8003eb4 <UART_SetConfig+0x264>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d102      	bne.n	8003d2e <UART_SetConfig+0xde>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e001      	b.n	8003d32 <UART_SetConfig+0xe2>
 8003d2e:	2310      	movs	r3, #16
 8003d30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3a:	d15b      	bne.n	8003df4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d827      	bhi.n	8003d92 <UART_SetConfig+0x142>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0xf8>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003d83 	.word	0x08003d83
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d93 	.word	0x08003d93
 8003d68:	08003d8b 	.word	0x08003d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7ff fd14 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8003d70:	61b8      	str	r0, [r7, #24]
        break;
 8003d72:	e013      	b.n	8003d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d74:	f7ff fd32 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 8003d78:	61b8      	str	r0, [r7, #24]
        break;
 8003d7a:	e00f      	b.n	8003d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d7c:	4b4e      	ldr	r3, [pc, #312]	; (8003eb8 <UART_SetConfig+0x268>)
 8003d7e:	61bb      	str	r3, [r7, #24]
        break;
 8003d80:	e00c      	b.n	8003d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d82:	f7ff fc93 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8003d86:	61b8      	str	r0, [r7, #24]
        break;
 8003d88:	e008      	b.n	8003d9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	61bb      	str	r3, [r7, #24]
        break;
 8003d90:	e004      	b.n	8003d9c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	77bb      	strb	r3, [r7, #30]
        break;
 8003d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d074      	beq.n	8003e8c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	005a      	lsls	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	441a      	add	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b0f      	cmp	r3, #15
 8003dbe:	d916      	bls.n	8003dee <UART_SetConfig+0x19e>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d212      	bcs.n	8003dee <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f023 030f 	bic.w	r3, r3, #15
 8003dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	89fa      	ldrh	r2, [r7, #14]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e04e      	b.n	8003e8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	77bb      	strb	r3, [r7, #30]
 8003df2:	e04b      	b.n	8003e8c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d827      	bhi.n	8003e4a <UART_SetConfig+0x1fa>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x1b0>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7ff fcb8 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8003e28:	61b8      	str	r0, [r7, #24]
        break;
 8003e2a:	e013      	b.n	8003e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7ff fcd6 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 8003e30:	61b8      	str	r0, [r7, #24]
        break;
 8003e32:	e00f      	b.n	8003e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <UART_SetConfig+0x268>)
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e00c      	b.n	8003e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7ff fc37 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8003e3e:	61b8      	str	r0, [r7, #24]
        break;
 8003e40:	e008      	b.n	8003e54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	61bb      	str	r3, [r7, #24]
        break;
 8003e48:	e004      	b.n	8003e54 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	77bb      	strb	r3, [r7, #30]
        break;
 8003e52:	bf00      	nop
    }

    if (pclk != 0U)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	085a      	lsrs	r2, r3, #1
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	441a      	add	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d908      	bls.n	8003e88 <UART_SetConfig+0x238>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d204      	bcs.n	8003e88 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e001      	b.n	8003e8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	efff69f3 	.word	0xefff69f3
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40004400 	.word	0x40004400
 8003eb4:	40004800 	.word	0x40004800
 8003eb8:	007a1200 	.word	0x007a1200

08003ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fba:	d10a      	bne.n	8003fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004010:	f7fd fb4a 	bl	80016a8 <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d10e      	bne.n	8004042 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f82d 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e023      	b.n	800408a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d10e      	bne.n	800406e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f817 	bl	8004092 <UART_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e00d      	b.n	800408a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b09c      	sub	sp, #112	; 0x70
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a2:	e0a5      	b.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	f000 80a1 	beq.w	80041f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fd fafb 	bl	80016a8 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80040be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d13e      	bne.n	8004142 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004116:	64ba      	str	r2, [r7, #72]	; 0x48
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800411c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e067      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d04f      	beq.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415e:	d147      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004168:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800417e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800418e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	613b      	str	r3, [r7, #16]
   return(result);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041bc:	623a      	str	r2, [r7, #32]
 80041be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	69f9      	ldr	r1, [r7, #28]
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e010      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	429a      	cmp	r2, r3
 800420c:	f43f af4a 	beq.w	80040a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3770      	adds	r7, #112	; 0x70
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <__errno>:
 800421c:	4b01      	ldr	r3, [pc, #4]	; (8004224 <__errno+0x8>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	2000000c 	.word	0x2000000c

08004228 <__libc_init_array>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4d0d      	ldr	r5, [pc, #52]	; (8004260 <__libc_init_array+0x38>)
 800422c:	4c0d      	ldr	r4, [pc, #52]	; (8004264 <__libc_init_array+0x3c>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	2600      	movs	r6, #0
 8004234:	42a6      	cmp	r6, r4
 8004236:	d109      	bne.n	800424c <__libc_init_array+0x24>
 8004238:	4d0b      	ldr	r5, [pc, #44]	; (8004268 <__libc_init_array+0x40>)
 800423a:	4c0c      	ldr	r4, [pc, #48]	; (800426c <__libc_init_array+0x44>)
 800423c:	f002 fd08 	bl	8006c50 <_init>
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	2600      	movs	r6, #0
 8004246:	42a6      	cmp	r6, r4
 8004248:	d105      	bne.n	8004256 <__libc_init_array+0x2e>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004250:	4798      	blx	r3
 8004252:	3601      	adds	r6, #1
 8004254:	e7ee      	b.n	8004234 <__libc_init_array+0xc>
 8004256:	f855 3b04 	ldr.w	r3, [r5], #4
 800425a:	4798      	blx	r3
 800425c:	3601      	adds	r6, #1
 800425e:	e7f2      	b.n	8004246 <__libc_init_array+0x1e>
 8004260:	080070e4 	.word	0x080070e4
 8004264:	080070e4 	.word	0x080070e4
 8004268:	080070e4 	.word	0x080070e4
 800426c:	080070e8 	.word	0x080070e8

08004270 <malloc>:
 8004270:	4b02      	ldr	r3, [pc, #8]	; (800427c <malloc+0xc>)
 8004272:	4601      	mov	r1, r0
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	f000 b869 	b.w	800434c <_malloc_r>
 800427a:	bf00      	nop
 800427c:	2000000c 	.word	0x2000000c

08004280 <memcpy>:
 8004280:	440a      	add	r2, r1
 8004282:	4291      	cmp	r1, r2
 8004284:	f100 33ff 	add.w	r3, r0, #4294967295
 8004288:	d100      	bne.n	800428c <memcpy+0xc>
 800428a:	4770      	bx	lr
 800428c:	b510      	push	{r4, lr}
 800428e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004296:	4291      	cmp	r1, r2
 8004298:	d1f9      	bne.n	800428e <memcpy+0xe>
 800429a:	bd10      	pop	{r4, pc}

0800429c <memset>:
 800429c:	4402      	add	r2, r0
 800429e:	4603      	mov	r3, r0
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d100      	bne.n	80042a6 <memset+0xa>
 80042a4:	4770      	bx	lr
 80042a6:	f803 1b01 	strb.w	r1, [r3], #1
 80042aa:	e7f9      	b.n	80042a0 <memset+0x4>

080042ac <_free_r>:
 80042ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042ae:	2900      	cmp	r1, #0
 80042b0:	d048      	beq.n	8004344 <_free_r+0x98>
 80042b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b6:	9001      	str	r0, [sp, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f1a1 0404 	sub.w	r4, r1, #4
 80042be:	bfb8      	it	lt
 80042c0:	18e4      	addlt	r4, r4, r3
 80042c2:	f001 fca7 	bl	8005c14 <__malloc_lock>
 80042c6:	4a20      	ldr	r2, [pc, #128]	; (8004348 <_free_r+0x9c>)
 80042c8:	9801      	ldr	r0, [sp, #4]
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	4615      	mov	r5, r2
 80042ce:	b933      	cbnz	r3, 80042de <_free_r+0x32>
 80042d0:	6063      	str	r3, [r4, #4]
 80042d2:	6014      	str	r4, [r2, #0]
 80042d4:	b003      	add	sp, #12
 80042d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042da:	f001 bca1 	b.w	8005c20 <__malloc_unlock>
 80042de:	42a3      	cmp	r3, r4
 80042e0:	d90b      	bls.n	80042fa <_free_r+0x4e>
 80042e2:	6821      	ldr	r1, [r4, #0]
 80042e4:	1862      	adds	r2, r4, r1
 80042e6:	4293      	cmp	r3, r2
 80042e8:	bf04      	itt	eq
 80042ea:	681a      	ldreq	r2, [r3, #0]
 80042ec:	685b      	ldreq	r3, [r3, #4]
 80042ee:	6063      	str	r3, [r4, #4]
 80042f0:	bf04      	itt	eq
 80042f2:	1852      	addeq	r2, r2, r1
 80042f4:	6022      	streq	r2, [r4, #0]
 80042f6:	602c      	str	r4, [r5, #0]
 80042f8:	e7ec      	b.n	80042d4 <_free_r+0x28>
 80042fa:	461a      	mov	r2, r3
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	b10b      	cbz	r3, 8004304 <_free_r+0x58>
 8004300:	42a3      	cmp	r3, r4
 8004302:	d9fa      	bls.n	80042fa <_free_r+0x4e>
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	1855      	adds	r5, r2, r1
 8004308:	42a5      	cmp	r5, r4
 800430a:	d10b      	bne.n	8004324 <_free_r+0x78>
 800430c:	6824      	ldr	r4, [r4, #0]
 800430e:	4421      	add	r1, r4
 8004310:	1854      	adds	r4, r2, r1
 8004312:	42a3      	cmp	r3, r4
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	d1dd      	bne.n	80042d4 <_free_r+0x28>
 8004318:	681c      	ldr	r4, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	6053      	str	r3, [r2, #4]
 800431e:	4421      	add	r1, r4
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	e7d7      	b.n	80042d4 <_free_r+0x28>
 8004324:	d902      	bls.n	800432c <_free_r+0x80>
 8004326:	230c      	movs	r3, #12
 8004328:	6003      	str	r3, [r0, #0]
 800432a:	e7d3      	b.n	80042d4 <_free_r+0x28>
 800432c:	6825      	ldr	r5, [r4, #0]
 800432e:	1961      	adds	r1, r4, r5
 8004330:	428b      	cmp	r3, r1
 8004332:	bf04      	itt	eq
 8004334:	6819      	ldreq	r1, [r3, #0]
 8004336:	685b      	ldreq	r3, [r3, #4]
 8004338:	6063      	str	r3, [r4, #4]
 800433a:	bf04      	itt	eq
 800433c:	1949      	addeq	r1, r1, r5
 800433e:	6021      	streq	r1, [r4, #0]
 8004340:	6054      	str	r4, [r2, #4]
 8004342:	e7c7      	b.n	80042d4 <_free_r+0x28>
 8004344:	b003      	add	sp, #12
 8004346:	bd30      	pop	{r4, r5, pc}
 8004348:	200001fc 	.word	0x200001fc

0800434c <_malloc_r>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	1ccd      	adds	r5, r1, #3
 8004350:	f025 0503 	bic.w	r5, r5, #3
 8004354:	3508      	adds	r5, #8
 8004356:	2d0c      	cmp	r5, #12
 8004358:	bf38      	it	cc
 800435a:	250c      	movcc	r5, #12
 800435c:	2d00      	cmp	r5, #0
 800435e:	4606      	mov	r6, r0
 8004360:	db01      	blt.n	8004366 <_malloc_r+0x1a>
 8004362:	42a9      	cmp	r1, r5
 8004364:	d903      	bls.n	800436e <_malloc_r+0x22>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	2000      	movs	r0, #0
 800436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800436e:	f001 fc51 	bl	8005c14 <__malloc_lock>
 8004372:	4921      	ldr	r1, [pc, #132]	; (80043f8 <_malloc_r+0xac>)
 8004374:	680a      	ldr	r2, [r1, #0]
 8004376:	4614      	mov	r4, r2
 8004378:	b99c      	cbnz	r4, 80043a2 <_malloc_r+0x56>
 800437a:	4f20      	ldr	r7, [pc, #128]	; (80043fc <_malloc_r+0xb0>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b923      	cbnz	r3, 800438a <_malloc_r+0x3e>
 8004380:	4621      	mov	r1, r4
 8004382:	4630      	mov	r0, r6
 8004384:	f000 fcbe 	bl	8004d04 <_sbrk_r>
 8004388:	6038      	str	r0, [r7, #0]
 800438a:	4629      	mov	r1, r5
 800438c:	4630      	mov	r0, r6
 800438e:	f000 fcb9 	bl	8004d04 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d123      	bne.n	80043de <_malloc_r+0x92>
 8004396:	230c      	movs	r3, #12
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	4630      	mov	r0, r6
 800439c:	f001 fc40 	bl	8005c20 <__malloc_unlock>
 80043a0:	e7e3      	b.n	800436a <_malloc_r+0x1e>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	1b5b      	subs	r3, r3, r5
 80043a6:	d417      	bmi.n	80043d8 <_malloc_r+0x8c>
 80043a8:	2b0b      	cmp	r3, #11
 80043aa:	d903      	bls.n	80043b4 <_malloc_r+0x68>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	441c      	add	r4, r3
 80043b0:	6025      	str	r5, [r4, #0]
 80043b2:	e004      	b.n	80043be <_malloc_r+0x72>
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	42a2      	cmp	r2, r4
 80043b8:	bf0c      	ite	eq
 80043ba:	600b      	streq	r3, [r1, #0]
 80043bc:	6053      	strne	r3, [r2, #4]
 80043be:	4630      	mov	r0, r6
 80043c0:	f001 fc2e 	bl	8005c20 <__malloc_unlock>
 80043c4:	f104 000b 	add.w	r0, r4, #11
 80043c8:	1d23      	adds	r3, r4, #4
 80043ca:	f020 0007 	bic.w	r0, r0, #7
 80043ce:	1ac2      	subs	r2, r0, r3
 80043d0:	d0cc      	beq.n	800436c <_malloc_r+0x20>
 80043d2:	1a1b      	subs	r3, r3, r0
 80043d4:	50a3      	str	r3, [r4, r2]
 80043d6:	e7c9      	b.n	800436c <_malloc_r+0x20>
 80043d8:	4622      	mov	r2, r4
 80043da:	6864      	ldr	r4, [r4, #4]
 80043dc:	e7cc      	b.n	8004378 <_malloc_r+0x2c>
 80043de:	1cc4      	adds	r4, r0, #3
 80043e0:	f024 0403 	bic.w	r4, r4, #3
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d0e3      	beq.n	80043b0 <_malloc_r+0x64>
 80043e8:	1a21      	subs	r1, r4, r0
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 fc8a 	bl	8004d04 <_sbrk_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d1dd      	bne.n	80043b0 <_malloc_r+0x64>
 80043f4:	e7cf      	b.n	8004396 <_malloc_r+0x4a>
 80043f6:	bf00      	nop
 80043f8:	200001fc 	.word	0x200001fc
 80043fc:	20000200 	.word	0x20000200

08004400 <__cvt>:
 8004400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	ec55 4b10 	vmov	r4, r5, d0
 8004408:	2d00      	cmp	r5, #0
 800440a:	460e      	mov	r6, r1
 800440c:	4619      	mov	r1, r3
 800440e:	462b      	mov	r3, r5
 8004410:	bfbb      	ittet	lt
 8004412:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004416:	461d      	movlt	r5, r3
 8004418:	2300      	movge	r3, #0
 800441a:	232d      	movlt	r3, #45	; 0x2d
 800441c:	700b      	strb	r3, [r1, #0]
 800441e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004420:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004424:	4691      	mov	r9, r2
 8004426:	f023 0820 	bic.w	r8, r3, #32
 800442a:	bfbc      	itt	lt
 800442c:	4622      	movlt	r2, r4
 800442e:	4614      	movlt	r4, r2
 8004430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004434:	d005      	beq.n	8004442 <__cvt+0x42>
 8004436:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800443a:	d100      	bne.n	800443e <__cvt+0x3e>
 800443c:	3601      	adds	r6, #1
 800443e:	2102      	movs	r1, #2
 8004440:	e000      	b.n	8004444 <__cvt+0x44>
 8004442:	2103      	movs	r1, #3
 8004444:	ab03      	add	r3, sp, #12
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	ab02      	add	r3, sp, #8
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	ec45 4b10 	vmov	d0, r4, r5
 8004450:	4653      	mov	r3, sl
 8004452:	4632      	mov	r2, r6
 8004454:	f000 fcf4 	bl	8004e40 <_dtoa_r>
 8004458:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800445c:	4607      	mov	r7, r0
 800445e:	d102      	bne.n	8004466 <__cvt+0x66>
 8004460:	f019 0f01 	tst.w	r9, #1
 8004464:	d022      	beq.n	80044ac <__cvt+0xac>
 8004466:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800446a:	eb07 0906 	add.w	r9, r7, r6
 800446e:	d110      	bne.n	8004492 <__cvt+0x92>
 8004470:	783b      	ldrb	r3, [r7, #0]
 8004472:	2b30      	cmp	r3, #48	; 0x30
 8004474:	d10a      	bne.n	800448c <__cvt+0x8c>
 8004476:	2200      	movs	r2, #0
 8004478:	2300      	movs	r3, #0
 800447a:	4620      	mov	r0, r4
 800447c:	4629      	mov	r1, r5
 800447e:	f7fc fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8004482:	b918      	cbnz	r0, 800448c <__cvt+0x8c>
 8004484:	f1c6 0601 	rsb	r6, r6, #1
 8004488:	f8ca 6000 	str.w	r6, [sl]
 800448c:	f8da 3000 	ldr.w	r3, [sl]
 8004490:	4499      	add	r9, r3
 8004492:	2200      	movs	r2, #0
 8004494:	2300      	movs	r3, #0
 8004496:	4620      	mov	r0, r4
 8004498:	4629      	mov	r1, r5
 800449a:	f7fc fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800449e:	b108      	cbz	r0, 80044a4 <__cvt+0xa4>
 80044a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80044a4:	2230      	movs	r2, #48	; 0x30
 80044a6:	9b03      	ldr	r3, [sp, #12]
 80044a8:	454b      	cmp	r3, r9
 80044aa:	d307      	bcc.n	80044bc <__cvt+0xbc>
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044b0:	1bdb      	subs	r3, r3, r7
 80044b2:	4638      	mov	r0, r7
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	b004      	add	sp, #16
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044bc:	1c59      	adds	r1, r3, #1
 80044be:	9103      	str	r1, [sp, #12]
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e7f0      	b.n	80044a6 <__cvt+0xa6>

080044c4 <__exponent>:
 80044c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044c6:	4603      	mov	r3, r0
 80044c8:	2900      	cmp	r1, #0
 80044ca:	bfb8      	it	lt
 80044cc:	4249      	neglt	r1, r1
 80044ce:	f803 2b02 	strb.w	r2, [r3], #2
 80044d2:	bfb4      	ite	lt
 80044d4:	222d      	movlt	r2, #45	; 0x2d
 80044d6:	222b      	movge	r2, #43	; 0x2b
 80044d8:	2909      	cmp	r1, #9
 80044da:	7042      	strb	r2, [r0, #1]
 80044dc:	dd2a      	ble.n	8004534 <__exponent+0x70>
 80044de:	f10d 0407 	add.w	r4, sp, #7
 80044e2:	46a4      	mov	ip, r4
 80044e4:	270a      	movs	r7, #10
 80044e6:	46a6      	mov	lr, r4
 80044e8:	460a      	mov	r2, r1
 80044ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80044ee:	fb07 1516 	mls	r5, r7, r6, r1
 80044f2:	3530      	adds	r5, #48	; 0x30
 80044f4:	2a63      	cmp	r2, #99	; 0x63
 80044f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80044fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044fe:	4631      	mov	r1, r6
 8004500:	dcf1      	bgt.n	80044e6 <__exponent+0x22>
 8004502:	3130      	adds	r1, #48	; 0x30
 8004504:	f1ae 0502 	sub.w	r5, lr, #2
 8004508:	f804 1c01 	strb.w	r1, [r4, #-1]
 800450c:	1c44      	adds	r4, r0, #1
 800450e:	4629      	mov	r1, r5
 8004510:	4561      	cmp	r1, ip
 8004512:	d30a      	bcc.n	800452a <__exponent+0x66>
 8004514:	f10d 0209 	add.w	r2, sp, #9
 8004518:	eba2 020e 	sub.w	r2, r2, lr
 800451c:	4565      	cmp	r5, ip
 800451e:	bf88      	it	hi
 8004520:	2200      	movhi	r2, #0
 8004522:	4413      	add	r3, r2
 8004524:	1a18      	subs	r0, r3, r0
 8004526:	b003      	add	sp, #12
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004532:	e7ed      	b.n	8004510 <__exponent+0x4c>
 8004534:	2330      	movs	r3, #48	; 0x30
 8004536:	3130      	adds	r1, #48	; 0x30
 8004538:	7083      	strb	r3, [r0, #2]
 800453a:	70c1      	strb	r1, [r0, #3]
 800453c:	1d03      	adds	r3, r0, #4
 800453e:	e7f1      	b.n	8004524 <__exponent+0x60>

08004540 <_printf_float>:
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	ed2d 8b02 	vpush	{d8}
 8004548:	b08d      	sub	sp, #52	; 0x34
 800454a:	460c      	mov	r4, r1
 800454c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004550:	4616      	mov	r6, r2
 8004552:	461f      	mov	r7, r3
 8004554:	4605      	mov	r5, r0
 8004556:	f001 fb55 	bl	8005c04 <_localeconv_r>
 800455a:	f8d0 a000 	ldr.w	sl, [r0]
 800455e:	4650      	mov	r0, sl
 8004560:	f7fb fe36 	bl	80001d0 <strlen>
 8004564:	2300      	movs	r3, #0
 8004566:	930a      	str	r3, [sp, #40]	; 0x28
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	9305      	str	r3, [sp, #20]
 800456c:	f8d8 3000 	ldr.w	r3, [r8]
 8004570:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004574:	3307      	adds	r3, #7
 8004576:	f023 0307 	bic.w	r3, r3, #7
 800457a:	f103 0208 	add.w	r2, r3, #8
 800457e:	f8c8 2000 	str.w	r2, [r8]
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800458a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800458e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004592:	9307      	str	r3, [sp, #28]
 8004594:	f8cd 8018 	str.w	r8, [sp, #24]
 8004598:	ee08 0a10 	vmov	s16, r0
 800459c:	4b9f      	ldr	r3, [pc, #636]	; (800481c <_printf_float+0x2dc>)
 800459e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045a2:	f04f 32ff 	mov.w	r2, #4294967295
 80045a6:	f7fc fac1 	bl	8000b2c <__aeabi_dcmpun>
 80045aa:	bb88      	cbnz	r0, 8004610 <_printf_float+0xd0>
 80045ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045b0:	4b9a      	ldr	r3, [pc, #616]	; (800481c <_printf_float+0x2dc>)
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295
 80045b6:	f7fc fa9b 	bl	8000af0 <__aeabi_dcmple>
 80045ba:	bb48      	cbnz	r0, 8004610 <_printf_float+0xd0>
 80045bc:	2200      	movs	r2, #0
 80045be:	2300      	movs	r3, #0
 80045c0:	4640      	mov	r0, r8
 80045c2:	4649      	mov	r1, r9
 80045c4:	f7fc fa8a 	bl	8000adc <__aeabi_dcmplt>
 80045c8:	b110      	cbz	r0, 80045d0 <_printf_float+0x90>
 80045ca:	232d      	movs	r3, #45	; 0x2d
 80045cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d0:	4b93      	ldr	r3, [pc, #588]	; (8004820 <_printf_float+0x2e0>)
 80045d2:	4894      	ldr	r0, [pc, #592]	; (8004824 <_printf_float+0x2e4>)
 80045d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80045d8:	bf94      	ite	ls
 80045da:	4698      	movls	r8, r3
 80045dc:	4680      	movhi	r8, r0
 80045de:	2303      	movs	r3, #3
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	9b05      	ldr	r3, [sp, #20]
 80045e4:	f023 0204 	bic.w	r2, r3, #4
 80045e8:	6022      	str	r2, [r4, #0]
 80045ea:	f04f 0900 	mov.w	r9, #0
 80045ee:	9700      	str	r7, [sp, #0]
 80045f0:	4633      	mov	r3, r6
 80045f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80045f4:	4621      	mov	r1, r4
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 f9d8 	bl	80049ac <_printf_common>
 80045fc:	3001      	adds	r0, #1
 80045fe:	f040 8090 	bne.w	8004722 <_printf_float+0x1e2>
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	b00d      	add	sp, #52	; 0x34
 8004608:	ecbd 8b02 	vpop	{d8}
 800460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004610:	4642      	mov	r2, r8
 8004612:	464b      	mov	r3, r9
 8004614:	4640      	mov	r0, r8
 8004616:	4649      	mov	r1, r9
 8004618:	f7fc fa88 	bl	8000b2c <__aeabi_dcmpun>
 800461c:	b140      	cbz	r0, 8004630 <_printf_float+0xf0>
 800461e:	464b      	mov	r3, r9
 8004620:	2b00      	cmp	r3, #0
 8004622:	bfbc      	itt	lt
 8004624:	232d      	movlt	r3, #45	; 0x2d
 8004626:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800462a:	487f      	ldr	r0, [pc, #508]	; (8004828 <_printf_float+0x2e8>)
 800462c:	4b7f      	ldr	r3, [pc, #508]	; (800482c <_printf_float+0x2ec>)
 800462e:	e7d1      	b.n	80045d4 <_printf_float+0x94>
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004636:	9206      	str	r2, [sp, #24]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	d13f      	bne.n	80046bc <_printf_float+0x17c>
 800463c:	2306      	movs	r3, #6
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	9b05      	ldr	r3, [sp, #20]
 8004642:	6861      	ldr	r1, [r4, #4]
 8004644:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004648:	2300      	movs	r3, #0
 800464a:	9303      	str	r3, [sp, #12]
 800464c:	ab0a      	add	r3, sp, #40	; 0x28
 800464e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004652:	ab09      	add	r3, sp, #36	; 0x24
 8004654:	ec49 8b10 	vmov	d0, r8, r9
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	6022      	str	r2, [r4, #0]
 800465c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004660:	4628      	mov	r0, r5
 8004662:	f7ff fecd 	bl	8004400 <__cvt>
 8004666:	9b06      	ldr	r3, [sp, #24]
 8004668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800466a:	2b47      	cmp	r3, #71	; 0x47
 800466c:	4680      	mov	r8, r0
 800466e:	d108      	bne.n	8004682 <_printf_float+0x142>
 8004670:	1cc8      	adds	r0, r1, #3
 8004672:	db02      	blt.n	800467a <_printf_float+0x13a>
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	4299      	cmp	r1, r3
 8004678:	dd41      	ble.n	80046fe <_printf_float+0x1be>
 800467a:	f1ab 0b02 	sub.w	fp, fp, #2
 800467e:	fa5f fb8b 	uxtb.w	fp, fp
 8004682:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004686:	d820      	bhi.n	80046ca <_printf_float+0x18a>
 8004688:	3901      	subs	r1, #1
 800468a:	465a      	mov	r2, fp
 800468c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004690:	9109      	str	r1, [sp, #36]	; 0x24
 8004692:	f7ff ff17 	bl	80044c4 <__exponent>
 8004696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004698:	1813      	adds	r3, r2, r0
 800469a:	2a01      	cmp	r2, #1
 800469c:	4681      	mov	r9, r0
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	dc02      	bgt.n	80046a8 <_printf_float+0x168>
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	07d2      	lsls	r2, r2, #31
 80046a6:	d501      	bpl.n	80046ac <_printf_float+0x16c>
 80046a8:	3301      	adds	r3, #1
 80046aa:	6123      	str	r3, [r4, #16]
 80046ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d09c      	beq.n	80045ee <_printf_float+0xae>
 80046b4:	232d      	movs	r3, #45	; 0x2d
 80046b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ba:	e798      	b.n	80045ee <_printf_float+0xae>
 80046bc:	9a06      	ldr	r2, [sp, #24]
 80046be:	2a47      	cmp	r2, #71	; 0x47
 80046c0:	d1be      	bne.n	8004640 <_printf_float+0x100>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1bc      	bne.n	8004640 <_printf_float+0x100>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e7b9      	b.n	800463e <_printf_float+0xfe>
 80046ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80046ce:	d118      	bne.n	8004702 <_printf_float+0x1c2>
 80046d0:	2900      	cmp	r1, #0
 80046d2:	6863      	ldr	r3, [r4, #4]
 80046d4:	dd0b      	ble.n	80046ee <_printf_float+0x1ae>
 80046d6:	6121      	str	r1, [r4, #16]
 80046d8:	b913      	cbnz	r3, 80046e0 <_printf_float+0x1a0>
 80046da:	6822      	ldr	r2, [r4, #0]
 80046dc:	07d0      	lsls	r0, r2, #31
 80046de:	d502      	bpl.n	80046e6 <_printf_float+0x1a6>
 80046e0:	3301      	adds	r3, #1
 80046e2:	440b      	add	r3, r1
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80046e8:	f04f 0900 	mov.w	r9, #0
 80046ec:	e7de      	b.n	80046ac <_printf_float+0x16c>
 80046ee:	b913      	cbnz	r3, 80046f6 <_printf_float+0x1b6>
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	07d2      	lsls	r2, r2, #31
 80046f4:	d501      	bpl.n	80046fa <_printf_float+0x1ba>
 80046f6:	3302      	adds	r3, #2
 80046f8:	e7f4      	b.n	80046e4 <_printf_float+0x1a4>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e7f2      	b.n	80046e4 <_printf_float+0x1a4>
 80046fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004704:	4299      	cmp	r1, r3
 8004706:	db05      	blt.n	8004714 <_printf_float+0x1d4>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	6121      	str	r1, [r4, #16]
 800470c:	07d8      	lsls	r0, r3, #31
 800470e:	d5ea      	bpl.n	80046e6 <_printf_float+0x1a6>
 8004710:	1c4b      	adds	r3, r1, #1
 8004712:	e7e7      	b.n	80046e4 <_printf_float+0x1a4>
 8004714:	2900      	cmp	r1, #0
 8004716:	bfd4      	ite	le
 8004718:	f1c1 0202 	rsble	r2, r1, #2
 800471c:	2201      	movgt	r2, #1
 800471e:	4413      	add	r3, r2
 8004720:	e7e0      	b.n	80046e4 <_printf_float+0x1a4>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	055a      	lsls	r2, r3, #21
 8004726:	d407      	bmi.n	8004738 <_printf_float+0x1f8>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	4642      	mov	r2, r8
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	d12c      	bne.n	8004790 <_printf_float+0x250>
 8004736:	e764      	b.n	8004602 <_printf_float+0xc2>
 8004738:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800473c:	f240 80e0 	bls.w	8004900 <_printf_float+0x3c0>
 8004740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	f7fc f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800474c:	2800      	cmp	r0, #0
 800474e:	d034      	beq.n	80047ba <_printf_float+0x27a>
 8004750:	4a37      	ldr	r2, [pc, #220]	; (8004830 <_printf_float+0x2f0>)
 8004752:	2301      	movs	r3, #1
 8004754:	4631      	mov	r1, r6
 8004756:	4628      	mov	r0, r5
 8004758:	47b8      	blx	r7
 800475a:	3001      	adds	r0, #1
 800475c:	f43f af51 	beq.w	8004602 <_printf_float+0xc2>
 8004760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004764:	429a      	cmp	r2, r3
 8004766:	db02      	blt.n	800476e <_printf_float+0x22e>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	07d8      	lsls	r0, r3, #31
 800476c:	d510      	bpl.n	8004790 <_printf_float+0x250>
 800476e:	ee18 3a10 	vmov	r3, s16
 8004772:	4652      	mov	r2, sl
 8004774:	4631      	mov	r1, r6
 8004776:	4628      	mov	r0, r5
 8004778:	47b8      	blx	r7
 800477a:	3001      	adds	r0, #1
 800477c:	f43f af41 	beq.w	8004602 <_printf_float+0xc2>
 8004780:	f04f 0800 	mov.w	r8, #0
 8004784:	f104 091a 	add.w	r9, r4, #26
 8004788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	4543      	cmp	r3, r8
 800478e:	dc09      	bgt.n	80047a4 <_printf_float+0x264>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	079b      	lsls	r3, r3, #30
 8004794:	f100 8105 	bmi.w	80049a2 <_printf_float+0x462>
 8004798:	68e0      	ldr	r0, [r4, #12]
 800479a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800479c:	4298      	cmp	r0, r3
 800479e:	bfb8      	it	lt
 80047a0:	4618      	movlt	r0, r3
 80047a2:	e730      	b.n	8004606 <_printf_float+0xc6>
 80047a4:	2301      	movs	r3, #1
 80047a6:	464a      	mov	r2, r9
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f af27 	beq.w	8004602 <_printf_float+0xc2>
 80047b4:	f108 0801 	add.w	r8, r8, #1
 80047b8:	e7e6      	b.n	8004788 <_printf_float+0x248>
 80047ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	dc39      	bgt.n	8004834 <_printf_float+0x2f4>
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <_printf_float+0x2f0>)
 80047c2:	2301      	movs	r3, #1
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	f43f af19 	beq.w	8004602 <_printf_float+0xc2>
 80047d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d4:	4313      	orrs	r3, r2
 80047d6:	d102      	bne.n	80047de <_printf_float+0x29e>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	07d9      	lsls	r1, r3, #31
 80047dc:	d5d8      	bpl.n	8004790 <_printf_float+0x250>
 80047de:	ee18 3a10 	vmov	r3, s16
 80047e2:	4652      	mov	r2, sl
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f af09 	beq.w	8004602 <_printf_float+0xc2>
 80047f0:	f04f 0900 	mov.w	r9, #0
 80047f4:	f104 0a1a 	add.w	sl, r4, #26
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	425b      	negs	r3, r3
 80047fc:	454b      	cmp	r3, r9
 80047fe:	dc01      	bgt.n	8004804 <_printf_float+0x2c4>
 8004800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004802:	e792      	b.n	800472a <_printf_float+0x1ea>
 8004804:	2301      	movs	r3, #1
 8004806:	4652      	mov	r2, sl
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	f43f aef7 	beq.w	8004602 <_printf_float+0xc2>
 8004814:	f109 0901 	add.w	r9, r9, #1
 8004818:	e7ee      	b.n	80047f8 <_printf_float+0x2b8>
 800481a:	bf00      	nop
 800481c:	7fefffff 	.word	0x7fefffff
 8004820:	08006d08 	.word	0x08006d08
 8004824:	08006d0c 	.word	0x08006d0c
 8004828:	08006d14 	.word	0x08006d14
 800482c:	08006d10 	.word	0x08006d10
 8004830:	08006d18 	.word	0x08006d18
 8004834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004838:	429a      	cmp	r2, r3
 800483a:	bfa8      	it	ge
 800483c:	461a      	movge	r2, r3
 800483e:	2a00      	cmp	r2, #0
 8004840:	4691      	mov	r9, r2
 8004842:	dc37      	bgt.n	80048b4 <_printf_float+0x374>
 8004844:	f04f 0b00 	mov.w	fp, #0
 8004848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484c:	f104 021a 	add.w	r2, r4, #26
 8004850:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004852:	9305      	str	r3, [sp, #20]
 8004854:	eba3 0309 	sub.w	r3, r3, r9
 8004858:	455b      	cmp	r3, fp
 800485a:	dc33      	bgt.n	80048c4 <_printf_float+0x384>
 800485c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004860:	429a      	cmp	r2, r3
 8004862:	db3b      	blt.n	80048dc <_printf_float+0x39c>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	07da      	lsls	r2, r3, #31
 8004868:	d438      	bmi.n	80048dc <_printf_float+0x39c>
 800486a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800486c:	9b05      	ldr	r3, [sp, #20]
 800486e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	eba2 0901 	sub.w	r9, r2, r1
 8004876:	4599      	cmp	r9, r3
 8004878:	bfa8      	it	ge
 800487a:	4699      	movge	r9, r3
 800487c:	f1b9 0f00 	cmp.w	r9, #0
 8004880:	dc35      	bgt.n	80048ee <_printf_float+0x3ae>
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800488a:	f104 0a1a 	add.w	sl, r4, #26
 800488e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	eba3 0309 	sub.w	r3, r3, r9
 8004898:	4543      	cmp	r3, r8
 800489a:	f77f af79 	ble.w	8004790 <_printf_float+0x250>
 800489e:	2301      	movs	r3, #1
 80048a0:	4652      	mov	r2, sl
 80048a2:	4631      	mov	r1, r6
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b8      	blx	r7
 80048a8:	3001      	adds	r0, #1
 80048aa:	f43f aeaa 	beq.w	8004602 <_printf_float+0xc2>
 80048ae:	f108 0801 	add.w	r8, r8, #1
 80048b2:	e7ec      	b.n	800488e <_printf_float+0x34e>
 80048b4:	4613      	mov	r3, r2
 80048b6:	4631      	mov	r1, r6
 80048b8:	4642      	mov	r2, r8
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	d1c0      	bne.n	8004844 <_printf_float+0x304>
 80048c2:	e69e      	b.n	8004602 <_printf_float+0xc2>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	9205      	str	r2, [sp, #20]
 80048cc:	47b8      	blx	r7
 80048ce:	3001      	adds	r0, #1
 80048d0:	f43f ae97 	beq.w	8004602 <_printf_float+0xc2>
 80048d4:	9a05      	ldr	r2, [sp, #20]
 80048d6:	f10b 0b01 	add.w	fp, fp, #1
 80048da:	e7b9      	b.n	8004850 <_printf_float+0x310>
 80048dc:	ee18 3a10 	vmov	r3, s16
 80048e0:	4652      	mov	r2, sl
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	d1be      	bne.n	800486a <_printf_float+0x32a>
 80048ec:	e689      	b.n	8004602 <_printf_float+0xc2>
 80048ee:	9a05      	ldr	r2, [sp, #20]
 80048f0:	464b      	mov	r3, r9
 80048f2:	4442      	add	r2, r8
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	d1c1      	bne.n	8004882 <_printf_float+0x342>
 80048fe:	e680      	b.n	8004602 <_printf_float+0xc2>
 8004900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004902:	2a01      	cmp	r2, #1
 8004904:	dc01      	bgt.n	800490a <_printf_float+0x3ca>
 8004906:	07db      	lsls	r3, r3, #31
 8004908:	d538      	bpl.n	800497c <_printf_float+0x43c>
 800490a:	2301      	movs	r3, #1
 800490c:	4642      	mov	r2, r8
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	f43f ae74 	beq.w	8004602 <_printf_float+0xc2>
 800491a:	ee18 3a10 	vmov	r3, s16
 800491e:	4652      	mov	r2, sl
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f ae6b 	beq.w	8004602 <_printf_float+0xc2>
 800492c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004930:	2200      	movs	r2, #0
 8004932:	2300      	movs	r3, #0
 8004934:	f7fc f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004938:	b9d8      	cbnz	r0, 8004972 <_printf_float+0x432>
 800493a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800493c:	f108 0201 	add.w	r2, r8, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	d10e      	bne.n	800496a <_printf_float+0x42a>
 800494c:	e659      	b.n	8004602 <_printf_float+0xc2>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4631      	mov	r1, r6
 8004954:	4628      	mov	r0, r5
 8004956:	47b8      	blx	r7
 8004958:	3001      	adds	r0, #1
 800495a:	f43f ae52 	beq.w	8004602 <_printf_float+0xc2>
 800495e:	f108 0801 	add.w	r8, r8, #1
 8004962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	4543      	cmp	r3, r8
 8004968:	dcf1      	bgt.n	800494e <_printf_float+0x40e>
 800496a:	464b      	mov	r3, r9
 800496c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004970:	e6dc      	b.n	800472c <_printf_float+0x1ec>
 8004972:	f04f 0800 	mov.w	r8, #0
 8004976:	f104 0a1a 	add.w	sl, r4, #26
 800497a:	e7f2      	b.n	8004962 <_printf_float+0x422>
 800497c:	2301      	movs	r3, #1
 800497e:	4642      	mov	r2, r8
 8004980:	e7df      	b.n	8004942 <_printf_float+0x402>
 8004982:	2301      	movs	r3, #1
 8004984:	464a      	mov	r2, r9
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f ae38 	beq.w	8004602 <_printf_float+0xc2>
 8004992:	f108 0801 	add.w	r8, r8, #1
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800499a:	1a5b      	subs	r3, r3, r1
 800499c:	4543      	cmp	r3, r8
 800499e:	dcf0      	bgt.n	8004982 <_printf_float+0x442>
 80049a0:	e6fa      	b.n	8004798 <_printf_float+0x258>
 80049a2:	f04f 0800 	mov.w	r8, #0
 80049a6:	f104 0919 	add.w	r9, r4, #25
 80049aa:	e7f4      	b.n	8004996 <_printf_float+0x456>

080049ac <_printf_common>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	4616      	mov	r6, r2
 80049b2:	4699      	mov	r9, r3
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	690b      	ldr	r3, [r1, #16]
 80049b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049bc:	4293      	cmp	r3, r2
 80049be:	bfb8      	it	lt
 80049c0:	4613      	movlt	r3, r2
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c8:	4607      	mov	r7, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b10a      	cbz	r2, 80049d2 <_printf_common+0x26>
 80049ce:	3301      	adds	r3, #1
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	6833      	ldrmi	r3, [r6, #0]
 80049da:	3302      	addmi	r3, #2
 80049dc:	6033      	strmi	r3, [r6, #0]
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	f015 0506 	ands.w	r5, r5, #6
 80049e4:	d106      	bne.n	80049f4 <_printf_common+0x48>
 80049e6:	f104 0a19 	add.w	sl, r4, #25
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	6832      	ldr	r2, [r6, #0]
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dc26      	bgt.n	8004a42 <_printf_common+0x96>
 80049f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049f8:	1e13      	subs	r3, r2, #0
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	0692      	lsls	r2, r2, #26
 8004a02:	d42b      	bmi.n	8004a5c <_printf_common+0xb0>
 8004a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d01e      	beq.n	8004a50 <_printf_common+0xa4>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	68e5      	ldr	r5, [r4, #12]
 8004a16:	6832      	ldr	r2, [r6, #0]
 8004a18:	f003 0306 	and.w	r3, r3, #6
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	bf08      	it	eq
 8004a20:	1aad      	subeq	r5, r5, r2
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	6922      	ldr	r2, [r4, #16]
 8004a26:	bf0c      	ite	eq
 8004a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a2c:	2500      	movne	r5, #0
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	bfc4      	itt	gt
 8004a32:	1a9b      	subgt	r3, r3, r2
 8004a34:	18ed      	addgt	r5, r5, r3
 8004a36:	2600      	movs	r6, #0
 8004a38:	341a      	adds	r4, #26
 8004a3a:	42b5      	cmp	r5, r6
 8004a3c:	d11a      	bne.n	8004a74 <_printf_common+0xc8>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e008      	b.n	8004a54 <_printf_common+0xa8>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4652      	mov	r2, sl
 8004a46:	4649      	mov	r1, r9
 8004a48:	4638      	mov	r0, r7
 8004a4a:	47c0      	blx	r8
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d103      	bne.n	8004a58 <_printf_common+0xac>
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	3501      	adds	r5, #1
 8004a5a:	e7c6      	b.n	80049ea <_printf_common+0x3e>
 8004a5c:	18e1      	adds	r1, r4, r3
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	2030      	movs	r0, #48	; 0x30
 8004a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a66:	4422      	add	r2, r4
 8004a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a70:	3302      	adds	r3, #2
 8004a72:	e7c7      	b.n	8004a04 <_printf_common+0x58>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4622      	mov	r2, r4
 8004a78:	4649      	mov	r1, r9
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	47c0      	blx	r8
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d0e6      	beq.n	8004a50 <_printf_common+0xa4>
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7d9      	b.n	8004a3a <_printf_common+0x8e>
	...

08004a88 <_printf_i>:
 8004a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	4691      	mov	r9, r2
 8004a90:	7e27      	ldrb	r7, [r4, #24]
 8004a92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a94:	2f78      	cmp	r7, #120	; 0x78
 8004a96:	4680      	mov	r8, r0
 8004a98:	469a      	mov	sl, r3
 8004a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a9e:	d807      	bhi.n	8004ab0 <_printf_i+0x28>
 8004aa0:	2f62      	cmp	r7, #98	; 0x62
 8004aa2:	d80a      	bhi.n	8004aba <_printf_i+0x32>
 8004aa4:	2f00      	cmp	r7, #0
 8004aa6:	f000 80d8 	beq.w	8004c5a <_printf_i+0x1d2>
 8004aaa:	2f58      	cmp	r7, #88	; 0x58
 8004aac:	f000 80a3 	beq.w	8004bf6 <_printf_i+0x16e>
 8004ab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ab8:	e03a      	b.n	8004b30 <_printf_i+0xa8>
 8004aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004abe:	2b15      	cmp	r3, #21
 8004ac0:	d8f6      	bhi.n	8004ab0 <_printf_i+0x28>
 8004ac2:	a001      	add	r0, pc, #4	; (adr r0, 8004ac8 <_printf_i+0x40>)
 8004ac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	08004b35 	.word	0x08004b35
 8004ad0:	08004ab1 	.word	0x08004ab1
 8004ad4:	08004ab1 	.word	0x08004ab1
 8004ad8:	08004ab1 	.word	0x08004ab1
 8004adc:	08004ab1 	.word	0x08004ab1
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004ab1 	.word	0x08004ab1
 8004ae8:	08004ab1 	.word	0x08004ab1
 8004aec:	08004ab1 	.word	0x08004ab1
 8004af0:	08004ab1 	.word	0x08004ab1
 8004af4:	08004c41 	.word	0x08004c41
 8004af8:	08004b65 	.word	0x08004b65
 8004afc:	08004c23 	.word	0x08004c23
 8004b00:	08004ab1 	.word	0x08004ab1
 8004b04:	08004ab1 	.word	0x08004ab1
 8004b08:	08004c63 	.word	0x08004c63
 8004b0c:	08004ab1 	.word	0x08004ab1
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004ab1 	.word	0x08004ab1
 8004b18:	08004ab1 	.word	0x08004ab1
 8004b1c:	08004c2b 	.word	0x08004c2b
 8004b20:	680b      	ldr	r3, [r1, #0]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	600a      	str	r2, [r1, #0]
 8004b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0a3      	b.n	8004c7c <_printf_i+0x1f4>
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	6808      	ldr	r0, [r1, #0]
 8004b38:	062e      	lsls	r6, r5, #24
 8004b3a:	f100 0304 	add.w	r3, r0, #4
 8004b3e:	d50a      	bpl.n	8004b56 <_printf_i+0xce>
 8004b40:	6805      	ldr	r5, [r0, #0]
 8004b42:	600b      	str	r3, [r1, #0]
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	da03      	bge.n	8004b50 <_printf_i+0xc8>
 8004b48:	232d      	movs	r3, #45	; 0x2d
 8004b4a:	426d      	negs	r5, r5
 8004b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b50:	485e      	ldr	r0, [pc, #376]	; (8004ccc <_printf_i+0x244>)
 8004b52:	230a      	movs	r3, #10
 8004b54:	e019      	b.n	8004b8a <_printf_i+0x102>
 8004b56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b5a:	6805      	ldr	r5, [r0, #0]
 8004b5c:	600b      	str	r3, [r1, #0]
 8004b5e:	bf18      	it	ne
 8004b60:	b22d      	sxthne	r5, r5
 8004b62:	e7ef      	b.n	8004b44 <_printf_i+0xbc>
 8004b64:	680b      	ldr	r3, [r1, #0]
 8004b66:	6825      	ldr	r5, [r4, #0]
 8004b68:	1d18      	adds	r0, r3, #4
 8004b6a:	6008      	str	r0, [r1, #0]
 8004b6c:	0628      	lsls	r0, r5, #24
 8004b6e:	d501      	bpl.n	8004b74 <_printf_i+0xec>
 8004b70:	681d      	ldr	r5, [r3, #0]
 8004b72:	e002      	b.n	8004b7a <_printf_i+0xf2>
 8004b74:	0669      	lsls	r1, r5, #25
 8004b76:	d5fb      	bpl.n	8004b70 <_printf_i+0xe8>
 8004b78:	881d      	ldrh	r5, [r3, #0]
 8004b7a:	4854      	ldr	r0, [pc, #336]	; (8004ccc <_printf_i+0x244>)
 8004b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b7e:	bf0c      	ite	eq
 8004b80:	2308      	moveq	r3, #8
 8004b82:	230a      	movne	r3, #10
 8004b84:	2100      	movs	r1, #0
 8004b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b8a:	6866      	ldr	r6, [r4, #4]
 8004b8c:	60a6      	str	r6, [r4, #8]
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	bfa2      	ittt	ge
 8004b92:	6821      	ldrge	r1, [r4, #0]
 8004b94:	f021 0104 	bicge.w	r1, r1, #4
 8004b98:	6021      	strge	r1, [r4, #0]
 8004b9a:	b90d      	cbnz	r5, 8004ba0 <_printf_i+0x118>
 8004b9c:	2e00      	cmp	r6, #0
 8004b9e:	d04d      	beq.n	8004c3c <_printf_i+0x1b4>
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8004baa:	5dc7      	ldrb	r7, [r0, r7]
 8004bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bb0:	462f      	mov	r7, r5
 8004bb2:	42bb      	cmp	r3, r7
 8004bb4:	460d      	mov	r5, r1
 8004bb6:	d9f4      	bls.n	8004ba2 <_printf_i+0x11a>
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d10b      	bne.n	8004bd4 <_printf_i+0x14c>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	07df      	lsls	r7, r3, #31
 8004bc0:	d508      	bpl.n	8004bd4 <_printf_i+0x14c>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	6861      	ldr	r1, [r4, #4]
 8004bc6:	4299      	cmp	r1, r3
 8004bc8:	bfde      	ittt	le
 8004bca:	2330      	movle	r3, #48	; 0x30
 8004bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bd4:	1b92      	subs	r2, r2, r6
 8004bd6:	6122      	str	r2, [r4, #16]
 8004bd8:	f8cd a000 	str.w	sl, [sp]
 8004bdc:	464b      	mov	r3, r9
 8004bde:	aa03      	add	r2, sp, #12
 8004be0:	4621      	mov	r1, r4
 8004be2:	4640      	mov	r0, r8
 8004be4:	f7ff fee2 	bl	80049ac <_printf_common>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d14c      	bne.n	8004c86 <_printf_i+0x1fe>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	b004      	add	sp, #16
 8004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf6:	4835      	ldr	r0, [pc, #212]	; (8004ccc <_printf_i+0x244>)
 8004bf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	680e      	ldr	r6, [r1, #0]
 8004c00:	061f      	lsls	r7, r3, #24
 8004c02:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c06:	600e      	str	r6, [r1, #0]
 8004c08:	d514      	bpl.n	8004c34 <_printf_i+0x1ac>
 8004c0a:	07d9      	lsls	r1, r3, #31
 8004c0c:	bf44      	itt	mi
 8004c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c12:	6023      	strmi	r3, [r4, #0]
 8004c14:	b91d      	cbnz	r5, 8004c1e <_printf_i+0x196>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f023 0320 	bic.w	r3, r3, #32
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	2310      	movs	r3, #16
 8004c20:	e7b0      	b.n	8004b84 <_printf_i+0xfc>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	f043 0320 	orr.w	r3, r3, #32
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	2378      	movs	r3, #120	; 0x78
 8004c2c:	4828      	ldr	r0, [pc, #160]	; (8004cd0 <_printf_i+0x248>)
 8004c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c32:	e7e3      	b.n	8004bfc <_printf_i+0x174>
 8004c34:	065e      	lsls	r6, r3, #25
 8004c36:	bf48      	it	mi
 8004c38:	b2ad      	uxthmi	r5, r5
 8004c3a:	e7e6      	b.n	8004c0a <_printf_i+0x182>
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	e7bb      	b.n	8004bb8 <_printf_i+0x130>
 8004c40:	680b      	ldr	r3, [r1, #0]
 8004c42:	6826      	ldr	r6, [r4, #0]
 8004c44:	6960      	ldr	r0, [r4, #20]
 8004c46:	1d1d      	adds	r5, r3, #4
 8004c48:	600d      	str	r5, [r1, #0]
 8004c4a:	0635      	lsls	r5, r6, #24
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	d501      	bpl.n	8004c54 <_printf_i+0x1cc>
 8004c50:	6018      	str	r0, [r3, #0]
 8004c52:	e002      	b.n	8004c5a <_printf_i+0x1d2>
 8004c54:	0671      	lsls	r1, r6, #25
 8004c56:	d5fb      	bpl.n	8004c50 <_printf_i+0x1c8>
 8004c58:	8018      	strh	r0, [r3, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6123      	str	r3, [r4, #16]
 8004c5e:	4616      	mov	r6, r2
 8004c60:	e7ba      	b.n	8004bd8 <_printf_i+0x150>
 8004c62:	680b      	ldr	r3, [r1, #0]
 8004c64:	1d1a      	adds	r2, r3, #4
 8004c66:	600a      	str	r2, [r1, #0]
 8004c68:	681e      	ldr	r6, [r3, #0]
 8004c6a:	6862      	ldr	r2, [r4, #4]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7fb fab6 	bl	80001e0 <memchr>
 8004c74:	b108      	cbz	r0, 8004c7a <_printf_i+0x1f2>
 8004c76:	1b80      	subs	r0, r0, r6
 8004c78:	6060      	str	r0, [r4, #4]
 8004c7a:	6863      	ldr	r3, [r4, #4]
 8004c7c:	6123      	str	r3, [r4, #16]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c84:	e7a8      	b.n	8004bd8 <_printf_i+0x150>
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	4632      	mov	r2, r6
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	4640      	mov	r0, r8
 8004c8e:	47d0      	blx	sl
 8004c90:	3001      	adds	r0, #1
 8004c92:	d0ab      	beq.n	8004bec <_printf_i+0x164>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	079b      	lsls	r3, r3, #30
 8004c98:	d413      	bmi.n	8004cc2 <_printf_i+0x23a>
 8004c9a:	68e0      	ldr	r0, [r4, #12]
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	4298      	cmp	r0, r3
 8004ca0:	bfb8      	it	lt
 8004ca2:	4618      	movlt	r0, r3
 8004ca4:	e7a4      	b.n	8004bf0 <_printf_i+0x168>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	4632      	mov	r2, r6
 8004caa:	4649      	mov	r1, r9
 8004cac:	4640      	mov	r0, r8
 8004cae:	47d0      	blx	sl
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d09b      	beq.n	8004bec <_printf_i+0x164>
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	9903      	ldr	r1, [sp, #12]
 8004cba:	1a5b      	subs	r3, r3, r1
 8004cbc:	42ab      	cmp	r3, r5
 8004cbe:	dcf2      	bgt.n	8004ca6 <_printf_i+0x21e>
 8004cc0:	e7eb      	b.n	8004c9a <_printf_i+0x212>
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	f104 0619 	add.w	r6, r4, #25
 8004cc8:	e7f5      	b.n	8004cb6 <_printf_i+0x22e>
 8004cca:	bf00      	nop
 8004ccc:	08006d1a 	.word	0x08006d1a
 8004cd0:	08006d2b 	.word	0x08006d2b

08004cd4 <iprintf>:
 8004cd4:	b40f      	push	{r0, r1, r2, r3}
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <iprintf+0x2c>)
 8004cd8:	b513      	push	{r0, r1, r4, lr}
 8004cda:	681c      	ldr	r4, [r3, #0]
 8004cdc:	b124      	cbz	r4, 8004ce8 <iprintf+0x14>
 8004cde:	69a3      	ldr	r3, [r4, #24]
 8004ce0:	b913      	cbnz	r3, 8004ce8 <iprintf+0x14>
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 fef0 	bl	8005ac8 <__sinit>
 8004ce8:	ab05      	add	r3, sp, #20
 8004cea:	9a04      	ldr	r2, [sp, #16]
 8004cec:	68a1      	ldr	r1, [r4, #8]
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f001 fb51 	bl	8006398 <_vfiprintf_r>
 8004cf6:	b002      	add	sp, #8
 8004cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cfc:	b004      	add	sp, #16
 8004cfe:	4770      	bx	lr
 8004d00:	2000000c 	.word	0x2000000c

08004d04 <_sbrk_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d06      	ldr	r5, [pc, #24]	; (8004d20 <_sbrk_r+0x1c>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	f7fc fbfe 	bl	8001510 <_sbrk>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_sbrk_r+0x1a>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_sbrk_r+0x1a>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200002f4 	.word	0x200002f4

08004d24 <quorem>:
 8004d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d28:	6903      	ldr	r3, [r0, #16]
 8004d2a:	690c      	ldr	r4, [r1, #16]
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	4607      	mov	r7, r0
 8004d30:	f2c0 8081 	blt.w	8004e36 <quorem+0x112>
 8004d34:	3c01      	subs	r4, #1
 8004d36:	f101 0814 	add.w	r8, r1, #20
 8004d3a:	f100 0514 	add.w	r5, r0, #20
 8004d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d58:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d5c:	d331      	bcc.n	8004dc2 <quorem+0x9e>
 8004d5e:	f04f 0e00 	mov.w	lr, #0
 8004d62:	4640      	mov	r0, r8
 8004d64:	46ac      	mov	ip, r5
 8004d66:	46f2      	mov	sl, lr
 8004d68:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d6c:	b293      	uxth	r3, r2
 8004d6e:	fb06 e303 	mla	r3, r6, r3, lr
 8004d72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	ebaa 0303 	sub.w	r3, sl, r3
 8004d7c:	0c12      	lsrs	r2, r2, #16
 8004d7e:	f8dc a000 	ldr.w	sl, [ip]
 8004d82:	fb06 e202 	mla	r2, r6, r2, lr
 8004d86:	fa13 f38a 	uxtah	r3, r3, sl
 8004d8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d8e:	fa1f fa82 	uxth.w	sl, r2
 8004d92:	f8dc 2000 	ldr.w	r2, [ip]
 8004d96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004da4:	4581      	cmp	r9, r0
 8004da6:	f84c 3b04 	str.w	r3, [ip], #4
 8004daa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dae:	d2db      	bcs.n	8004d68 <quorem+0x44>
 8004db0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004db4:	b92b      	cbnz	r3, 8004dc2 <quorem+0x9e>
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	3b04      	subs	r3, #4
 8004dba:	429d      	cmp	r5, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	d32e      	bcc.n	8004e1e <quorem+0xfa>
 8004dc0:	613c      	str	r4, [r7, #16]
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f001 f9b0 	bl	8006128 <__mcmp>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	db24      	blt.n	8004e16 <quorem+0xf2>
 8004dcc:	3601      	adds	r6, #1
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f04f 0c00 	mov.w	ip, #0
 8004dd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dd8:	f8d0 e000 	ldr.w	lr, [r0]
 8004ddc:	b293      	uxth	r3, r2
 8004dde:	ebac 0303 	sub.w	r3, ip, r3
 8004de2:	0c12      	lsrs	r2, r2, #16
 8004de4:	fa13 f38e 	uxtah	r3, r3, lr
 8004de8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004df6:	45c1      	cmp	r9, r8
 8004df8:	f840 3b04 	str.w	r3, [r0], #4
 8004dfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e00:	d2e8      	bcs.n	8004dd4 <quorem+0xb0>
 8004e02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e0a:	b922      	cbnz	r2, 8004e16 <quorem+0xf2>
 8004e0c:	3b04      	subs	r3, #4
 8004e0e:	429d      	cmp	r5, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	d30a      	bcc.n	8004e2a <quorem+0x106>
 8004e14:	613c      	str	r4, [r7, #16]
 8004e16:	4630      	mov	r0, r6
 8004e18:	b003      	add	sp, #12
 8004e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	3b04      	subs	r3, #4
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	d1cc      	bne.n	8004dc0 <quorem+0x9c>
 8004e26:	3c01      	subs	r4, #1
 8004e28:	e7c7      	b.n	8004dba <quorem+0x96>
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	3b04      	subs	r3, #4
 8004e2e:	2a00      	cmp	r2, #0
 8004e30:	d1f0      	bne.n	8004e14 <quorem+0xf0>
 8004e32:	3c01      	subs	r4, #1
 8004e34:	e7eb      	b.n	8004e0e <quorem+0xea>
 8004e36:	2000      	movs	r0, #0
 8004e38:	e7ee      	b.n	8004e18 <quorem+0xf4>
 8004e3a:	0000      	movs	r0, r0
 8004e3c:	0000      	movs	r0, r0
	...

08004e40 <_dtoa_r>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	ed2d 8b02 	vpush	{d8}
 8004e48:	ec57 6b10 	vmov	r6, r7, d0
 8004e4c:	b095      	sub	sp, #84	; 0x54
 8004e4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e54:	9105      	str	r1, [sp, #20]
 8004e56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e60:	b975      	cbnz	r5, 8004e80 <_dtoa_r+0x40>
 8004e62:	2010      	movs	r0, #16
 8004e64:	f7ff fa04 	bl	8004270 <malloc>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6260      	str	r0, [r4, #36]	; 0x24
 8004e6c:	b920      	cbnz	r0, 8004e78 <_dtoa_r+0x38>
 8004e6e:	4bb2      	ldr	r3, [pc, #712]	; (8005138 <_dtoa_r+0x2f8>)
 8004e70:	21ea      	movs	r1, #234	; 0xea
 8004e72:	48b2      	ldr	r0, [pc, #712]	; (800513c <_dtoa_r+0x2fc>)
 8004e74:	f001 fcd6 	bl	8006824 <__assert_func>
 8004e78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e7c:	6005      	str	r5, [r0, #0]
 8004e7e:	60c5      	str	r5, [r0, #12]
 8004e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	b151      	cbz	r1, 8004e9c <_dtoa_r+0x5c>
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	604a      	str	r2, [r1, #4]
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4093      	lsls	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 ff0b 	bl	8005cac <_Bfree>
 8004e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	1e3b      	subs	r3, r7, #0
 8004e9e:	bfb9      	ittee	lt
 8004ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ea4:	9303      	strlt	r3, [sp, #12]
 8004ea6:	2300      	movge	r3, #0
 8004ea8:	f8c8 3000 	strge.w	r3, [r8]
 8004eac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004eb0:	4ba3      	ldr	r3, [pc, #652]	; (8005140 <_dtoa_r+0x300>)
 8004eb2:	bfbc      	itt	lt
 8004eb4:	2201      	movlt	r2, #1
 8004eb6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eba:	ea33 0309 	bics.w	r3, r3, r9
 8004ebe:	d11b      	bne.n	8004ef8 <_dtoa_r+0xb8>
 8004ec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ec2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ecc:	4333      	orrs	r3, r6
 8004ece:	f000 857a 	beq.w	80059c6 <_dtoa_r+0xb86>
 8004ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed4:	b963      	cbnz	r3, 8004ef0 <_dtoa_r+0xb0>
 8004ed6:	4b9b      	ldr	r3, [pc, #620]	; (8005144 <_dtoa_r+0x304>)
 8004ed8:	e024      	b.n	8004f24 <_dtoa_r+0xe4>
 8004eda:	4b9b      	ldr	r3, [pc, #620]	; (8005148 <_dtoa_r+0x308>)
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	9800      	ldr	r0, [sp, #0]
 8004ee6:	b015      	add	sp, #84	; 0x54
 8004ee8:	ecbd 8b02 	vpop	{d8}
 8004eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef0:	4b94      	ldr	r3, [pc, #592]	; (8005144 <_dtoa_r+0x304>)
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	3303      	adds	r3, #3
 8004ef6:	e7f3      	b.n	8004ee0 <_dtoa_r+0xa0>
 8004ef8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	ec51 0b17 	vmov	r0, r1, d7
 8004f02:	2300      	movs	r3, #0
 8004f04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004f08:	f7fb fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	b158      	cbz	r0, 8004f28 <_dtoa_r+0xe8>
 8004f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f12:	2301      	movs	r3, #1
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8551 	beq.w	80059c0 <_dtoa_r+0xb80>
 8004f1e:	488b      	ldr	r0, [pc, #556]	; (800514c <_dtoa_r+0x30c>)
 8004f20:	6018      	str	r0, [r3, #0]
 8004f22:	1e43      	subs	r3, r0, #1
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	e7dd      	b.n	8004ee4 <_dtoa_r+0xa4>
 8004f28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004f2c:	aa12      	add	r2, sp, #72	; 0x48
 8004f2e:	a913      	add	r1, sp, #76	; 0x4c
 8004f30:	4620      	mov	r0, r4
 8004f32:	f001 f99d 	bl	8006270 <__d2b>
 8004f36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f3a:	4683      	mov	fp, r0
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	d07c      	beq.n	800503a <_dtoa_r+0x1fa>
 8004f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004f4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	; (8005150 <_dtoa_r+0x310>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	4639      	mov	r1, r7
 8004f62:	f7fb f991 	bl	8000288 <__aeabi_dsub>
 8004f66:	a36e      	add	r3, pc, #440	; (adr r3, 8005120 <_dtoa_r+0x2e0>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f7fb fb44 	bl	80005f8 <__aeabi_dmul>
 8004f70:	a36d      	add	r3, pc, #436	; (adr r3, 8005128 <_dtoa_r+0x2e8>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb f989 	bl	800028c <__adddf3>
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	460f      	mov	r7, r1
 8004f80:	f7fb fad0 	bl	8000524 <__aeabi_i2d>
 8004f84:	a36a      	add	r3, pc, #424	; (adr r3, 8005130 <_dtoa_r+0x2f0>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f7fb fb35 	bl	80005f8 <__aeabi_dmul>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4630      	mov	r0, r6
 8004f94:	4639      	mov	r1, r7
 8004f96:	f7fb f979 	bl	800028c <__adddf3>
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	f7fb fddb 	bl	8000b58 <__aeabi_d2iz>
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	f7fb fd96 	bl	8000adc <__aeabi_dcmplt>
 8004fb0:	b148      	cbz	r0, 8004fc6 <_dtoa_r+0x186>
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	f7fb fab6 	bl	8000524 <__aeabi_i2d>
 8004fb8:	4632      	mov	r2, r6
 8004fba:	463b      	mov	r3, r7
 8004fbc:	f7fb fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fc0:	b908      	cbnz	r0, 8004fc6 <_dtoa_r+0x186>
 8004fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fc6:	f1ba 0f16 	cmp.w	sl, #22
 8004fca:	d854      	bhi.n	8005076 <_dtoa_r+0x236>
 8004fcc:	4b61      	ldr	r3, [pc, #388]	; (8005154 <_dtoa_r+0x314>)
 8004fce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fda:	f7fb fd7f 	bl	8000adc <__aeabi_dcmplt>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d04b      	beq.n	800507a <_dtoa_r+0x23a>
 8004fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	930e      	str	r3, [sp, #56]	; 0x38
 8004fea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fec:	1b5d      	subs	r5, r3, r5
 8004fee:	1e6b      	subs	r3, r5, #1
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	bf43      	ittte	mi
 8004ff4:	2300      	movmi	r3, #0
 8004ff6:	f1c5 0801 	rsbmi	r8, r5, #1
 8004ffa:	9304      	strmi	r3, [sp, #16]
 8004ffc:	f04f 0800 	movpl.w	r8, #0
 8005000:	f1ba 0f00 	cmp.w	sl, #0
 8005004:	db3b      	blt.n	800507e <_dtoa_r+0x23e>
 8005006:	9b04      	ldr	r3, [sp, #16]
 8005008:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800500c:	4453      	add	r3, sl
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	9306      	str	r3, [sp, #24]
 8005014:	9b05      	ldr	r3, [sp, #20]
 8005016:	2b09      	cmp	r3, #9
 8005018:	d869      	bhi.n	80050ee <_dtoa_r+0x2ae>
 800501a:	2b05      	cmp	r3, #5
 800501c:	bfc4      	itt	gt
 800501e:	3b04      	subgt	r3, #4
 8005020:	9305      	strgt	r3, [sp, #20]
 8005022:	9b05      	ldr	r3, [sp, #20]
 8005024:	f1a3 0302 	sub.w	r3, r3, #2
 8005028:	bfcc      	ite	gt
 800502a:	2500      	movgt	r5, #0
 800502c:	2501      	movle	r5, #1
 800502e:	2b03      	cmp	r3, #3
 8005030:	d869      	bhi.n	8005106 <_dtoa_r+0x2c6>
 8005032:	e8df f003 	tbb	[pc, r3]
 8005036:	4e2c      	.short	0x4e2c
 8005038:	5a4c      	.short	0x5a4c
 800503a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800503e:	441d      	add	r5, r3
 8005040:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005044:	2b20      	cmp	r3, #32
 8005046:	bfc1      	itttt	gt
 8005048:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800504c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005050:	fa09 f303 	lslgt.w	r3, r9, r3
 8005054:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005058:	bfda      	itte	le
 800505a:	f1c3 0320 	rsble	r3, r3, #32
 800505e:	fa06 f003 	lslle.w	r0, r6, r3
 8005062:	4318      	orrgt	r0, r3
 8005064:	f7fb fa4e 	bl	8000504 <__aeabi_ui2d>
 8005068:	2301      	movs	r3, #1
 800506a:	4606      	mov	r6, r0
 800506c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005070:	3d01      	subs	r5, #1
 8005072:	9310      	str	r3, [sp, #64]	; 0x40
 8005074:	e771      	b.n	8004f5a <_dtoa_r+0x11a>
 8005076:	2301      	movs	r3, #1
 8005078:	e7b6      	b.n	8004fe8 <_dtoa_r+0x1a8>
 800507a:	900e      	str	r0, [sp, #56]	; 0x38
 800507c:	e7b5      	b.n	8004fea <_dtoa_r+0x1aa>
 800507e:	f1ca 0300 	rsb	r3, sl, #0
 8005082:	9306      	str	r3, [sp, #24]
 8005084:	2300      	movs	r3, #0
 8005086:	eba8 080a 	sub.w	r8, r8, sl
 800508a:	930d      	str	r3, [sp, #52]	; 0x34
 800508c:	e7c2      	b.n	8005014 <_dtoa_r+0x1d4>
 800508e:	2300      	movs	r3, #0
 8005090:	9308      	str	r3, [sp, #32]
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	dc39      	bgt.n	800510c <_dtoa_r+0x2cc>
 8005098:	f04f 0901 	mov.w	r9, #1
 800509c:	f8cd 9004 	str.w	r9, [sp, #4]
 80050a0:	464b      	mov	r3, r9
 80050a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80050a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050a8:	2200      	movs	r2, #0
 80050aa:	6042      	str	r2, [r0, #4]
 80050ac:	2204      	movs	r2, #4
 80050ae:	f102 0614 	add.w	r6, r2, #20
 80050b2:	429e      	cmp	r6, r3
 80050b4:	6841      	ldr	r1, [r0, #4]
 80050b6:	d92f      	bls.n	8005118 <_dtoa_r+0x2d8>
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fdb7 	bl	8005c2c <_Balloc>
 80050be:	9000      	str	r0, [sp, #0]
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d14b      	bne.n	800515c <_dtoa_r+0x31c>
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <_dtoa_r+0x318>)
 80050c6:	4602      	mov	r2, r0
 80050c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050cc:	e6d1      	b.n	8004e72 <_dtoa_r+0x32>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7de      	b.n	8005090 <_dtoa_r+0x250>
 80050d2:	2300      	movs	r3, #0
 80050d4:	9308      	str	r3, [sp, #32]
 80050d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d8:	eb0a 0903 	add.w	r9, sl, r3
 80050dc:	f109 0301 	add.w	r3, r9, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	bfb8      	it	lt
 80050e6:	2301      	movlt	r3, #1
 80050e8:	e7dd      	b.n	80050a6 <_dtoa_r+0x266>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e7f2      	b.n	80050d4 <_dtoa_r+0x294>
 80050ee:	2501      	movs	r5, #1
 80050f0:	2300      	movs	r3, #0
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	9508      	str	r5, [sp, #32]
 80050f6:	f04f 39ff 	mov.w	r9, #4294967295
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005100:	2312      	movs	r3, #18
 8005102:	9209      	str	r2, [sp, #36]	; 0x24
 8005104:	e7cf      	b.n	80050a6 <_dtoa_r+0x266>
 8005106:	2301      	movs	r3, #1
 8005108:	9308      	str	r3, [sp, #32]
 800510a:	e7f4      	b.n	80050f6 <_dtoa_r+0x2b6>
 800510c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005110:	f8cd 9004 	str.w	r9, [sp, #4]
 8005114:	464b      	mov	r3, r9
 8005116:	e7c6      	b.n	80050a6 <_dtoa_r+0x266>
 8005118:	3101      	adds	r1, #1
 800511a:	6041      	str	r1, [r0, #4]
 800511c:	0052      	lsls	r2, r2, #1
 800511e:	e7c6      	b.n	80050ae <_dtoa_r+0x26e>
 8005120:	636f4361 	.word	0x636f4361
 8005124:	3fd287a7 	.word	0x3fd287a7
 8005128:	8b60c8b3 	.word	0x8b60c8b3
 800512c:	3fc68a28 	.word	0x3fc68a28
 8005130:	509f79fb 	.word	0x509f79fb
 8005134:	3fd34413 	.word	0x3fd34413
 8005138:	08006d49 	.word	0x08006d49
 800513c:	08006d60 	.word	0x08006d60
 8005140:	7ff00000 	.word	0x7ff00000
 8005144:	08006d45 	.word	0x08006d45
 8005148:	08006d3c 	.word	0x08006d3c
 800514c:	08006d19 	.word	0x08006d19
 8005150:	3ff80000 	.word	0x3ff80000
 8005154:	08006eb8 	.word	0x08006eb8
 8005158:	08006dbf 	.word	0x08006dbf
 800515c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515e:	9a00      	ldr	r2, [sp, #0]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	9b01      	ldr	r3, [sp, #4]
 8005164:	2b0e      	cmp	r3, #14
 8005166:	f200 80ad 	bhi.w	80052c4 <_dtoa_r+0x484>
 800516a:	2d00      	cmp	r5, #0
 800516c:	f000 80aa 	beq.w	80052c4 <_dtoa_r+0x484>
 8005170:	f1ba 0f00 	cmp.w	sl, #0
 8005174:	dd36      	ble.n	80051e4 <_dtoa_r+0x3a4>
 8005176:	4ac3      	ldr	r2, [pc, #780]	; (8005484 <_dtoa_r+0x644>)
 8005178:	f00a 030f 	and.w	r3, sl, #15
 800517c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005180:	ed93 7b00 	vldr	d7, [r3]
 8005184:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005188:	ea4f 172a 	mov.w	r7, sl, asr #4
 800518c:	eeb0 8a47 	vmov.f32	s16, s14
 8005190:	eef0 8a67 	vmov.f32	s17, s15
 8005194:	d016      	beq.n	80051c4 <_dtoa_r+0x384>
 8005196:	4bbc      	ldr	r3, [pc, #752]	; (8005488 <_dtoa_r+0x648>)
 8005198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800519c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051a0:	f7fb fb54 	bl	800084c <__aeabi_ddiv>
 80051a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051a8:	f007 070f 	and.w	r7, r7, #15
 80051ac:	2503      	movs	r5, #3
 80051ae:	4eb6      	ldr	r6, [pc, #728]	; (8005488 <_dtoa_r+0x648>)
 80051b0:	b957      	cbnz	r7, 80051c8 <_dtoa_r+0x388>
 80051b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b6:	ec53 2b18 	vmov	r2, r3, d8
 80051ba:	f7fb fb47 	bl	800084c <__aeabi_ddiv>
 80051be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c2:	e029      	b.n	8005218 <_dtoa_r+0x3d8>
 80051c4:	2502      	movs	r5, #2
 80051c6:	e7f2      	b.n	80051ae <_dtoa_r+0x36e>
 80051c8:	07f9      	lsls	r1, r7, #31
 80051ca:	d508      	bpl.n	80051de <_dtoa_r+0x39e>
 80051cc:	ec51 0b18 	vmov	r0, r1, d8
 80051d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051d4:	f7fb fa10 	bl	80005f8 <__aeabi_dmul>
 80051d8:	ec41 0b18 	vmov	d8, r0, r1
 80051dc:	3501      	adds	r5, #1
 80051de:	107f      	asrs	r7, r7, #1
 80051e0:	3608      	adds	r6, #8
 80051e2:	e7e5      	b.n	80051b0 <_dtoa_r+0x370>
 80051e4:	f000 80a6 	beq.w	8005334 <_dtoa_r+0x4f4>
 80051e8:	f1ca 0600 	rsb	r6, sl, #0
 80051ec:	4ba5      	ldr	r3, [pc, #660]	; (8005484 <_dtoa_r+0x644>)
 80051ee:	4fa6      	ldr	r7, [pc, #664]	; (8005488 <_dtoa_r+0x648>)
 80051f0:	f006 020f 	and.w	r2, r6, #15
 80051f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005200:	f7fb f9fa 	bl	80005f8 <__aeabi_dmul>
 8005204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005208:	1136      	asrs	r6, r6, #4
 800520a:	2300      	movs	r3, #0
 800520c:	2502      	movs	r5, #2
 800520e:	2e00      	cmp	r6, #0
 8005210:	f040 8085 	bne.w	800531e <_dtoa_r+0x4de>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1d2      	bne.n	80051be <_dtoa_r+0x37e>
 8005218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 808c 	beq.w	8005338 <_dtoa_r+0x4f8>
 8005220:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005224:	4b99      	ldr	r3, [pc, #612]	; (800548c <_dtoa_r+0x64c>)
 8005226:	2200      	movs	r2, #0
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fb fc56 	bl	8000adc <__aeabi_dcmplt>
 8005230:	2800      	cmp	r0, #0
 8005232:	f000 8081 	beq.w	8005338 <_dtoa_r+0x4f8>
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d07d      	beq.n	8005338 <_dtoa_r+0x4f8>
 800523c:	f1b9 0f00 	cmp.w	r9, #0
 8005240:	dd3c      	ble.n	80052bc <_dtoa_r+0x47c>
 8005242:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005246:	9307      	str	r3, [sp, #28]
 8005248:	2200      	movs	r2, #0
 800524a:	4b91      	ldr	r3, [pc, #580]	; (8005490 <_dtoa_r+0x650>)
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	f7fb f9d2 	bl	80005f8 <__aeabi_dmul>
 8005254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005258:	3501      	adds	r5, #1
 800525a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800525e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005262:	4628      	mov	r0, r5
 8005264:	f7fb f95e 	bl	8000524 <__aeabi_i2d>
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	f7fb f9c4 	bl	80005f8 <__aeabi_dmul>
 8005270:	4b88      	ldr	r3, [pc, #544]	; (8005494 <_dtoa_r+0x654>)
 8005272:	2200      	movs	r2, #0
 8005274:	f7fb f80a 	bl	800028c <__adddf3>
 8005278:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800527c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005280:	9303      	str	r3, [sp, #12]
 8005282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005284:	2b00      	cmp	r3, #0
 8005286:	d15c      	bne.n	8005342 <_dtoa_r+0x502>
 8005288:	4b83      	ldr	r3, [pc, #524]	; (8005498 <_dtoa_r+0x658>)
 800528a:	2200      	movs	r2, #0
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fa fffa 	bl	8000288 <__aeabi_dsub>
 8005294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	f7fb fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f040 8296 	bne.w	80057d2 <_dtoa_r+0x992>
 80052a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80052aa:	4630      	mov	r0, r6
 80052ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fb fc13 	bl	8000adc <__aeabi_dcmplt>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f040 8288 	bne.w	80057cc <_dtoa_r+0x98c>
 80052bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f2c0 8158 	blt.w	800557c <_dtoa_r+0x73c>
 80052cc:	f1ba 0f0e 	cmp.w	sl, #14
 80052d0:	f300 8154 	bgt.w	800557c <_dtoa_r+0x73c>
 80052d4:	4b6b      	ldr	r3, [pc, #428]	; (8005484 <_dtoa_r+0x644>)
 80052d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f280 80e3 	bge.w	80054ac <_dtoa_r+0x66c>
 80052e6:	9b01      	ldr	r3, [sp, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f300 80df 	bgt.w	80054ac <_dtoa_r+0x66c>
 80052ee:	f040 826d 	bne.w	80057cc <_dtoa_r+0x98c>
 80052f2:	4b69      	ldr	r3, [pc, #420]	; (8005498 <_dtoa_r+0x658>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb f97d 	bl	80005f8 <__aeabi_dmul>
 80052fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005302:	f7fb fbff 	bl	8000b04 <__aeabi_dcmpge>
 8005306:	9e01      	ldr	r6, [sp, #4]
 8005308:	4637      	mov	r7, r6
 800530a:	2800      	cmp	r0, #0
 800530c:	f040 8243 	bne.w	8005796 <_dtoa_r+0x956>
 8005310:	9d00      	ldr	r5, [sp, #0]
 8005312:	2331      	movs	r3, #49	; 0x31
 8005314:	f805 3b01 	strb.w	r3, [r5], #1
 8005318:	f10a 0a01 	add.w	sl, sl, #1
 800531c:	e23f      	b.n	800579e <_dtoa_r+0x95e>
 800531e:	07f2      	lsls	r2, r6, #31
 8005320:	d505      	bpl.n	800532e <_dtoa_r+0x4ee>
 8005322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005326:	f7fb f967 	bl	80005f8 <__aeabi_dmul>
 800532a:	3501      	adds	r5, #1
 800532c:	2301      	movs	r3, #1
 800532e:	1076      	asrs	r6, r6, #1
 8005330:	3708      	adds	r7, #8
 8005332:	e76c      	b.n	800520e <_dtoa_r+0x3ce>
 8005334:	2502      	movs	r5, #2
 8005336:	e76f      	b.n	8005218 <_dtoa_r+0x3d8>
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	f8cd a01c 	str.w	sl, [sp, #28]
 800533e:	930c      	str	r3, [sp, #48]	; 0x30
 8005340:	e78d      	b.n	800525e <_dtoa_r+0x41e>
 8005342:	9900      	ldr	r1, [sp, #0]
 8005344:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005348:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <_dtoa_r+0x644>)
 800534a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800534e:	4401      	add	r1, r0
 8005350:	9102      	str	r1, [sp, #8]
 8005352:	9908      	ldr	r1, [sp, #32]
 8005354:	eeb0 8a47 	vmov.f32	s16, s14
 8005358:	eef0 8a67 	vmov.f32	s17, s15
 800535c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005364:	2900      	cmp	r1, #0
 8005366:	d045      	beq.n	80053f4 <_dtoa_r+0x5b4>
 8005368:	494c      	ldr	r1, [pc, #304]	; (800549c <_dtoa_r+0x65c>)
 800536a:	2000      	movs	r0, #0
 800536c:	f7fb fa6e 	bl	800084c <__aeabi_ddiv>
 8005370:	ec53 2b18 	vmov	r2, r3, d8
 8005374:	f7fa ff88 	bl	8000288 <__aeabi_dsub>
 8005378:	9d00      	ldr	r5, [sp, #0]
 800537a:	ec41 0b18 	vmov	d8, r0, r1
 800537e:	4639      	mov	r1, r7
 8005380:	4630      	mov	r0, r6
 8005382:	f7fb fbe9 	bl	8000b58 <__aeabi_d2iz>
 8005386:	900c      	str	r0, [sp, #48]	; 0x30
 8005388:	f7fb f8cc 	bl	8000524 <__aeabi_i2d>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fa ff78 	bl	8000288 <__aeabi_dsub>
 8005398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800539a:	3330      	adds	r3, #48	; 0x30
 800539c:	f805 3b01 	strb.w	r3, [r5], #1
 80053a0:	ec53 2b18 	vmov	r2, r3, d8
 80053a4:	4606      	mov	r6, r0
 80053a6:	460f      	mov	r7, r1
 80053a8:	f7fb fb98 	bl	8000adc <__aeabi_dcmplt>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d165      	bne.n	800547c <_dtoa_r+0x63c>
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	4935      	ldr	r1, [pc, #212]	; (800548c <_dtoa_r+0x64c>)
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7fa ff66 	bl	8000288 <__aeabi_dsub>
 80053bc:	ec53 2b18 	vmov	r2, r3, d8
 80053c0:	f7fb fb8c 	bl	8000adc <__aeabi_dcmplt>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f040 80b9 	bne.w	800553c <_dtoa_r+0x6fc>
 80053ca:	9b02      	ldr	r3, [sp, #8]
 80053cc:	429d      	cmp	r5, r3
 80053ce:	f43f af75 	beq.w	80052bc <_dtoa_r+0x47c>
 80053d2:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <_dtoa_r+0x650>)
 80053d4:	ec51 0b18 	vmov	r0, r1, d8
 80053d8:	2200      	movs	r2, #0
 80053da:	f7fb f90d 	bl	80005f8 <__aeabi_dmul>
 80053de:	4b2c      	ldr	r3, [pc, #176]	; (8005490 <_dtoa_r+0x650>)
 80053e0:	ec41 0b18 	vmov	d8, r0, r1
 80053e4:	2200      	movs	r2, #0
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fb f905 	bl	80005f8 <__aeabi_dmul>
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	e7c4      	b.n	800537e <_dtoa_r+0x53e>
 80053f4:	ec51 0b17 	vmov	r0, r1, d7
 80053f8:	f7fb f8fe 	bl	80005f8 <__aeabi_dmul>
 80053fc:	9b02      	ldr	r3, [sp, #8]
 80053fe:	9d00      	ldr	r5, [sp, #0]
 8005400:	930c      	str	r3, [sp, #48]	; 0x30
 8005402:	ec41 0b18 	vmov	d8, r0, r1
 8005406:	4639      	mov	r1, r7
 8005408:	4630      	mov	r0, r6
 800540a:	f7fb fba5 	bl	8000b58 <__aeabi_d2iz>
 800540e:	9011      	str	r0, [sp, #68]	; 0x44
 8005410:	f7fb f888 	bl	8000524 <__aeabi_i2d>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fa ff34 	bl	8000288 <__aeabi_dsub>
 8005420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005422:	3330      	adds	r3, #48	; 0x30
 8005424:	f805 3b01 	strb.w	r3, [r5], #1
 8005428:	9b02      	ldr	r3, [sp, #8]
 800542a:	429d      	cmp	r5, r3
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	d134      	bne.n	80054a0 <_dtoa_r+0x660>
 8005436:	4b19      	ldr	r3, [pc, #100]	; (800549c <_dtoa_r+0x65c>)
 8005438:	ec51 0b18 	vmov	r0, r1, d8
 800543c:	f7fa ff26 	bl	800028c <__adddf3>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4630      	mov	r0, r6
 8005446:	4639      	mov	r1, r7
 8005448:	f7fb fb66 	bl	8000b18 <__aeabi_dcmpgt>
 800544c:	2800      	cmp	r0, #0
 800544e:	d175      	bne.n	800553c <_dtoa_r+0x6fc>
 8005450:	ec53 2b18 	vmov	r2, r3, d8
 8005454:	4911      	ldr	r1, [pc, #68]	; (800549c <_dtoa_r+0x65c>)
 8005456:	2000      	movs	r0, #0
 8005458:	f7fa ff16 	bl	8000288 <__aeabi_dsub>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4630      	mov	r0, r6
 8005462:	4639      	mov	r1, r7
 8005464:	f7fb fb3a 	bl	8000adc <__aeabi_dcmplt>
 8005468:	2800      	cmp	r0, #0
 800546a:	f43f af27 	beq.w	80052bc <_dtoa_r+0x47c>
 800546e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005470:	1e6b      	subs	r3, r5, #1
 8005472:	930c      	str	r3, [sp, #48]	; 0x30
 8005474:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d0f8      	beq.n	800546e <_dtoa_r+0x62e>
 800547c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005480:	e04a      	b.n	8005518 <_dtoa_r+0x6d8>
 8005482:	bf00      	nop
 8005484:	08006eb8 	.word	0x08006eb8
 8005488:	08006e90 	.word	0x08006e90
 800548c:	3ff00000 	.word	0x3ff00000
 8005490:	40240000 	.word	0x40240000
 8005494:	401c0000 	.word	0x401c0000
 8005498:	40140000 	.word	0x40140000
 800549c:	3fe00000 	.word	0x3fe00000
 80054a0:	4baf      	ldr	r3, [pc, #700]	; (8005760 <_dtoa_r+0x920>)
 80054a2:	f7fb f8a9 	bl	80005f8 <__aeabi_dmul>
 80054a6:	4606      	mov	r6, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	e7ac      	b.n	8005406 <_dtoa_r+0x5c6>
 80054ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054b0:	9d00      	ldr	r5, [sp, #0]
 80054b2:	4642      	mov	r2, r8
 80054b4:	464b      	mov	r3, r9
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fb f9c7 	bl	800084c <__aeabi_ddiv>
 80054be:	f7fb fb4b 	bl	8000b58 <__aeabi_d2iz>
 80054c2:	9002      	str	r0, [sp, #8]
 80054c4:	f7fb f82e 	bl	8000524 <__aeabi_i2d>
 80054c8:	4642      	mov	r2, r8
 80054ca:	464b      	mov	r3, r9
 80054cc:	f7fb f894 	bl	80005f8 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4630      	mov	r0, r6
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fa fed6 	bl	8000288 <__aeabi_dsub>
 80054dc:	9e02      	ldr	r6, [sp, #8]
 80054de:	9f01      	ldr	r7, [sp, #4]
 80054e0:	3630      	adds	r6, #48	; 0x30
 80054e2:	f805 6b01 	strb.w	r6, [r5], #1
 80054e6:	9e00      	ldr	r6, [sp, #0]
 80054e8:	1bae      	subs	r6, r5, r6
 80054ea:	42b7      	cmp	r7, r6
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	d137      	bne.n	8005562 <_dtoa_r+0x722>
 80054f2:	f7fa fecb 	bl	800028c <__adddf3>
 80054f6:	4642      	mov	r2, r8
 80054f8:	464b      	mov	r3, r9
 80054fa:	4606      	mov	r6, r0
 80054fc:	460f      	mov	r7, r1
 80054fe:	f7fb fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8005502:	b9c8      	cbnz	r0, 8005538 <_dtoa_r+0x6f8>
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	4630      	mov	r0, r6
 800550a:	4639      	mov	r1, r7
 800550c:	f7fb fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005510:	b110      	cbz	r0, 8005518 <_dtoa_r+0x6d8>
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	07d9      	lsls	r1, r3, #31
 8005516:	d40f      	bmi.n	8005538 <_dtoa_r+0x6f8>
 8005518:	4620      	mov	r0, r4
 800551a:	4659      	mov	r1, fp
 800551c:	f000 fbc6 	bl	8005cac <_Bfree>
 8005520:	2300      	movs	r3, #0
 8005522:	702b      	strb	r3, [r5, #0]
 8005524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005526:	f10a 0001 	add.w	r0, sl, #1
 800552a:	6018      	str	r0, [r3, #0]
 800552c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800552e:	2b00      	cmp	r3, #0
 8005530:	f43f acd8 	beq.w	8004ee4 <_dtoa_r+0xa4>
 8005534:	601d      	str	r5, [r3, #0]
 8005536:	e4d5      	b.n	8004ee4 <_dtoa_r+0xa4>
 8005538:	f8cd a01c 	str.w	sl, [sp, #28]
 800553c:	462b      	mov	r3, r5
 800553e:	461d      	mov	r5, r3
 8005540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005544:	2a39      	cmp	r2, #57	; 0x39
 8005546:	d108      	bne.n	800555a <_dtoa_r+0x71a>
 8005548:	9a00      	ldr	r2, [sp, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d1f7      	bne.n	800553e <_dtoa_r+0x6fe>
 800554e:	9a07      	ldr	r2, [sp, #28]
 8005550:	9900      	ldr	r1, [sp, #0]
 8005552:	3201      	adds	r2, #1
 8005554:	9207      	str	r2, [sp, #28]
 8005556:	2230      	movs	r2, #48	; 0x30
 8005558:	700a      	strb	r2, [r1, #0]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	3201      	adds	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e78c      	b.n	800547c <_dtoa_r+0x63c>
 8005562:	4b7f      	ldr	r3, [pc, #508]	; (8005760 <_dtoa_r+0x920>)
 8005564:	2200      	movs	r2, #0
 8005566:	f7fb f847 	bl	80005f8 <__aeabi_dmul>
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	4606      	mov	r6, r0
 8005570:	460f      	mov	r7, r1
 8005572:	f7fb faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005576:	2800      	cmp	r0, #0
 8005578:	d09b      	beq.n	80054b2 <_dtoa_r+0x672>
 800557a:	e7cd      	b.n	8005518 <_dtoa_r+0x6d8>
 800557c:	9a08      	ldr	r2, [sp, #32]
 800557e:	2a00      	cmp	r2, #0
 8005580:	f000 80c4 	beq.w	800570c <_dtoa_r+0x8cc>
 8005584:	9a05      	ldr	r2, [sp, #20]
 8005586:	2a01      	cmp	r2, #1
 8005588:	f300 80a8 	bgt.w	80056dc <_dtoa_r+0x89c>
 800558c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800558e:	2a00      	cmp	r2, #0
 8005590:	f000 80a0 	beq.w	80056d4 <_dtoa_r+0x894>
 8005594:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005598:	9e06      	ldr	r6, [sp, #24]
 800559a:	4645      	mov	r5, r8
 800559c:	9a04      	ldr	r2, [sp, #16]
 800559e:	2101      	movs	r1, #1
 80055a0:	441a      	add	r2, r3
 80055a2:	4620      	mov	r0, r4
 80055a4:	4498      	add	r8, r3
 80055a6:	9204      	str	r2, [sp, #16]
 80055a8:	f000 fc3c 	bl	8005e24 <__i2b>
 80055ac:	4607      	mov	r7, r0
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	dd0b      	ble.n	80055ca <_dtoa_r+0x78a>
 80055b2:	9b04      	ldr	r3, [sp, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd08      	ble.n	80055ca <_dtoa_r+0x78a>
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	9a04      	ldr	r2, [sp, #16]
 80055bc:	bfa8      	it	ge
 80055be:	462b      	movge	r3, r5
 80055c0:	eba8 0803 	sub.w	r8, r8, r3
 80055c4:	1aed      	subs	r5, r5, r3
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	9304      	str	r3, [sp, #16]
 80055ca:	9b06      	ldr	r3, [sp, #24]
 80055cc:	b1fb      	cbz	r3, 800560e <_dtoa_r+0x7ce>
 80055ce:	9b08      	ldr	r3, [sp, #32]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 809f 	beq.w	8005714 <_dtoa_r+0x8d4>
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	dd11      	ble.n	80055fe <_dtoa_r+0x7be>
 80055da:	4639      	mov	r1, r7
 80055dc:	4632      	mov	r2, r6
 80055de:	4620      	mov	r0, r4
 80055e0:	f000 fcdc 	bl	8005f9c <__pow5mult>
 80055e4:	465a      	mov	r2, fp
 80055e6:	4601      	mov	r1, r0
 80055e8:	4607      	mov	r7, r0
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fc30 	bl	8005e50 <__multiply>
 80055f0:	4659      	mov	r1, fp
 80055f2:	9007      	str	r0, [sp, #28]
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fb59 	bl	8005cac <_Bfree>
 80055fa:	9b07      	ldr	r3, [sp, #28]
 80055fc:	469b      	mov	fp, r3
 80055fe:	9b06      	ldr	r3, [sp, #24]
 8005600:	1b9a      	subs	r2, r3, r6
 8005602:	d004      	beq.n	800560e <_dtoa_r+0x7ce>
 8005604:	4659      	mov	r1, fp
 8005606:	4620      	mov	r0, r4
 8005608:	f000 fcc8 	bl	8005f9c <__pow5mult>
 800560c:	4683      	mov	fp, r0
 800560e:	2101      	movs	r1, #1
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fc07 	bl	8005e24 <__i2b>
 8005616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	4606      	mov	r6, r0
 800561c:	dd7c      	ble.n	8005718 <_dtoa_r+0x8d8>
 800561e:	461a      	mov	r2, r3
 8005620:	4601      	mov	r1, r0
 8005622:	4620      	mov	r0, r4
 8005624:	f000 fcba 	bl	8005f9c <__pow5mult>
 8005628:	9b05      	ldr	r3, [sp, #20]
 800562a:	2b01      	cmp	r3, #1
 800562c:	4606      	mov	r6, r0
 800562e:	dd76      	ble.n	800571e <_dtoa_r+0x8de>
 8005630:	2300      	movs	r3, #0
 8005632:	9306      	str	r3, [sp, #24]
 8005634:	6933      	ldr	r3, [r6, #16]
 8005636:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800563a:	6918      	ldr	r0, [r3, #16]
 800563c:	f000 fba2 	bl	8005d84 <__hi0bits>
 8005640:	f1c0 0020 	rsb	r0, r0, #32
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	4418      	add	r0, r3
 8005648:	f010 001f 	ands.w	r0, r0, #31
 800564c:	f000 8086 	beq.w	800575c <_dtoa_r+0x91c>
 8005650:	f1c0 0320 	rsb	r3, r0, #32
 8005654:	2b04      	cmp	r3, #4
 8005656:	dd7f      	ble.n	8005758 <_dtoa_r+0x918>
 8005658:	f1c0 001c 	rsb	r0, r0, #28
 800565c:	9b04      	ldr	r3, [sp, #16]
 800565e:	4403      	add	r3, r0
 8005660:	4480      	add	r8, r0
 8005662:	4405      	add	r5, r0
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	f1b8 0f00 	cmp.w	r8, #0
 800566a:	dd05      	ble.n	8005678 <_dtoa_r+0x838>
 800566c:	4659      	mov	r1, fp
 800566e:	4642      	mov	r2, r8
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fced 	bl	8006050 <__lshift>
 8005676:	4683      	mov	fp, r0
 8005678:	9b04      	ldr	r3, [sp, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	dd05      	ble.n	800568a <_dtoa_r+0x84a>
 800567e:	4631      	mov	r1, r6
 8005680:	461a      	mov	r2, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fce4 	bl	8006050 <__lshift>
 8005688:	4606      	mov	r6, r0
 800568a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d069      	beq.n	8005764 <_dtoa_r+0x924>
 8005690:	4631      	mov	r1, r6
 8005692:	4658      	mov	r0, fp
 8005694:	f000 fd48 	bl	8006128 <__mcmp>
 8005698:	2800      	cmp	r0, #0
 800569a:	da63      	bge.n	8005764 <_dtoa_r+0x924>
 800569c:	2300      	movs	r3, #0
 800569e:	4659      	mov	r1, fp
 80056a0:	220a      	movs	r2, #10
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 fb24 	bl	8005cf0 <__multadd>
 80056a8:	9b08      	ldr	r3, [sp, #32]
 80056aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ae:	4683      	mov	fp, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 818f 	beq.w	80059d4 <_dtoa_r+0xb94>
 80056b6:	4639      	mov	r1, r7
 80056b8:	2300      	movs	r3, #0
 80056ba:	220a      	movs	r2, #10
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 fb17 	bl	8005cf0 <__multadd>
 80056c2:	f1b9 0f00 	cmp.w	r9, #0
 80056c6:	4607      	mov	r7, r0
 80056c8:	f300 808e 	bgt.w	80057e8 <_dtoa_r+0x9a8>
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	dc50      	bgt.n	8005774 <_dtoa_r+0x934>
 80056d2:	e089      	b.n	80057e8 <_dtoa_r+0x9a8>
 80056d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056da:	e75d      	b.n	8005598 <_dtoa_r+0x758>
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	1e5e      	subs	r6, r3, #1
 80056e0:	9b06      	ldr	r3, [sp, #24]
 80056e2:	42b3      	cmp	r3, r6
 80056e4:	bfbf      	itttt	lt
 80056e6:	9b06      	ldrlt	r3, [sp, #24]
 80056e8:	9606      	strlt	r6, [sp, #24]
 80056ea:	1af2      	sublt	r2, r6, r3
 80056ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80056ee:	bfb6      	itet	lt
 80056f0:	189b      	addlt	r3, r3, r2
 80056f2:	1b9e      	subge	r6, r3, r6
 80056f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	bfb8      	it	lt
 80056fa:	2600      	movlt	r6, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bfb5      	itete	lt
 8005700:	eba8 0503 	sublt.w	r5, r8, r3
 8005704:	9b01      	ldrge	r3, [sp, #4]
 8005706:	2300      	movlt	r3, #0
 8005708:	4645      	movge	r5, r8
 800570a:	e747      	b.n	800559c <_dtoa_r+0x75c>
 800570c:	9e06      	ldr	r6, [sp, #24]
 800570e:	9f08      	ldr	r7, [sp, #32]
 8005710:	4645      	mov	r5, r8
 8005712:	e74c      	b.n	80055ae <_dtoa_r+0x76e>
 8005714:	9a06      	ldr	r2, [sp, #24]
 8005716:	e775      	b.n	8005604 <_dtoa_r+0x7c4>
 8005718:	9b05      	ldr	r3, [sp, #20]
 800571a:	2b01      	cmp	r3, #1
 800571c:	dc18      	bgt.n	8005750 <_dtoa_r+0x910>
 800571e:	9b02      	ldr	r3, [sp, #8]
 8005720:	b9b3      	cbnz	r3, 8005750 <_dtoa_r+0x910>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005728:	b9a3      	cbnz	r3, 8005754 <_dtoa_r+0x914>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005730:	0d1b      	lsrs	r3, r3, #20
 8005732:	051b      	lsls	r3, r3, #20
 8005734:	b12b      	cbz	r3, 8005742 <_dtoa_r+0x902>
 8005736:	9b04      	ldr	r3, [sp, #16]
 8005738:	3301      	adds	r3, #1
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	f108 0801 	add.w	r8, r8, #1
 8005740:	2301      	movs	r3, #1
 8005742:	9306      	str	r3, [sp, #24]
 8005744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005746:	2b00      	cmp	r3, #0
 8005748:	f47f af74 	bne.w	8005634 <_dtoa_r+0x7f4>
 800574c:	2001      	movs	r0, #1
 800574e:	e779      	b.n	8005644 <_dtoa_r+0x804>
 8005750:	2300      	movs	r3, #0
 8005752:	e7f6      	b.n	8005742 <_dtoa_r+0x902>
 8005754:	9b02      	ldr	r3, [sp, #8]
 8005756:	e7f4      	b.n	8005742 <_dtoa_r+0x902>
 8005758:	d085      	beq.n	8005666 <_dtoa_r+0x826>
 800575a:	4618      	mov	r0, r3
 800575c:	301c      	adds	r0, #28
 800575e:	e77d      	b.n	800565c <_dtoa_r+0x81c>
 8005760:	40240000 	.word	0x40240000
 8005764:	9b01      	ldr	r3, [sp, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc38      	bgt.n	80057dc <_dtoa_r+0x99c>
 800576a:	9b05      	ldr	r3, [sp, #20]
 800576c:	2b02      	cmp	r3, #2
 800576e:	dd35      	ble.n	80057dc <_dtoa_r+0x99c>
 8005770:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	d10d      	bne.n	8005796 <_dtoa_r+0x956>
 800577a:	4631      	mov	r1, r6
 800577c:	464b      	mov	r3, r9
 800577e:	2205      	movs	r2, #5
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fab5 	bl	8005cf0 <__multadd>
 8005786:	4601      	mov	r1, r0
 8005788:	4606      	mov	r6, r0
 800578a:	4658      	mov	r0, fp
 800578c:	f000 fccc 	bl	8006128 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	f73f adbd 	bgt.w	8005310 <_dtoa_r+0x4d0>
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	9d00      	ldr	r5, [sp, #0]
 800579a:	ea6f 0a03 	mvn.w	sl, r3
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	4631      	mov	r1, r6
 80057a4:	4620      	mov	r0, r4
 80057a6:	f000 fa81 	bl	8005cac <_Bfree>
 80057aa:	2f00      	cmp	r7, #0
 80057ac:	f43f aeb4 	beq.w	8005518 <_dtoa_r+0x6d8>
 80057b0:	f1b8 0f00 	cmp.w	r8, #0
 80057b4:	d005      	beq.n	80057c2 <_dtoa_r+0x982>
 80057b6:	45b8      	cmp	r8, r7
 80057b8:	d003      	beq.n	80057c2 <_dtoa_r+0x982>
 80057ba:	4641      	mov	r1, r8
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 fa75 	bl	8005cac <_Bfree>
 80057c2:	4639      	mov	r1, r7
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fa71 	bl	8005cac <_Bfree>
 80057ca:	e6a5      	b.n	8005518 <_dtoa_r+0x6d8>
 80057cc:	2600      	movs	r6, #0
 80057ce:	4637      	mov	r7, r6
 80057d0:	e7e1      	b.n	8005796 <_dtoa_r+0x956>
 80057d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80057d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80057d8:	4637      	mov	r7, r6
 80057da:	e599      	b.n	8005310 <_dtoa_r+0x4d0>
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80fd 	beq.w	80059e2 <_dtoa_r+0xba2>
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	dd05      	ble.n	80057f8 <_dtoa_r+0x9b8>
 80057ec:	4639      	mov	r1, r7
 80057ee:	462a      	mov	r2, r5
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 fc2d 	bl	8006050 <__lshift>
 80057f6:	4607      	mov	r7, r0
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d05c      	beq.n	80058b8 <_dtoa_r+0xa78>
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fa13 	bl	8005c2c <_Balloc>
 8005806:	4605      	mov	r5, r0
 8005808:	b928      	cbnz	r0, 8005816 <_dtoa_r+0x9d6>
 800580a:	4b80      	ldr	r3, [pc, #512]	; (8005a0c <_dtoa_r+0xbcc>)
 800580c:	4602      	mov	r2, r0
 800580e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005812:	f7ff bb2e 	b.w	8004e72 <_dtoa_r+0x32>
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	3202      	adds	r2, #2
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	f107 010c 	add.w	r1, r7, #12
 8005820:	300c      	adds	r0, #12
 8005822:	f7fe fd2d 	bl	8004280 <memcpy>
 8005826:	2201      	movs	r2, #1
 8005828:	4629      	mov	r1, r5
 800582a:	4620      	mov	r0, r4
 800582c:	f000 fc10 	bl	8006050 <__lshift>
 8005830:	9b00      	ldr	r3, [sp, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	9b00      	ldr	r3, [sp, #0]
 8005838:	444b      	add	r3, r9
 800583a:	9307      	str	r3, [sp, #28]
 800583c:	9b02      	ldr	r3, [sp, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	46b8      	mov	r8, r7
 8005844:	9306      	str	r3, [sp, #24]
 8005846:	4607      	mov	r7, r0
 8005848:	9b01      	ldr	r3, [sp, #4]
 800584a:	4631      	mov	r1, r6
 800584c:	3b01      	subs	r3, #1
 800584e:	4658      	mov	r0, fp
 8005850:	9302      	str	r3, [sp, #8]
 8005852:	f7ff fa67 	bl	8004d24 <quorem>
 8005856:	4603      	mov	r3, r0
 8005858:	3330      	adds	r3, #48	; 0x30
 800585a:	9004      	str	r0, [sp, #16]
 800585c:	4641      	mov	r1, r8
 800585e:	4658      	mov	r0, fp
 8005860:	9308      	str	r3, [sp, #32]
 8005862:	f000 fc61 	bl	8006128 <__mcmp>
 8005866:	463a      	mov	r2, r7
 8005868:	4681      	mov	r9, r0
 800586a:	4631      	mov	r1, r6
 800586c:	4620      	mov	r0, r4
 800586e:	f000 fc77 	bl	8006160 <__mdiff>
 8005872:	68c2      	ldr	r2, [r0, #12]
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	4605      	mov	r5, r0
 8005878:	bb02      	cbnz	r2, 80058bc <_dtoa_r+0xa7c>
 800587a:	4601      	mov	r1, r0
 800587c:	4658      	mov	r0, fp
 800587e:	f000 fc53 	bl	8006128 <__mcmp>
 8005882:	9b08      	ldr	r3, [sp, #32]
 8005884:	4602      	mov	r2, r0
 8005886:	4629      	mov	r1, r5
 8005888:	4620      	mov	r0, r4
 800588a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800588e:	f000 fa0d 	bl	8005cac <_Bfree>
 8005892:	9b05      	ldr	r3, [sp, #20]
 8005894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005896:	9d01      	ldr	r5, [sp, #4]
 8005898:	ea43 0102 	orr.w	r1, r3, r2
 800589c:	9b06      	ldr	r3, [sp, #24]
 800589e:	430b      	orrs	r3, r1
 80058a0:	9b08      	ldr	r3, [sp, #32]
 80058a2:	d10d      	bne.n	80058c0 <_dtoa_r+0xa80>
 80058a4:	2b39      	cmp	r3, #57	; 0x39
 80058a6:	d029      	beq.n	80058fc <_dtoa_r+0xabc>
 80058a8:	f1b9 0f00 	cmp.w	r9, #0
 80058ac:	dd01      	ble.n	80058b2 <_dtoa_r+0xa72>
 80058ae:	9b04      	ldr	r3, [sp, #16]
 80058b0:	3331      	adds	r3, #49	; 0x31
 80058b2:	9a02      	ldr	r2, [sp, #8]
 80058b4:	7013      	strb	r3, [r2, #0]
 80058b6:	e774      	b.n	80057a2 <_dtoa_r+0x962>
 80058b8:	4638      	mov	r0, r7
 80058ba:	e7b9      	b.n	8005830 <_dtoa_r+0x9f0>
 80058bc:	2201      	movs	r2, #1
 80058be:	e7e2      	b.n	8005886 <_dtoa_r+0xa46>
 80058c0:	f1b9 0f00 	cmp.w	r9, #0
 80058c4:	db06      	blt.n	80058d4 <_dtoa_r+0xa94>
 80058c6:	9905      	ldr	r1, [sp, #20]
 80058c8:	ea41 0909 	orr.w	r9, r1, r9
 80058cc:	9906      	ldr	r1, [sp, #24]
 80058ce:	ea59 0101 	orrs.w	r1, r9, r1
 80058d2:	d120      	bne.n	8005916 <_dtoa_r+0xad6>
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	ddec      	ble.n	80058b2 <_dtoa_r+0xa72>
 80058d8:	4659      	mov	r1, fp
 80058da:	2201      	movs	r2, #1
 80058dc:	4620      	mov	r0, r4
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	f000 fbb6 	bl	8006050 <__lshift>
 80058e4:	4631      	mov	r1, r6
 80058e6:	4683      	mov	fp, r0
 80058e8:	f000 fc1e 	bl	8006128 <__mcmp>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	dc02      	bgt.n	80058f8 <_dtoa_r+0xab8>
 80058f2:	d1de      	bne.n	80058b2 <_dtoa_r+0xa72>
 80058f4:	07da      	lsls	r2, r3, #31
 80058f6:	d5dc      	bpl.n	80058b2 <_dtoa_r+0xa72>
 80058f8:	2b39      	cmp	r3, #57	; 0x39
 80058fa:	d1d8      	bne.n	80058ae <_dtoa_r+0xa6e>
 80058fc:	9a02      	ldr	r2, [sp, #8]
 80058fe:	2339      	movs	r3, #57	; 0x39
 8005900:	7013      	strb	r3, [r2, #0]
 8005902:	462b      	mov	r3, r5
 8005904:	461d      	mov	r5, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800590c:	2a39      	cmp	r2, #57	; 0x39
 800590e:	d050      	beq.n	80059b2 <_dtoa_r+0xb72>
 8005910:	3201      	adds	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e745      	b.n	80057a2 <_dtoa_r+0x962>
 8005916:	2a00      	cmp	r2, #0
 8005918:	dd03      	ble.n	8005922 <_dtoa_r+0xae2>
 800591a:	2b39      	cmp	r3, #57	; 0x39
 800591c:	d0ee      	beq.n	80058fc <_dtoa_r+0xabc>
 800591e:	3301      	adds	r3, #1
 8005920:	e7c7      	b.n	80058b2 <_dtoa_r+0xa72>
 8005922:	9a01      	ldr	r2, [sp, #4]
 8005924:	9907      	ldr	r1, [sp, #28]
 8005926:	f802 3c01 	strb.w	r3, [r2, #-1]
 800592a:	428a      	cmp	r2, r1
 800592c:	d02a      	beq.n	8005984 <_dtoa_r+0xb44>
 800592e:	4659      	mov	r1, fp
 8005930:	2300      	movs	r3, #0
 8005932:	220a      	movs	r2, #10
 8005934:	4620      	mov	r0, r4
 8005936:	f000 f9db 	bl	8005cf0 <__multadd>
 800593a:	45b8      	cmp	r8, r7
 800593c:	4683      	mov	fp, r0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	f04f 020a 	mov.w	r2, #10
 8005946:	4641      	mov	r1, r8
 8005948:	4620      	mov	r0, r4
 800594a:	d107      	bne.n	800595c <_dtoa_r+0xb1c>
 800594c:	f000 f9d0 	bl	8005cf0 <__multadd>
 8005950:	4680      	mov	r8, r0
 8005952:	4607      	mov	r7, r0
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	3301      	adds	r3, #1
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	e775      	b.n	8005848 <_dtoa_r+0xa08>
 800595c:	f000 f9c8 	bl	8005cf0 <__multadd>
 8005960:	4639      	mov	r1, r7
 8005962:	4680      	mov	r8, r0
 8005964:	2300      	movs	r3, #0
 8005966:	220a      	movs	r2, #10
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f9c1 	bl	8005cf0 <__multadd>
 800596e:	4607      	mov	r7, r0
 8005970:	e7f0      	b.n	8005954 <_dtoa_r+0xb14>
 8005972:	f1b9 0f00 	cmp.w	r9, #0
 8005976:	9a00      	ldr	r2, [sp, #0]
 8005978:	bfcc      	ite	gt
 800597a:	464d      	movgt	r5, r9
 800597c:	2501      	movle	r5, #1
 800597e:	4415      	add	r5, r2
 8005980:	f04f 0800 	mov.w	r8, #0
 8005984:	4659      	mov	r1, fp
 8005986:	2201      	movs	r2, #1
 8005988:	4620      	mov	r0, r4
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	f000 fb60 	bl	8006050 <__lshift>
 8005990:	4631      	mov	r1, r6
 8005992:	4683      	mov	fp, r0
 8005994:	f000 fbc8 	bl	8006128 <__mcmp>
 8005998:	2800      	cmp	r0, #0
 800599a:	dcb2      	bgt.n	8005902 <_dtoa_r+0xac2>
 800599c:	d102      	bne.n	80059a4 <_dtoa_r+0xb64>
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	07db      	lsls	r3, r3, #31
 80059a2:	d4ae      	bmi.n	8005902 <_dtoa_r+0xac2>
 80059a4:	462b      	mov	r3, r5
 80059a6:	461d      	mov	r5, r3
 80059a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ac:	2a30      	cmp	r2, #48	; 0x30
 80059ae:	d0fa      	beq.n	80059a6 <_dtoa_r+0xb66>
 80059b0:	e6f7      	b.n	80057a2 <_dtoa_r+0x962>
 80059b2:	9a00      	ldr	r2, [sp, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1a5      	bne.n	8005904 <_dtoa_r+0xac4>
 80059b8:	f10a 0a01 	add.w	sl, sl, #1
 80059bc:	2331      	movs	r3, #49	; 0x31
 80059be:	e779      	b.n	80058b4 <_dtoa_r+0xa74>
 80059c0:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <_dtoa_r+0xbd0>)
 80059c2:	f7ff baaf 	b.w	8004f24 <_dtoa_r+0xe4>
 80059c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f aa86 	bne.w	8004eda <_dtoa_r+0x9a>
 80059ce:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <_dtoa_r+0xbd4>)
 80059d0:	f7ff baa8 	b.w	8004f24 <_dtoa_r+0xe4>
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	dc03      	bgt.n	80059e2 <_dtoa_r+0xba2>
 80059da:	9b05      	ldr	r3, [sp, #20]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	f73f aec9 	bgt.w	8005774 <_dtoa_r+0x934>
 80059e2:	9d00      	ldr	r5, [sp, #0]
 80059e4:	4631      	mov	r1, r6
 80059e6:	4658      	mov	r0, fp
 80059e8:	f7ff f99c 	bl	8004d24 <quorem>
 80059ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80059f0:	f805 3b01 	strb.w	r3, [r5], #1
 80059f4:	9a00      	ldr	r2, [sp, #0]
 80059f6:	1aaa      	subs	r2, r5, r2
 80059f8:	4591      	cmp	r9, r2
 80059fa:	ddba      	ble.n	8005972 <_dtoa_r+0xb32>
 80059fc:	4659      	mov	r1, fp
 80059fe:	2300      	movs	r3, #0
 8005a00:	220a      	movs	r2, #10
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 f974 	bl	8005cf0 <__multadd>
 8005a08:	4683      	mov	fp, r0
 8005a0a:	e7eb      	b.n	80059e4 <_dtoa_r+0xba4>
 8005a0c:	08006dbf 	.word	0x08006dbf
 8005a10:	08006d18 	.word	0x08006d18
 8005a14:	08006d3c 	.word	0x08006d3c

08005a18 <std>:
 8005a18:	2300      	movs	r3, #0
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a26:	6083      	str	r3, [r0, #8]
 8005a28:	8181      	strh	r1, [r0, #12]
 8005a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a2c:	81c2      	strh	r2, [r0, #14]
 8005a2e:	6183      	str	r3, [r0, #24]
 8005a30:	4619      	mov	r1, r3
 8005a32:	2208      	movs	r2, #8
 8005a34:	305c      	adds	r0, #92	; 0x5c
 8005a36:	f7fe fc31 	bl	800429c <memset>
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <std+0x38>)
 8005a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <std+0x3c>)
 8005a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <std+0x40>)
 8005a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <std+0x44>)
 8005a48:	6224      	str	r4, [r4, #32]
 8005a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a4c:	bd10      	pop	{r4, pc}
 8005a4e:	bf00      	nop
 8005a50:	080065f9 	.word	0x080065f9
 8005a54:	0800661b 	.word	0x0800661b
 8005a58:	08006653 	.word	0x08006653
 8005a5c:	08006677 	.word	0x08006677

08005a60 <_cleanup_r>:
 8005a60:	4901      	ldr	r1, [pc, #4]	; (8005a68 <_cleanup_r+0x8>)
 8005a62:	f000 b8af 	b.w	8005bc4 <_fwalk_reent>
 8005a66:	bf00      	nop
 8005a68:	0800698d 	.word	0x0800698d

08005a6c <__sfmoreglue>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	1e4a      	subs	r2, r1, #1
 8005a70:	2568      	movs	r5, #104	; 0x68
 8005a72:	4355      	muls	r5, r2
 8005a74:	460e      	mov	r6, r1
 8005a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a7a:	f7fe fc67 	bl	800434c <_malloc_r>
 8005a7e:	4604      	mov	r4, r0
 8005a80:	b140      	cbz	r0, 8005a94 <__sfmoreglue+0x28>
 8005a82:	2100      	movs	r1, #0
 8005a84:	e9c0 1600 	strd	r1, r6, [r0]
 8005a88:	300c      	adds	r0, #12
 8005a8a:	60a0      	str	r0, [r4, #8]
 8005a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a90:	f7fe fc04 	bl	800429c <memset>
 8005a94:	4620      	mov	r0, r4
 8005a96:	bd70      	pop	{r4, r5, r6, pc}

08005a98 <__sfp_lock_acquire>:
 8005a98:	4801      	ldr	r0, [pc, #4]	; (8005aa0 <__sfp_lock_acquire+0x8>)
 8005a9a:	f000 b8b8 	b.w	8005c0e <__retarget_lock_acquire_recursive>
 8005a9e:	bf00      	nop
 8005aa0:	200002f0 	.word	0x200002f0

08005aa4 <__sfp_lock_release>:
 8005aa4:	4801      	ldr	r0, [pc, #4]	; (8005aac <__sfp_lock_release+0x8>)
 8005aa6:	f000 b8b3 	b.w	8005c10 <__retarget_lock_release_recursive>
 8005aaa:	bf00      	nop
 8005aac:	200002f0 	.word	0x200002f0

08005ab0 <__sinit_lock_acquire>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__sinit_lock_acquire+0x8>)
 8005ab2:	f000 b8ac 	b.w	8005c0e <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	200002eb 	.word	0x200002eb

08005abc <__sinit_lock_release>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__sinit_lock_release+0x8>)
 8005abe:	f000 b8a7 	b.w	8005c10 <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	200002eb 	.word	0x200002eb

08005ac8 <__sinit>:
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	4604      	mov	r4, r0
 8005acc:	f7ff fff0 	bl	8005ab0 <__sinit_lock_acquire>
 8005ad0:	69a3      	ldr	r3, [r4, #24]
 8005ad2:	b11b      	cbz	r3, 8005adc <__sinit+0x14>
 8005ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad8:	f7ff bff0 	b.w	8005abc <__sinit_lock_release>
 8005adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <__sinit+0x68>)
 8005ae4:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <__sinit+0x6c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	bf04      	itt	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	61a3      	streq	r3, [r4, #24]
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 f820 	bl	8005b38 <__sfp>
 8005af8:	6060      	str	r0, [r4, #4]
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 f81c 	bl	8005b38 <__sfp>
 8005b00:	60a0      	str	r0, [r4, #8]
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f818 	bl	8005b38 <__sfp>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	60e0      	str	r0, [r4, #12]
 8005b0c:	2104      	movs	r1, #4
 8005b0e:	6860      	ldr	r0, [r4, #4]
 8005b10:	f7ff ff82 	bl	8005a18 <std>
 8005b14:	68a0      	ldr	r0, [r4, #8]
 8005b16:	2201      	movs	r2, #1
 8005b18:	2109      	movs	r1, #9
 8005b1a:	f7ff ff7d 	bl	8005a18 <std>
 8005b1e:	68e0      	ldr	r0, [r4, #12]
 8005b20:	2202      	movs	r2, #2
 8005b22:	2112      	movs	r1, #18
 8005b24:	f7ff ff78 	bl	8005a18 <std>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	61a3      	str	r3, [r4, #24]
 8005b2c:	e7d2      	b.n	8005ad4 <__sinit+0xc>
 8005b2e:	bf00      	nop
 8005b30:	08006d04 	.word	0x08006d04
 8005b34:	08005a61 	.word	0x08005a61

08005b38 <__sfp>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	f7ff ffac 	bl	8005a98 <__sfp_lock_acquire>
 8005b40:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <__sfp+0x84>)
 8005b42:	681e      	ldr	r6, [r3, #0]
 8005b44:	69b3      	ldr	r3, [r6, #24]
 8005b46:	b913      	cbnz	r3, 8005b4e <__sfp+0x16>
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff ffbd 	bl	8005ac8 <__sinit>
 8005b4e:	3648      	adds	r6, #72	; 0x48
 8005b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	d503      	bpl.n	8005b60 <__sfp+0x28>
 8005b58:	6833      	ldr	r3, [r6, #0]
 8005b5a:	b30b      	cbz	r3, 8005ba0 <__sfp+0x68>
 8005b5c:	6836      	ldr	r6, [r6, #0]
 8005b5e:	e7f7      	b.n	8005b50 <__sfp+0x18>
 8005b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b64:	b9d5      	cbnz	r5, 8005b9c <__sfp+0x64>
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <__sfp+0x88>)
 8005b68:	60e3      	str	r3, [r4, #12]
 8005b6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b70:	f000 f84c 	bl	8005c0c <__retarget_lock_init_recursive>
 8005b74:	f7ff ff96 	bl	8005aa4 <__sfp_lock_release>
 8005b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b80:	6025      	str	r5, [r4, #0]
 8005b82:	61a5      	str	r5, [r4, #24]
 8005b84:	2208      	movs	r2, #8
 8005b86:	4629      	mov	r1, r5
 8005b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b8c:	f7fe fb86 	bl	800429c <memset>
 8005b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b98:	4620      	mov	r0, r4
 8005b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b9c:	3468      	adds	r4, #104	; 0x68
 8005b9e:	e7d9      	b.n	8005b54 <__sfp+0x1c>
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	f7ff ff62 	bl	8005a6c <__sfmoreglue>
 8005ba8:	4604      	mov	r4, r0
 8005baa:	6030      	str	r0, [r6, #0]
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d1d5      	bne.n	8005b5c <__sfp+0x24>
 8005bb0:	f7ff ff78 	bl	8005aa4 <__sfp_lock_release>
 8005bb4:	230c      	movs	r3, #12
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	e7ee      	b.n	8005b98 <__sfp+0x60>
 8005bba:	bf00      	nop
 8005bbc:	08006d04 	.word	0x08006d04
 8005bc0:	ffff0001 	.word	0xffff0001

08005bc4 <_fwalk_reent>:
 8005bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc8:	4606      	mov	r6, r0
 8005bca:	4688      	mov	r8, r1
 8005bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bd0:	2700      	movs	r7, #0
 8005bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8005bda:	d505      	bpl.n	8005be8 <_fwalk_reent+0x24>
 8005bdc:	6824      	ldr	r4, [r4, #0]
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	d1f7      	bne.n	8005bd2 <_fwalk_reent+0xe>
 8005be2:	4638      	mov	r0, r7
 8005be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be8:	89ab      	ldrh	r3, [r5, #12]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d907      	bls.n	8005bfe <_fwalk_reent+0x3a>
 8005bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	d003      	beq.n	8005bfe <_fwalk_reent+0x3a>
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	47c0      	blx	r8
 8005bfc:	4307      	orrs	r7, r0
 8005bfe:	3568      	adds	r5, #104	; 0x68
 8005c00:	e7e9      	b.n	8005bd6 <_fwalk_reent+0x12>
	...

08005c04 <_localeconv_r>:
 8005c04:	4800      	ldr	r0, [pc, #0]	; (8005c08 <_localeconv_r+0x4>)
 8005c06:	4770      	bx	lr
 8005c08:	20000160 	.word	0x20000160

08005c0c <__retarget_lock_init_recursive>:
 8005c0c:	4770      	bx	lr

08005c0e <__retarget_lock_acquire_recursive>:
 8005c0e:	4770      	bx	lr

08005c10 <__retarget_lock_release_recursive>:
 8005c10:	4770      	bx	lr
	...

08005c14 <__malloc_lock>:
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <__malloc_lock+0x8>)
 8005c16:	f7ff bffa 	b.w	8005c0e <__retarget_lock_acquire_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	200002ec 	.word	0x200002ec

08005c20 <__malloc_unlock>:
 8005c20:	4801      	ldr	r0, [pc, #4]	; (8005c28 <__malloc_unlock+0x8>)
 8005c22:	f7ff bff5 	b.w	8005c10 <__retarget_lock_release_recursive>
 8005c26:	bf00      	nop
 8005c28:	200002ec 	.word	0x200002ec

08005c2c <_Balloc>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c30:	4604      	mov	r4, r0
 8005c32:	460d      	mov	r5, r1
 8005c34:	b976      	cbnz	r6, 8005c54 <_Balloc+0x28>
 8005c36:	2010      	movs	r0, #16
 8005c38:	f7fe fb1a 	bl	8004270 <malloc>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c40:	b920      	cbnz	r0, 8005c4c <_Balloc+0x20>
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <_Balloc+0x78>)
 8005c44:	4818      	ldr	r0, [pc, #96]	; (8005ca8 <_Balloc+0x7c>)
 8005c46:	2166      	movs	r1, #102	; 0x66
 8005c48:	f000 fdec 	bl	8006824 <__assert_func>
 8005c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c50:	6006      	str	r6, [r0, #0]
 8005c52:	60c6      	str	r6, [r0, #12]
 8005c54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c56:	68f3      	ldr	r3, [r6, #12]
 8005c58:	b183      	cbz	r3, 8005c7c <_Balloc+0x50>
 8005c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c62:	b9b8      	cbnz	r0, 8005c94 <_Balloc+0x68>
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f605 	lsl.w	r6, r1, r5
 8005c6a:	1d72      	adds	r2, r6, #5
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fb5a 	bl	8006328 <_calloc_r>
 8005c74:	b160      	cbz	r0, 8005c90 <_Balloc+0x64>
 8005c76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c7a:	e00e      	b.n	8005c9a <_Balloc+0x6e>
 8005c7c:	2221      	movs	r2, #33	; 0x21
 8005c7e:	2104      	movs	r1, #4
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fb51 	bl	8006328 <_calloc_r>
 8005c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c88:	60f0      	str	r0, [r6, #12]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e4      	bne.n	8005c5a <_Balloc+0x2e>
 8005c90:	2000      	movs	r0, #0
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	6802      	ldr	r2, [r0, #0]
 8005c96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ca0:	e7f7      	b.n	8005c92 <_Balloc+0x66>
 8005ca2:	bf00      	nop
 8005ca4:	08006d49 	.word	0x08006d49
 8005ca8:	08006e30 	.word	0x08006e30

08005cac <_Bfree>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	b976      	cbnz	r6, 8005cd4 <_Bfree+0x28>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f7fe fada 	bl	8004270 <malloc>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6268      	str	r0, [r5, #36]	; 0x24
 8005cc0:	b920      	cbnz	r0, 8005ccc <_Bfree+0x20>
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <_Bfree+0x3c>)
 8005cc4:	4809      	ldr	r0, [pc, #36]	; (8005cec <_Bfree+0x40>)
 8005cc6:	218a      	movs	r1, #138	; 0x8a
 8005cc8:	f000 fdac 	bl	8006824 <__assert_func>
 8005ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd0:	6006      	str	r6, [r0, #0]
 8005cd2:	60c6      	str	r6, [r0, #12]
 8005cd4:	b13c      	cbz	r4, 8005ce6 <_Bfree+0x3a>
 8005cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cd8:	6862      	ldr	r2, [r4, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ce0:	6021      	str	r1, [r4, #0]
 8005ce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	08006d49 	.word	0x08006d49
 8005cec:	08006e30 	.word	0x08006e30

08005cf0 <__multadd>:
 8005cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	690e      	ldr	r6, [r1, #16]
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	f101 0014 	add.w	r0, r1, #20
 8005d00:	2300      	movs	r3, #0
 8005d02:	6805      	ldr	r5, [r0, #0]
 8005d04:	b2a9      	uxth	r1, r5
 8005d06:	fb02 8101 	mla	r1, r2, r1, r8
 8005d0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005d0e:	0c2d      	lsrs	r5, r5, #16
 8005d10:	fb02 c505 	mla	r5, r2, r5, ip
 8005d14:	b289      	uxth	r1, r1
 8005d16:	3301      	adds	r3, #1
 8005d18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005d1c:	429e      	cmp	r6, r3
 8005d1e:	f840 1b04 	str.w	r1, [r0], #4
 8005d22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005d26:	dcec      	bgt.n	8005d02 <__multadd+0x12>
 8005d28:	f1b8 0f00 	cmp.w	r8, #0
 8005d2c:	d022      	beq.n	8005d74 <__multadd+0x84>
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	42b3      	cmp	r3, r6
 8005d32:	dc19      	bgt.n	8005d68 <__multadd+0x78>
 8005d34:	6861      	ldr	r1, [r4, #4]
 8005d36:	4638      	mov	r0, r7
 8005d38:	3101      	adds	r1, #1
 8005d3a:	f7ff ff77 	bl	8005c2c <_Balloc>
 8005d3e:	4605      	mov	r5, r0
 8005d40:	b928      	cbnz	r0, 8005d4e <__multadd+0x5e>
 8005d42:	4602      	mov	r2, r0
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <__multadd+0x8c>)
 8005d46:	480e      	ldr	r0, [pc, #56]	; (8005d80 <__multadd+0x90>)
 8005d48:	21b5      	movs	r1, #181	; 0xb5
 8005d4a:	f000 fd6b 	bl	8006824 <__assert_func>
 8005d4e:	6922      	ldr	r2, [r4, #16]
 8005d50:	3202      	adds	r2, #2
 8005d52:	f104 010c 	add.w	r1, r4, #12
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	300c      	adds	r0, #12
 8005d5a:	f7fe fa91 	bl	8004280 <memcpy>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4638      	mov	r0, r7
 8005d62:	f7ff ffa3 	bl	8005cac <_Bfree>
 8005d66:	462c      	mov	r4, r5
 8005d68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d6c:	3601      	adds	r6, #1
 8005d6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d72:	6126      	str	r6, [r4, #16]
 8005d74:	4620      	mov	r0, r4
 8005d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08006dbf 	.word	0x08006dbf
 8005d80:	08006e30 	.word	0x08006e30

08005d84 <__hi0bits>:
 8005d84:	0c03      	lsrs	r3, r0, #16
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	b9d3      	cbnz	r3, 8005dc0 <__hi0bits+0x3c>
 8005d8a:	0400      	lsls	r0, r0, #16
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d92:	bf04      	itt	eq
 8005d94:	0200      	lsleq	r0, r0, #8
 8005d96:	3308      	addeq	r3, #8
 8005d98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d9c:	bf04      	itt	eq
 8005d9e:	0100      	lsleq	r0, r0, #4
 8005da0:	3304      	addeq	r3, #4
 8005da2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005da6:	bf04      	itt	eq
 8005da8:	0080      	lsleq	r0, r0, #2
 8005daa:	3302      	addeq	r3, #2
 8005dac:	2800      	cmp	r0, #0
 8005dae:	db05      	blt.n	8005dbc <__hi0bits+0x38>
 8005db0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005db4:	f103 0301 	add.w	r3, r3, #1
 8005db8:	bf08      	it	eq
 8005dba:	2320      	moveq	r3, #32
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	4770      	bx	lr
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e7e4      	b.n	8005d8e <__hi0bits+0xa>

08005dc4 <__lo0bits>:
 8005dc4:	6803      	ldr	r3, [r0, #0]
 8005dc6:	f013 0207 	ands.w	r2, r3, #7
 8005dca:	4601      	mov	r1, r0
 8005dcc:	d00b      	beq.n	8005de6 <__lo0bits+0x22>
 8005dce:	07da      	lsls	r2, r3, #31
 8005dd0:	d424      	bmi.n	8005e1c <__lo0bits+0x58>
 8005dd2:	0798      	lsls	r0, r3, #30
 8005dd4:	bf49      	itett	mi
 8005dd6:	085b      	lsrmi	r3, r3, #1
 8005dd8:	089b      	lsrpl	r3, r3, #2
 8005dda:	2001      	movmi	r0, #1
 8005ddc:	600b      	strmi	r3, [r1, #0]
 8005dde:	bf5c      	itt	pl
 8005de0:	600b      	strpl	r3, [r1, #0]
 8005de2:	2002      	movpl	r0, #2
 8005de4:	4770      	bx	lr
 8005de6:	b298      	uxth	r0, r3
 8005de8:	b9b0      	cbnz	r0, 8005e18 <__lo0bits+0x54>
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	2010      	movs	r0, #16
 8005dee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005df2:	bf04      	itt	eq
 8005df4:	0a1b      	lsreq	r3, r3, #8
 8005df6:	3008      	addeq	r0, #8
 8005df8:	071a      	lsls	r2, r3, #28
 8005dfa:	bf04      	itt	eq
 8005dfc:	091b      	lsreq	r3, r3, #4
 8005dfe:	3004      	addeq	r0, #4
 8005e00:	079a      	lsls	r2, r3, #30
 8005e02:	bf04      	itt	eq
 8005e04:	089b      	lsreq	r3, r3, #2
 8005e06:	3002      	addeq	r0, #2
 8005e08:	07da      	lsls	r2, r3, #31
 8005e0a:	d403      	bmi.n	8005e14 <__lo0bits+0x50>
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	f100 0001 	add.w	r0, r0, #1
 8005e12:	d005      	beq.n	8005e20 <__lo0bits+0x5c>
 8005e14:	600b      	str	r3, [r1, #0]
 8005e16:	4770      	bx	lr
 8005e18:	4610      	mov	r0, r2
 8005e1a:	e7e8      	b.n	8005dee <__lo0bits+0x2a>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr
 8005e20:	2020      	movs	r0, #32
 8005e22:	4770      	bx	lr

08005e24 <__i2b>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	460c      	mov	r4, r1
 8005e28:	2101      	movs	r1, #1
 8005e2a:	f7ff feff 	bl	8005c2c <_Balloc>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	b928      	cbnz	r0, 8005e3e <__i2b+0x1a>
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <__i2b+0x24>)
 8005e34:	4805      	ldr	r0, [pc, #20]	; (8005e4c <__i2b+0x28>)
 8005e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e3a:	f000 fcf3 	bl	8006824 <__assert_func>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	6144      	str	r4, [r0, #20]
 8005e42:	6103      	str	r3, [r0, #16]
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	bf00      	nop
 8005e48:	08006dbf 	.word	0x08006dbf
 8005e4c:	08006e30 	.word	0x08006e30

08005e50 <__multiply>:
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	4614      	mov	r4, r2
 8005e56:	690a      	ldr	r2, [r1, #16]
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	bfb8      	it	lt
 8005e5e:	460b      	movlt	r3, r1
 8005e60:	460d      	mov	r5, r1
 8005e62:	bfbc      	itt	lt
 8005e64:	4625      	movlt	r5, r4
 8005e66:	461c      	movlt	r4, r3
 8005e68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e70:	68ab      	ldr	r3, [r5, #8]
 8005e72:	6869      	ldr	r1, [r5, #4]
 8005e74:	eb0a 0709 	add.w	r7, sl, r9
 8005e78:	42bb      	cmp	r3, r7
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	bfb8      	it	lt
 8005e7e:	3101      	addlt	r1, #1
 8005e80:	f7ff fed4 	bl	8005c2c <_Balloc>
 8005e84:	b930      	cbnz	r0, 8005e94 <__multiply+0x44>
 8005e86:	4602      	mov	r2, r0
 8005e88:	4b42      	ldr	r3, [pc, #264]	; (8005f94 <__multiply+0x144>)
 8005e8a:	4843      	ldr	r0, [pc, #268]	; (8005f98 <__multiply+0x148>)
 8005e8c:	f240 115d 	movw	r1, #349	; 0x15d
 8005e90:	f000 fcc8 	bl	8006824 <__assert_func>
 8005e94:	f100 0614 	add.w	r6, r0, #20
 8005e98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005e9c:	4633      	mov	r3, r6
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4543      	cmp	r3, r8
 8005ea2:	d31e      	bcc.n	8005ee2 <__multiply+0x92>
 8005ea4:	f105 0c14 	add.w	ip, r5, #20
 8005ea8:	f104 0314 	add.w	r3, r4, #20
 8005eac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005eb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005eb4:	9202      	str	r2, [sp, #8]
 8005eb6:	ebac 0205 	sub.w	r2, ip, r5
 8005eba:	3a15      	subs	r2, #21
 8005ebc:	f022 0203 	bic.w	r2, r2, #3
 8005ec0:	3204      	adds	r2, #4
 8005ec2:	f105 0115 	add.w	r1, r5, #21
 8005ec6:	458c      	cmp	ip, r1
 8005ec8:	bf38      	it	cc
 8005eca:	2204      	movcc	r2, #4
 8005ecc:	9201      	str	r2, [sp, #4]
 8005ece:	9a02      	ldr	r2, [sp, #8]
 8005ed0:	9303      	str	r3, [sp, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d808      	bhi.n	8005ee8 <__multiply+0x98>
 8005ed6:	2f00      	cmp	r7, #0
 8005ed8:	dc55      	bgt.n	8005f86 <__multiply+0x136>
 8005eda:	6107      	str	r7, [r0, #16]
 8005edc:	b005      	add	sp, #20
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	f843 2b04 	str.w	r2, [r3], #4
 8005ee6:	e7db      	b.n	8005ea0 <__multiply+0x50>
 8005ee8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005eec:	f1ba 0f00 	cmp.w	sl, #0
 8005ef0:	d020      	beq.n	8005f34 <__multiply+0xe4>
 8005ef2:	f105 0e14 	add.w	lr, r5, #20
 8005ef6:	46b1      	mov	r9, r6
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005efe:	f8d9 b000 	ldr.w	fp, [r9]
 8005f02:	b2a1      	uxth	r1, r4
 8005f04:	fa1f fb8b 	uxth.w	fp, fp
 8005f08:	fb0a b101 	mla	r1, sl, r1, fp
 8005f0c:	4411      	add	r1, r2
 8005f0e:	f8d9 2000 	ldr.w	r2, [r9]
 8005f12:	0c24      	lsrs	r4, r4, #16
 8005f14:	0c12      	lsrs	r2, r2, #16
 8005f16:	fb0a 2404 	mla	r4, sl, r4, r2
 8005f1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005f1e:	b289      	uxth	r1, r1
 8005f20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f24:	45f4      	cmp	ip, lr
 8005f26:	f849 1b04 	str.w	r1, [r9], #4
 8005f2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005f2e:	d8e4      	bhi.n	8005efa <__multiply+0xaa>
 8005f30:	9901      	ldr	r1, [sp, #4]
 8005f32:	5072      	str	r2, [r6, r1]
 8005f34:	9a03      	ldr	r2, [sp, #12]
 8005f36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	f1b9 0f00 	cmp.w	r9, #0
 8005f40:	d01f      	beq.n	8005f82 <__multiply+0x132>
 8005f42:	6834      	ldr	r4, [r6, #0]
 8005f44:	f105 0114 	add.w	r1, r5, #20
 8005f48:	46b6      	mov	lr, r6
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	880a      	ldrh	r2, [r1, #0]
 8005f50:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f54:	fb09 b202 	mla	r2, r9, r2, fp
 8005f58:	4492      	add	sl, r2
 8005f5a:	b2a4      	uxth	r4, r4
 8005f5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f60:	f84e 4b04 	str.w	r4, [lr], #4
 8005f64:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f68:	f8be 2000 	ldrh.w	r2, [lr]
 8005f6c:	0c24      	lsrs	r4, r4, #16
 8005f6e:	fb09 2404 	mla	r4, r9, r4, r2
 8005f72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f76:	458c      	cmp	ip, r1
 8005f78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f7c:	d8e7      	bhi.n	8005f4e <__multiply+0xfe>
 8005f7e:	9a01      	ldr	r2, [sp, #4]
 8005f80:	50b4      	str	r4, [r6, r2]
 8005f82:	3604      	adds	r6, #4
 8005f84:	e7a3      	b.n	8005ece <__multiply+0x7e>
 8005f86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1a5      	bne.n	8005eda <__multiply+0x8a>
 8005f8e:	3f01      	subs	r7, #1
 8005f90:	e7a1      	b.n	8005ed6 <__multiply+0x86>
 8005f92:	bf00      	nop
 8005f94:	08006dbf 	.word	0x08006dbf
 8005f98:	08006e30 	.word	0x08006e30

08005f9c <__pow5mult>:
 8005f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	f012 0203 	ands.w	r2, r2, #3
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	d007      	beq.n	8005fbc <__pow5mult+0x20>
 8005fac:	4c25      	ldr	r4, [pc, #148]	; (8006044 <__pow5mult+0xa8>)
 8005fae:	3a01      	subs	r2, #1
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fb6:	f7ff fe9b 	bl	8005cf0 <__multadd>
 8005fba:	4607      	mov	r7, r0
 8005fbc:	10ad      	asrs	r5, r5, #2
 8005fbe:	d03d      	beq.n	800603c <__pow5mult+0xa0>
 8005fc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fc2:	b97c      	cbnz	r4, 8005fe4 <__pow5mult+0x48>
 8005fc4:	2010      	movs	r0, #16
 8005fc6:	f7fe f953 	bl	8004270 <malloc>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6270      	str	r0, [r6, #36]	; 0x24
 8005fce:	b928      	cbnz	r0, 8005fdc <__pow5mult+0x40>
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <__pow5mult+0xac>)
 8005fd2:	481e      	ldr	r0, [pc, #120]	; (800604c <__pow5mult+0xb0>)
 8005fd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fd8:	f000 fc24 	bl	8006824 <__assert_func>
 8005fdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fe0:	6004      	str	r4, [r0, #0]
 8005fe2:	60c4      	str	r4, [r0, #12]
 8005fe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fec:	b94c      	cbnz	r4, 8006002 <__pow5mult+0x66>
 8005fee:	f240 2171 	movw	r1, #625	; 0x271
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7ff ff16 	bl	8005e24 <__i2b>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ffe:	4604      	mov	r4, r0
 8006000:	6003      	str	r3, [r0, #0]
 8006002:	f04f 0900 	mov.w	r9, #0
 8006006:	07eb      	lsls	r3, r5, #31
 8006008:	d50a      	bpl.n	8006020 <__pow5mult+0x84>
 800600a:	4639      	mov	r1, r7
 800600c:	4622      	mov	r2, r4
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ff1e 	bl	8005e50 <__multiply>
 8006014:	4639      	mov	r1, r7
 8006016:	4680      	mov	r8, r0
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff fe47 	bl	8005cac <_Bfree>
 800601e:	4647      	mov	r7, r8
 8006020:	106d      	asrs	r5, r5, #1
 8006022:	d00b      	beq.n	800603c <__pow5mult+0xa0>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	b938      	cbnz	r0, 8006038 <__pow5mult+0x9c>
 8006028:	4622      	mov	r2, r4
 800602a:	4621      	mov	r1, r4
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ff0f 	bl	8005e50 <__multiply>
 8006032:	6020      	str	r0, [r4, #0]
 8006034:	f8c0 9000 	str.w	r9, [r0]
 8006038:	4604      	mov	r4, r0
 800603a:	e7e4      	b.n	8006006 <__pow5mult+0x6a>
 800603c:	4638      	mov	r0, r7
 800603e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006042:	bf00      	nop
 8006044:	08006f80 	.word	0x08006f80
 8006048:	08006d49 	.word	0x08006d49
 800604c:	08006e30 	.word	0x08006e30

08006050 <__lshift>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	460c      	mov	r4, r1
 8006056:	6849      	ldr	r1, [r1, #4]
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	4607      	mov	r7, r0
 8006062:	4691      	mov	r9, r2
 8006064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006068:	f108 0601 	add.w	r6, r8, #1
 800606c:	42b3      	cmp	r3, r6
 800606e:	db0b      	blt.n	8006088 <__lshift+0x38>
 8006070:	4638      	mov	r0, r7
 8006072:	f7ff fddb 	bl	8005c2c <_Balloc>
 8006076:	4605      	mov	r5, r0
 8006078:	b948      	cbnz	r0, 800608e <__lshift+0x3e>
 800607a:	4602      	mov	r2, r0
 800607c:	4b28      	ldr	r3, [pc, #160]	; (8006120 <__lshift+0xd0>)
 800607e:	4829      	ldr	r0, [pc, #164]	; (8006124 <__lshift+0xd4>)
 8006080:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006084:	f000 fbce 	bl	8006824 <__assert_func>
 8006088:	3101      	adds	r1, #1
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	e7ee      	b.n	800606c <__lshift+0x1c>
 800608e:	2300      	movs	r3, #0
 8006090:	f100 0114 	add.w	r1, r0, #20
 8006094:	f100 0210 	add.w	r2, r0, #16
 8006098:	4618      	mov	r0, r3
 800609a:	4553      	cmp	r3, sl
 800609c:	db33      	blt.n	8006106 <__lshift+0xb6>
 800609e:	6920      	ldr	r0, [r4, #16]
 80060a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060a4:	f104 0314 	add.w	r3, r4, #20
 80060a8:	f019 091f 	ands.w	r9, r9, #31
 80060ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060b4:	d02b      	beq.n	800610e <__lshift+0xbe>
 80060b6:	f1c9 0e20 	rsb	lr, r9, #32
 80060ba:	468a      	mov	sl, r1
 80060bc:	2200      	movs	r2, #0
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	fa00 f009 	lsl.w	r0, r0, r9
 80060c4:	4302      	orrs	r2, r0
 80060c6:	f84a 2b04 	str.w	r2, [sl], #4
 80060ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ce:	459c      	cmp	ip, r3
 80060d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80060d4:	d8f3      	bhi.n	80060be <__lshift+0x6e>
 80060d6:	ebac 0304 	sub.w	r3, ip, r4
 80060da:	3b15      	subs	r3, #21
 80060dc:	f023 0303 	bic.w	r3, r3, #3
 80060e0:	3304      	adds	r3, #4
 80060e2:	f104 0015 	add.w	r0, r4, #21
 80060e6:	4584      	cmp	ip, r0
 80060e8:	bf38      	it	cc
 80060ea:	2304      	movcc	r3, #4
 80060ec:	50ca      	str	r2, [r1, r3]
 80060ee:	b10a      	cbz	r2, 80060f4 <__lshift+0xa4>
 80060f0:	f108 0602 	add.w	r6, r8, #2
 80060f4:	3e01      	subs	r6, #1
 80060f6:	4638      	mov	r0, r7
 80060f8:	612e      	str	r6, [r5, #16]
 80060fa:	4621      	mov	r1, r4
 80060fc:	f7ff fdd6 	bl	8005cac <_Bfree>
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	f842 0f04 	str.w	r0, [r2, #4]!
 800610a:	3301      	adds	r3, #1
 800610c:	e7c5      	b.n	800609a <__lshift+0x4a>
 800610e:	3904      	subs	r1, #4
 8006110:	f853 2b04 	ldr.w	r2, [r3], #4
 8006114:	f841 2f04 	str.w	r2, [r1, #4]!
 8006118:	459c      	cmp	ip, r3
 800611a:	d8f9      	bhi.n	8006110 <__lshift+0xc0>
 800611c:	e7ea      	b.n	80060f4 <__lshift+0xa4>
 800611e:	bf00      	nop
 8006120:	08006dbf 	.word	0x08006dbf
 8006124:	08006e30 	.word	0x08006e30

08006128 <__mcmp>:
 8006128:	b530      	push	{r4, r5, lr}
 800612a:	6902      	ldr	r2, [r0, #16]
 800612c:	690c      	ldr	r4, [r1, #16]
 800612e:	1b12      	subs	r2, r2, r4
 8006130:	d10e      	bne.n	8006150 <__mcmp+0x28>
 8006132:	f100 0314 	add.w	r3, r0, #20
 8006136:	3114      	adds	r1, #20
 8006138:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800613c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006140:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006144:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006148:	42a5      	cmp	r5, r4
 800614a:	d003      	beq.n	8006154 <__mcmp+0x2c>
 800614c:	d305      	bcc.n	800615a <__mcmp+0x32>
 800614e:	2201      	movs	r2, #1
 8006150:	4610      	mov	r0, r2
 8006152:	bd30      	pop	{r4, r5, pc}
 8006154:	4283      	cmp	r3, r0
 8006156:	d3f3      	bcc.n	8006140 <__mcmp+0x18>
 8006158:	e7fa      	b.n	8006150 <__mcmp+0x28>
 800615a:	f04f 32ff 	mov.w	r2, #4294967295
 800615e:	e7f7      	b.n	8006150 <__mcmp+0x28>

08006160 <__mdiff>:
 8006160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	4606      	mov	r6, r0
 8006168:	4611      	mov	r1, r2
 800616a:	4620      	mov	r0, r4
 800616c:	4617      	mov	r7, r2
 800616e:	f7ff ffdb 	bl	8006128 <__mcmp>
 8006172:	1e05      	subs	r5, r0, #0
 8006174:	d110      	bne.n	8006198 <__mdiff+0x38>
 8006176:	4629      	mov	r1, r5
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff fd57 	bl	8005c2c <_Balloc>
 800617e:	b930      	cbnz	r0, 800618e <__mdiff+0x2e>
 8006180:	4b39      	ldr	r3, [pc, #228]	; (8006268 <__mdiff+0x108>)
 8006182:	4602      	mov	r2, r0
 8006184:	f240 2132 	movw	r1, #562	; 0x232
 8006188:	4838      	ldr	r0, [pc, #224]	; (800626c <__mdiff+0x10c>)
 800618a:	f000 fb4b 	bl	8006824 <__assert_func>
 800618e:	2301      	movs	r3, #1
 8006190:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	bfa4      	itt	ge
 800619a:	463b      	movge	r3, r7
 800619c:	4627      	movge	r7, r4
 800619e:	4630      	mov	r0, r6
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	bfa6      	itte	ge
 80061a4:	461c      	movge	r4, r3
 80061a6:	2500      	movge	r5, #0
 80061a8:	2501      	movlt	r5, #1
 80061aa:	f7ff fd3f 	bl	8005c2c <_Balloc>
 80061ae:	b920      	cbnz	r0, 80061ba <__mdiff+0x5a>
 80061b0:	4b2d      	ldr	r3, [pc, #180]	; (8006268 <__mdiff+0x108>)
 80061b2:	4602      	mov	r2, r0
 80061b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061b8:	e7e6      	b.n	8006188 <__mdiff+0x28>
 80061ba:	693e      	ldr	r6, [r7, #16]
 80061bc:	60c5      	str	r5, [r0, #12]
 80061be:	6925      	ldr	r5, [r4, #16]
 80061c0:	f107 0114 	add.w	r1, r7, #20
 80061c4:	f104 0914 	add.w	r9, r4, #20
 80061c8:	f100 0e14 	add.w	lr, r0, #20
 80061cc:	f107 0210 	add.w	r2, r7, #16
 80061d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80061d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80061d8:	46f2      	mov	sl, lr
 80061da:	2700      	movs	r7, #0
 80061dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80061e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061e4:	fa1f f883 	uxth.w	r8, r3
 80061e8:	fa17 f78b 	uxtah	r7, r7, fp
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	eba7 0808 	sub.w	r8, r7, r8
 80061f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061fa:	fa1f f888 	uxth.w	r8, r8
 80061fe:	141f      	asrs	r7, r3, #16
 8006200:	454d      	cmp	r5, r9
 8006202:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006206:	f84a 3b04 	str.w	r3, [sl], #4
 800620a:	d8e7      	bhi.n	80061dc <__mdiff+0x7c>
 800620c:	1b2b      	subs	r3, r5, r4
 800620e:	3b15      	subs	r3, #21
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	3304      	adds	r3, #4
 8006216:	3415      	adds	r4, #21
 8006218:	42a5      	cmp	r5, r4
 800621a:	bf38      	it	cc
 800621c:	2304      	movcc	r3, #4
 800621e:	4419      	add	r1, r3
 8006220:	4473      	add	r3, lr
 8006222:	469e      	mov	lr, r3
 8006224:	460d      	mov	r5, r1
 8006226:	4565      	cmp	r5, ip
 8006228:	d30e      	bcc.n	8006248 <__mdiff+0xe8>
 800622a:	f10c 0203 	add.w	r2, ip, #3
 800622e:	1a52      	subs	r2, r2, r1
 8006230:	f022 0203 	bic.w	r2, r2, #3
 8006234:	3903      	subs	r1, #3
 8006236:	458c      	cmp	ip, r1
 8006238:	bf38      	it	cc
 800623a:	2200      	movcc	r2, #0
 800623c:	441a      	add	r2, r3
 800623e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006242:	b17b      	cbz	r3, 8006264 <__mdiff+0x104>
 8006244:	6106      	str	r6, [r0, #16]
 8006246:	e7a5      	b.n	8006194 <__mdiff+0x34>
 8006248:	f855 8b04 	ldr.w	r8, [r5], #4
 800624c:	fa17 f488 	uxtah	r4, r7, r8
 8006250:	1422      	asrs	r2, r4, #16
 8006252:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006256:	b2a4      	uxth	r4, r4
 8006258:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800625c:	f84e 4b04 	str.w	r4, [lr], #4
 8006260:	1417      	asrs	r7, r2, #16
 8006262:	e7e0      	b.n	8006226 <__mdiff+0xc6>
 8006264:	3e01      	subs	r6, #1
 8006266:	e7ea      	b.n	800623e <__mdiff+0xde>
 8006268:	08006dbf 	.word	0x08006dbf
 800626c:	08006e30 	.word	0x08006e30

08006270 <__d2b>:
 8006270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4689      	mov	r9, r1
 8006276:	2101      	movs	r1, #1
 8006278:	ec57 6b10 	vmov	r6, r7, d0
 800627c:	4690      	mov	r8, r2
 800627e:	f7ff fcd5 	bl	8005c2c <_Balloc>
 8006282:	4604      	mov	r4, r0
 8006284:	b930      	cbnz	r0, 8006294 <__d2b+0x24>
 8006286:	4602      	mov	r2, r0
 8006288:	4b25      	ldr	r3, [pc, #148]	; (8006320 <__d2b+0xb0>)
 800628a:	4826      	ldr	r0, [pc, #152]	; (8006324 <__d2b+0xb4>)
 800628c:	f240 310a 	movw	r1, #778	; 0x30a
 8006290:	f000 fac8 	bl	8006824 <__assert_func>
 8006294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800629c:	bb35      	cbnz	r5, 80062ec <__d2b+0x7c>
 800629e:	2e00      	cmp	r6, #0
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	d028      	beq.n	80062f6 <__d2b+0x86>
 80062a4:	4668      	mov	r0, sp
 80062a6:	9600      	str	r6, [sp, #0]
 80062a8:	f7ff fd8c 	bl	8005dc4 <__lo0bits>
 80062ac:	9900      	ldr	r1, [sp, #0]
 80062ae:	b300      	cbz	r0, 80062f2 <__d2b+0x82>
 80062b0:	9a01      	ldr	r2, [sp, #4]
 80062b2:	f1c0 0320 	rsb	r3, r0, #32
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	430b      	orrs	r3, r1
 80062bc:	40c2      	lsrs	r2, r0
 80062be:	6163      	str	r3, [r4, #20]
 80062c0:	9201      	str	r2, [sp, #4]
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	61a3      	str	r3, [r4, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf14      	ite	ne
 80062ca:	2202      	movne	r2, #2
 80062cc:	2201      	moveq	r2, #1
 80062ce:	6122      	str	r2, [r4, #16]
 80062d0:	b1d5      	cbz	r5, 8006308 <__d2b+0x98>
 80062d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062d6:	4405      	add	r5, r0
 80062d8:	f8c9 5000 	str.w	r5, [r9]
 80062dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062e0:	f8c8 0000 	str.w	r0, [r8]
 80062e4:	4620      	mov	r0, r4
 80062e6:	b003      	add	sp, #12
 80062e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f0:	e7d5      	b.n	800629e <__d2b+0x2e>
 80062f2:	6161      	str	r1, [r4, #20]
 80062f4:	e7e5      	b.n	80062c2 <__d2b+0x52>
 80062f6:	a801      	add	r0, sp, #4
 80062f8:	f7ff fd64 	bl	8005dc4 <__lo0bits>
 80062fc:	9b01      	ldr	r3, [sp, #4]
 80062fe:	6163      	str	r3, [r4, #20]
 8006300:	2201      	movs	r2, #1
 8006302:	6122      	str	r2, [r4, #16]
 8006304:	3020      	adds	r0, #32
 8006306:	e7e3      	b.n	80062d0 <__d2b+0x60>
 8006308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800630c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006310:	f8c9 0000 	str.w	r0, [r9]
 8006314:	6918      	ldr	r0, [r3, #16]
 8006316:	f7ff fd35 	bl	8005d84 <__hi0bits>
 800631a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800631e:	e7df      	b.n	80062e0 <__d2b+0x70>
 8006320:	08006dbf 	.word	0x08006dbf
 8006324:	08006e30 	.word	0x08006e30

08006328 <_calloc_r>:
 8006328:	b513      	push	{r0, r1, r4, lr}
 800632a:	434a      	muls	r2, r1
 800632c:	4611      	mov	r1, r2
 800632e:	9201      	str	r2, [sp, #4]
 8006330:	f7fe f80c 	bl	800434c <_malloc_r>
 8006334:	4604      	mov	r4, r0
 8006336:	b118      	cbz	r0, 8006340 <_calloc_r+0x18>
 8006338:	9a01      	ldr	r2, [sp, #4]
 800633a:	2100      	movs	r1, #0
 800633c:	f7fd ffae 	bl	800429c <memset>
 8006340:	4620      	mov	r0, r4
 8006342:	b002      	add	sp, #8
 8006344:	bd10      	pop	{r4, pc}

08006346 <__sfputc_r>:
 8006346:	6893      	ldr	r3, [r2, #8]
 8006348:	3b01      	subs	r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	b410      	push	{r4}
 800634e:	6093      	str	r3, [r2, #8]
 8006350:	da08      	bge.n	8006364 <__sfputc_r+0x1e>
 8006352:	6994      	ldr	r4, [r2, #24]
 8006354:	42a3      	cmp	r3, r4
 8006356:	db01      	blt.n	800635c <__sfputc_r+0x16>
 8006358:	290a      	cmp	r1, #10
 800635a:	d103      	bne.n	8006364 <__sfputc_r+0x1e>
 800635c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006360:	f000 b98e 	b.w	8006680 <__swbuf_r>
 8006364:	6813      	ldr	r3, [r2, #0]
 8006366:	1c58      	adds	r0, r3, #1
 8006368:	6010      	str	r0, [r2, #0]
 800636a:	7019      	strb	r1, [r3, #0]
 800636c:	4608      	mov	r0, r1
 800636e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006372:	4770      	bx	lr

08006374 <__sfputs_r>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	4606      	mov	r6, r0
 8006378:	460f      	mov	r7, r1
 800637a:	4614      	mov	r4, r2
 800637c:	18d5      	adds	r5, r2, r3
 800637e:	42ac      	cmp	r4, r5
 8006380:	d101      	bne.n	8006386 <__sfputs_r+0x12>
 8006382:	2000      	movs	r0, #0
 8006384:	e007      	b.n	8006396 <__sfputs_r+0x22>
 8006386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638a:	463a      	mov	r2, r7
 800638c:	4630      	mov	r0, r6
 800638e:	f7ff ffda 	bl	8006346 <__sfputc_r>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d1f3      	bne.n	800637e <__sfputs_r+0xa>
 8006396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006398 <_vfiprintf_r>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	460d      	mov	r5, r1
 800639e:	b09d      	sub	sp, #116	; 0x74
 80063a0:	4614      	mov	r4, r2
 80063a2:	4698      	mov	r8, r3
 80063a4:	4606      	mov	r6, r0
 80063a6:	b118      	cbz	r0, 80063b0 <_vfiprintf_r+0x18>
 80063a8:	6983      	ldr	r3, [r0, #24]
 80063aa:	b90b      	cbnz	r3, 80063b0 <_vfiprintf_r+0x18>
 80063ac:	f7ff fb8c 	bl	8005ac8 <__sinit>
 80063b0:	4b89      	ldr	r3, [pc, #548]	; (80065d8 <_vfiprintf_r+0x240>)
 80063b2:	429d      	cmp	r5, r3
 80063b4:	d11b      	bne.n	80063ee <_vfiprintf_r+0x56>
 80063b6:	6875      	ldr	r5, [r6, #4]
 80063b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063ba:	07d9      	lsls	r1, r3, #31
 80063bc:	d405      	bmi.n	80063ca <_vfiprintf_r+0x32>
 80063be:	89ab      	ldrh	r3, [r5, #12]
 80063c0:	059a      	lsls	r2, r3, #22
 80063c2:	d402      	bmi.n	80063ca <_vfiprintf_r+0x32>
 80063c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063c6:	f7ff fc22 	bl	8005c0e <__retarget_lock_acquire_recursive>
 80063ca:	89ab      	ldrh	r3, [r5, #12]
 80063cc:	071b      	lsls	r3, r3, #28
 80063ce:	d501      	bpl.n	80063d4 <_vfiprintf_r+0x3c>
 80063d0:	692b      	ldr	r3, [r5, #16]
 80063d2:	b9eb      	cbnz	r3, 8006410 <_vfiprintf_r+0x78>
 80063d4:	4629      	mov	r1, r5
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f9b6 	bl	8006748 <__swsetup_r>
 80063dc:	b1c0      	cbz	r0, 8006410 <_vfiprintf_r+0x78>
 80063de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e0:	07dc      	lsls	r4, r3, #31
 80063e2:	d50e      	bpl.n	8006402 <_vfiprintf_r+0x6a>
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	b01d      	add	sp, #116	; 0x74
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	4b7b      	ldr	r3, [pc, #492]	; (80065dc <_vfiprintf_r+0x244>)
 80063f0:	429d      	cmp	r5, r3
 80063f2:	d101      	bne.n	80063f8 <_vfiprintf_r+0x60>
 80063f4:	68b5      	ldr	r5, [r6, #8]
 80063f6:	e7df      	b.n	80063b8 <_vfiprintf_r+0x20>
 80063f8:	4b79      	ldr	r3, [pc, #484]	; (80065e0 <_vfiprintf_r+0x248>)
 80063fa:	429d      	cmp	r5, r3
 80063fc:	bf08      	it	eq
 80063fe:	68f5      	ldreq	r5, [r6, #12]
 8006400:	e7da      	b.n	80063b8 <_vfiprintf_r+0x20>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	0598      	lsls	r0, r3, #22
 8006406:	d4ed      	bmi.n	80063e4 <_vfiprintf_r+0x4c>
 8006408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800640a:	f7ff fc01 	bl	8005c10 <__retarget_lock_release_recursive>
 800640e:	e7e9      	b.n	80063e4 <_vfiprintf_r+0x4c>
 8006410:	2300      	movs	r3, #0
 8006412:	9309      	str	r3, [sp, #36]	; 0x24
 8006414:	2320      	movs	r3, #32
 8006416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800641a:	f8cd 800c 	str.w	r8, [sp, #12]
 800641e:	2330      	movs	r3, #48	; 0x30
 8006420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065e4 <_vfiprintf_r+0x24c>
 8006424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006428:	f04f 0901 	mov.w	r9, #1
 800642c:	4623      	mov	r3, r4
 800642e:	469a      	mov	sl, r3
 8006430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006434:	b10a      	cbz	r2, 800643a <_vfiprintf_r+0xa2>
 8006436:	2a25      	cmp	r2, #37	; 0x25
 8006438:	d1f9      	bne.n	800642e <_vfiprintf_r+0x96>
 800643a:	ebba 0b04 	subs.w	fp, sl, r4
 800643e:	d00b      	beq.n	8006458 <_vfiprintf_r+0xc0>
 8006440:	465b      	mov	r3, fp
 8006442:	4622      	mov	r2, r4
 8006444:	4629      	mov	r1, r5
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ff94 	bl	8006374 <__sfputs_r>
 800644c:	3001      	adds	r0, #1
 800644e:	f000 80aa 	beq.w	80065a6 <_vfiprintf_r+0x20e>
 8006452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006454:	445a      	add	r2, fp
 8006456:	9209      	str	r2, [sp, #36]	; 0x24
 8006458:	f89a 3000 	ldrb.w	r3, [sl]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a2 	beq.w	80065a6 <_vfiprintf_r+0x20e>
 8006462:	2300      	movs	r3, #0
 8006464:	f04f 32ff 	mov.w	r2, #4294967295
 8006468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800646c:	f10a 0a01 	add.w	sl, sl, #1
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	9307      	str	r3, [sp, #28]
 8006474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006478:	931a      	str	r3, [sp, #104]	; 0x68
 800647a:	4654      	mov	r4, sl
 800647c:	2205      	movs	r2, #5
 800647e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006482:	4858      	ldr	r0, [pc, #352]	; (80065e4 <_vfiprintf_r+0x24c>)
 8006484:	f7f9 feac 	bl	80001e0 <memchr>
 8006488:	9a04      	ldr	r2, [sp, #16]
 800648a:	b9d8      	cbnz	r0, 80064c4 <_vfiprintf_r+0x12c>
 800648c:	06d1      	lsls	r1, r2, #27
 800648e:	bf44      	itt	mi
 8006490:	2320      	movmi	r3, #32
 8006492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006496:	0713      	lsls	r3, r2, #28
 8006498:	bf44      	itt	mi
 800649a:	232b      	movmi	r3, #43	; 0x2b
 800649c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064a0:	f89a 3000 	ldrb.w	r3, [sl]
 80064a4:	2b2a      	cmp	r3, #42	; 0x2a
 80064a6:	d015      	beq.n	80064d4 <_vfiprintf_r+0x13c>
 80064a8:	9a07      	ldr	r2, [sp, #28]
 80064aa:	4654      	mov	r4, sl
 80064ac:	2000      	movs	r0, #0
 80064ae:	f04f 0c0a 	mov.w	ip, #10
 80064b2:	4621      	mov	r1, r4
 80064b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b8:	3b30      	subs	r3, #48	; 0x30
 80064ba:	2b09      	cmp	r3, #9
 80064bc:	d94e      	bls.n	800655c <_vfiprintf_r+0x1c4>
 80064be:	b1b0      	cbz	r0, 80064ee <_vfiprintf_r+0x156>
 80064c0:	9207      	str	r2, [sp, #28]
 80064c2:	e014      	b.n	80064ee <_vfiprintf_r+0x156>
 80064c4:	eba0 0308 	sub.w	r3, r0, r8
 80064c8:	fa09 f303 	lsl.w	r3, r9, r3
 80064cc:	4313      	orrs	r3, r2
 80064ce:	9304      	str	r3, [sp, #16]
 80064d0:	46a2      	mov	sl, r4
 80064d2:	e7d2      	b.n	800647a <_vfiprintf_r+0xe2>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	1d19      	adds	r1, r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	9103      	str	r1, [sp, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bfbb      	ittet	lt
 80064e0:	425b      	neglt	r3, r3
 80064e2:	f042 0202 	orrlt.w	r2, r2, #2
 80064e6:	9307      	strge	r3, [sp, #28]
 80064e8:	9307      	strlt	r3, [sp, #28]
 80064ea:	bfb8      	it	lt
 80064ec:	9204      	strlt	r2, [sp, #16]
 80064ee:	7823      	ldrb	r3, [r4, #0]
 80064f0:	2b2e      	cmp	r3, #46	; 0x2e
 80064f2:	d10c      	bne.n	800650e <_vfiprintf_r+0x176>
 80064f4:	7863      	ldrb	r3, [r4, #1]
 80064f6:	2b2a      	cmp	r3, #42	; 0x2a
 80064f8:	d135      	bne.n	8006566 <_vfiprintf_r+0x1ce>
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	1d1a      	adds	r2, r3, #4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	9203      	str	r2, [sp, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	bfb8      	it	lt
 8006506:	f04f 33ff 	movlt.w	r3, #4294967295
 800650a:	3402      	adds	r4, #2
 800650c:	9305      	str	r3, [sp, #20]
 800650e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065f4 <_vfiprintf_r+0x25c>
 8006512:	7821      	ldrb	r1, [r4, #0]
 8006514:	2203      	movs	r2, #3
 8006516:	4650      	mov	r0, sl
 8006518:	f7f9 fe62 	bl	80001e0 <memchr>
 800651c:	b140      	cbz	r0, 8006530 <_vfiprintf_r+0x198>
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	eba0 000a 	sub.w	r0, r0, sl
 8006524:	fa03 f000 	lsl.w	r0, r3, r0
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	4303      	orrs	r3, r0
 800652c:	3401      	adds	r4, #1
 800652e:	9304      	str	r3, [sp, #16]
 8006530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006534:	482c      	ldr	r0, [pc, #176]	; (80065e8 <_vfiprintf_r+0x250>)
 8006536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800653a:	2206      	movs	r2, #6
 800653c:	f7f9 fe50 	bl	80001e0 <memchr>
 8006540:	2800      	cmp	r0, #0
 8006542:	d03f      	beq.n	80065c4 <_vfiprintf_r+0x22c>
 8006544:	4b29      	ldr	r3, [pc, #164]	; (80065ec <_vfiprintf_r+0x254>)
 8006546:	bb1b      	cbnz	r3, 8006590 <_vfiprintf_r+0x1f8>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	3307      	adds	r3, #7
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	3308      	adds	r3, #8
 8006552:	9303      	str	r3, [sp, #12]
 8006554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006556:	443b      	add	r3, r7
 8006558:	9309      	str	r3, [sp, #36]	; 0x24
 800655a:	e767      	b.n	800642c <_vfiprintf_r+0x94>
 800655c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006560:	460c      	mov	r4, r1
 8006562:	2001      	movs	r0, #1
 8006564:	e7a5      	b.n	80064b2 <_vfiprintf_r+0x11a>
 8006566:	2300      	movs	r3, #0
 8006568:	3401      	adds	r4, #1
 800656a:	9305      	str	r3, [sp, #20]
 800656c:	4619      	mov	r1, r3
 800656e:	f04f 0c0a 	mov.w	ip, #10
 8006572:	4620      	mov	r0, r4
 8006574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006578:	3a30      	subs	r2, #48	; 0x30
 800657a:	2a09      	cmp	r2, #9
 800657c:	d903      	bls.n	8006586 <_vfiprintf_r+0x1ee>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0c5      	beq.n	800650e <_vfiprintf_r+0x176>
 8006582:	9105      	str	r1, [sp, #20]
 8006584:	e7c3      	b.n	800650e <_vfiprintf_r+0x176>
 8006586:	fb0c 2101 	mla	r1, ip, r1, r2
 800658a:	4604      	mov	r4, r0
 800658c:	2301      	movs	r3, #1
 800658e:	e7f0      	b.n	8006572 <_vfiprintf_r+0x1da>
 8006590:	ab03      	add	r3, sp, #12
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	462a      	mov	r2, r5
 8006596:	4b16      	ldr	r3, [pc, #88]	; (80065f0 <_vfiprintf_r+0x258>)
 8006598:	a904      	add	r1, sp, #16
 800659a:	4630      	mov	r0, r6
 800659c:	f7fd ffd0 	bl	8004540 <_printf_float>
 80065a0:	4607      	mov	r7, r0
 80065a2:	1c78      	adds	r0, r7, #1
 80065a4:	d1d6      	bne.n	8006554 <_vfiprintf_r+0x1bc>
 80065a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065a8:	07d9      	lsls	r1, r3, #31
 80065aa:	d405      	bmi.n	80065b8 <_vfiprintf_r+0x220>
 80065ac:	89ab      	ldrh	r3, [r5, #12]
 80065ae:	059a      	lsls	r2, r3, #22
 80065b0:	d402      	bmi.n	80065b8 <_vfiprintf_r+0x220>
 80065b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065b4:	f7ff fb2c 	bl	8005c10 <__retarget_lock_release_recursive>
 80065b8:	89ab      	ldrh	r3, [r5, #12]
 80065ba:	065b      	lsls	r3, r3, #25
 80065bc:	f53f af12 	bmi.w	80063e4 <_vfiprintf_r+0x4c>
 80065c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065c2:	e711      	b.n	80063e8 <_vfiprintf_r+0x50>
 80065c4:	ab03      	add	r3, sp, #12
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <_vfiprintf_r+0x258>)
 80065cc:	a904      	add	r1, sp, #16
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7fe fa5a 	bl	8004a88 <_printf_i>
 80065d4:	e7e4      	b.n	80065a0 <_vfiprintf_r+0x208>
 80065d6:	bf00      	nop
 80065d8:	08006df0 	.word	0x08006df0
 80065dc:	08006e10 	.word	0x08006e10
 80065e0:	08006dd0 	.word	0x08006dd0
 80065e4:	08006f8c 	.word	0x08006f8c
 80065e8:	08006f96 	.word	0x08006f96
 80065ec:	08004541 	.word	0x08004541
 80065f0:	08006375 	.word	0x08006375
 80065f4:	08006f92 	.word	0x08006f92

080065f8 <__sread>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	460c      	mov	r4, r1
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	f000 fa9a 	bl	8006b38 <_read_r>
 8006604:	2800      	cmp	r0, #0
 8006606:	bfab      	itete	ge
 8006608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800660a:	89a3      	ldrhlt	r3, [r4, #12]
 800660c:	181b      	addge	r3, r3, r0
 800660e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006612:	bfac      	ite	ge
 8006614:	6563      	strge	r3, [r4, #84]	; 0x54
 8006616:	81a3      	strhlt	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__swrite>:
 800661a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	461f      	mov	r7, r3
 8006620:	898b      	ldrh	r3, [r1, #12]
 8006622:	05db      	lsls	r3, r3, #23
 8006624:	4605      	mov	r5, r0
 8006626:	460c      	mov	r4, r1
 8006628:	4616      	mov	r6, r2
 800662a:	d505      	bpl.n	8006638 <__swrite+0x1e>
 800662c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006630:	2302      	movs	r3, #2
 8006632:	2200      	movs	r2, #0
 8006634:	f000 f9f8 	bl	8006a28 <_lseek_r>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800663e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	4632      	mov	r2, r6
 8006646:	463b      	mov	r3, r7
 8006648:	4628      	mov	r0, r5
 800664a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	f000 b869 	b.w	8006724 <_write_r>

08006652 <__sseek>:
 8006652:	b510      	push	{r4, lr}
 8006654:	460c      	mov	r4, r1
 8006656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665a:	f000 f9e5 	bl	8006a28 <_lseek_r>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	bf15      	itete	ne
 8006664:	6560      	strne	r0, [r4, #84]	; 0x54
 8006666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800666a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800666e:	81a3      	strheq	r3, [r4, #12]
 8006670:	bf18      	it	ne
 8006672:	81a3      	strhne	r3, [r4, #12]
 8006674:	bd10      	pop	{r4, pc}

08006676 <__sclose>:
 8006676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667a:	f000 b8f1 	b.w	8006860 <_close_r>
	...

08006680 <__swbuf_r>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	460e      	mov	r6, r1
 8006684:	4614      	mov	r4, r2
 8006686:	4605      	mov	r5, r0
 8006688:	b118      	cbz	r0, 8006692 <__swbuf_r+0x12>
 800668a:	6983      	ldr	r3, [r0, #24]
 800668c:	b90b      	cbnz	r3, 8006692 <__swbuf_r+0x12>
 800668e:	f7ff fa1b 	bl	8005ac8 <__sinit>
 8006692:	4b21      	ldr	r3, [pc, #132]	; (8006718 <__swbuf_r+0x98>)
 8006694:	429c      	cmp	r4, r3
 8006696:	d12b      	bne.n	80066f0 <__swbuf_r+0x70>
 8006698:	686c      	ldr	r4, [r5, #4]
 800669a:	69a3      	ldr	r3, [r4, #24]
 800669c:	60a3      	str	r3, [r4, #8]
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	071a      	lsls	r2, r3, #28
 80066a2:	d52f      	bpl.n	8006704 <__swbuf_r+0x84>
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	b36b      	cbz	r3, 8006704 <__swbuf_r+0x84>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	6820      	ldr	r0, [r4, #0]
 80066ac:	1ac0      	subs	r0, r0, r3
 80066ae:	6963      	ldr	r3, [r4, #20]
 80066b0:	b2f6      	uxtb	r6, r6
 80066b2:	4283      	cmp	r3, r0
 80066b4:	4637      	mov	r7, r6
 80066b6:	dc04      	bgt.n	80066c2 <__swbuf_r+0x42>
 80066b8:	4621      	mov	r1, r4
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 f966 	bl	800698c <_fflush_r>
 80066c0:	bb30      	cbnz	r0, 8006710 <__swbuf_r+0x90>
 80066c2:	68a3      	ldr	r3, [r4, #8]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	60a3      	str	r3, [r4, #8]
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	6022      	str	r2, [r4, #0]
 80066ce:	701e      	strb	r6, [r3, #0]
 80066d0:	6963      	ldr	r3, [r4, #20]
 80066d2:	3001      	adds	r0, #1
 80066d4:	4283      	cmp	r3, r0
 80066d6:	d004      	beq.n	80066e2 <__swbuf_r+0x62>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	07db      	lsls	r3, r3, #31
 80066dc:	d506      	bpl.n	80066ec <__swbuf_r+0x6c>
 80066de:	2e0a      	cmp	r6, #10
 80066e0:	d104      	bne.n	80066ec <__swbuf_r+0x6c>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 f951 	bl	800698c <_fflush_r>
 80066ea:	b988      	cbnz	r0, 8006710 <__swbuf_r+0x90>
 80066ec:	4638      	mov	r0, r7
 80066ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <__swbuf_r+0x9c>)
 80066f2:	429c      	cmp	r4, r3
 80066f4:	d101      	bne.n	80066fa <__swbuf_r+0x7a>
 80066f6:	68ac      	ldr	r4, [r5, #8]
 80066f8:	e7cf      	b.n	800669a <__swbuf_r+0x1a>
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <__swbuf_r+0xa0>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	bf08      	it	eq
 8006700:	68ec      	ldreq	r4, [r5, #12]
 8006702:	e7ca      	b.n	800669a <__swbuf_r+0x1a>
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
 8006708:	f000 f81e 	bl	8006748 <__swsetup_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	d0cb      	beq.n	80066a8 <__swbuf_r+0x28>
 8006710:	f04f 37ff 	mov.w	r7, #4294967295
 8006714:	e7ea      	b.n	80066ec <__swbuf_r+0x6c>
 8006716:	bf00      	nop
 8006718:	08006df0 	.word	0x08006df0
 800671c:	08006e10 	.word	0x08006e10
 8006720:	08006dd0 	.word	0x08006dd0

08006724 <_write_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d07      	ldr	r5, [pc, #28]	; (8006744 <_write_r+0x20>)
 8006728:	4604      	mov	r4, r0
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	2200      	movs	r2, #0
 8006730:	602a      	str	r2, [r5, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f7fa fe9b 	bl	800146e <_write>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_write_r+0x1e>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_write_r+0x1e>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	200002f4 	.word	0x200002f4

08006748 <__swsetup_r>:
 8006748:	4b32      	ldr	r3, [pc, #200]	; (8006814 <__swsetup_r+0xcc>)
 800674a:	b570      	push	{r4, r5, r6, lr}
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	4606      	mov	r6, r0
 8006750:	460c      	mov	r4, r1
 8006752:	b125      	cbz	r5, 800675e <__swsetup_r+0x16>
 8006754:	69ab      	ldr	r3, [r5, #24]
 8006756:	b913      	cbnz	r3, 800675e <__swsetup_r+0x16>
 8006758:	4628      	mov	r0, r5
 800675a:	f7ff f9b5 	bl	8005ac8 <__sinit>
 800675e:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <__swsetup_r+0xd0>)
 8006760:	429c      	cmp	r4, r3
 8006762:	d10f      	bne.n	8006784 <__swsetup_r+0x3c>
 8006764:	686c      	ldr	r4, [r5, #4]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800676c:	0719      	lsls	r1, r3, #28
 800676e:	d42c      	bmi.n	80067ca <__swsetup_r+0x82>
 8006770:	06dd      	lsls	r5, r3, #27
 8006772:	d411      	bmi.n	8006798 <__swsetup_r+0x50>
 8006774:	2309      	movs	r3, #9
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	e03e      	b.n	8006802 <__swsetup_r+0xba>
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <__swsetup_r+0xd4>)
 8006786:	429c      	cmp	r4, r3
 8006788:	d101      	bne.n	800678e <__swsetup_r+0x46>
 800678a:	68ac      	ldr	r4, [r5, #8]
 800678c:	e7eb      	b.n	8006766 <__swsetup_r+0x1e>
 800678e:	4b24      	ldr	r3, [pc, #144]	; (8006820 <__swsetup_r+0xd8>)
 8006790:	429c      	cmp	r4, r3
 8006792:	bf08      	it	eq
 8006794:	68ec      	ldreq	r4, [r5, #12]
 8006796:	e7e6      	b.n	8006766 <__swsetup_r+0x1e>
 8006798:	0758      	lsls	r0, r3, #29
 800679a:	d512      	bpl.n	80067c2 <__swsetup_r+0x7a>
 800679c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800679e:	b141      	cbz	r1, 80067b2 <__swsetup_r+0x6a>
 80067a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a4:	4299      	cmp	r1, r3
 80067a6:	d002      	beq.n	80067ae <__swsetup_r+0x66>
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7fd fd7f 	bl	80042ac <_free_r>
 80067ae:	2300      	movs	r3, #0
 80067b0:	6363      	str	r3, [r4, #52]	; 0x34
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	2300      	movs	r3, #0
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f043 0308 	orr.w	r3, r3, #8
 80067c8:	81a3      	strh	r3, [r4, #12]
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	b94b      	cbnz	r3, 80067e2 <__swsetup_r+0x9a>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d8:	d003      	beq.n	80067e2 <__swsetup_r+0x9a>
 80067da:	4621      	mov	r1, r4
 80067dc:	4630      	mov	r0, r6
 80067de:	f000 f959 	bl	8006a94 <__smakebuf_r>
 80067e2:	89a0      	ldrh	r0, [r4, #12]
 80067e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e8:	f010 0301 	ands.w	r3, r0, #1
 80067ec:	d00a      	beq.n	8006804 <__swsetup_r+0xbc>
 80067ee:	2300      	movs	r3, #0
 80067f0:	60a3      	str	r3, [r4, #8]
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	425b      	negs	r3, r3
 80067f6:	61a3      	str	r3, [r4, #24]
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	b943      	cbnz	r3, 800680e <__swsetup_r+0xc6>
 80067fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006800:	d1ba      	bne.n	8006778 <__swsetup_r+0x30>
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	0781      	lsls	r1, r0, #30
 8006806:	bf58      	it	pl
 8006808:	6963      	ldrpl	r3, [r4, #20]
 800680a:	60a3      	str	r3, [r4, #8]
 800680c:	e7f4      	b.n	80067f8 <__swsetup_r+0xb0>
 800680e:	2000      	movs	r0, #0
 8006810:	e7f7      	b.n	8006802 <__swsetup_r+0xba>
 8006812:	bf00      	nop
 8006814:	2000000c 	.word	0x2000000c
 8006818:	08006df0 	.word	0x08006df0
 800681c:	08006e10 	.word	0x08006e10
 8006820:	08006dd0 	.word	0x08006dd0

08006824 <__assert_func>:
 8006824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006826:	4614      	mov	r4, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4b09      	ldr	r3, [pc, #36]	; (8006850 <__assert_func+0x2c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4605      	mov	r5, r0
 8006830:	68d8      	ldr	r0, [r3, #12]
 8006832:	b14c      	cbz	r4, 8006848 <__assert_func+0x24>
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <__assert_func+0x30>)
 8006836:	9100      	str	r1, [sp, #0]
 8006838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800683c:	4906      	ldr	r1, [pc, #24]	; (8006858 <__assert_func+0x34>)
 800683e:	462b      	mov	r3, r5
 8006840:	f000 f8e0 	bl	8006a04 <fiprintf>
 8006844:	f000 f997 	bl	8006b76 <abort>
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <__assert_func+0x38>)
 800684a:	461c      	mov	r4, r3
 800684c:	e7f3      	b.n	8006836 <__assert_func+0x12>
 800684e:	bf00      	nop
 8006850:	2000000c 	.word	0x2000000c
 8006854:	08006f9d 	.word	0x08006f9d
 8006858:	08006faa 	.word	0x08006faa
 800685c:	08006fd8 	.word	0x08006fd8

08006860 <_close_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d06      	ldr	r5, [pc, #24]	; (800687c <_close_r+0x1c>)
 8006864:	2300      	movs	r3, #0
 8006866:	4604      	mov	r4, r0
 8006868:	4608      	mov	r0, r1
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	f7fa fe1b 	bl	80014a6 <_close>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_close_r+0x1a>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b103      	cbz	r3, 800687a <_close_r+0x1a>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	200002f4 	.word	0x200002f4

08006880 <__sflush_r>:
 8006880:	898a      	ldrh	r2, [r1, #12]
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	4605      	mov	r5, r0
 8006888:	0710      	lsls	r0, r2, #28
 800688a:	460c      	mov	r4, r1
 800688c:	d458      	bmi.n	8006940 <__sflush_r+0xc0>
 800688e:	684b      	ldr	r3, [r1, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc05      	bgt.n	80068a0 <__sflush_r+0x20>
 8006894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	dc02      	bgt.n	80068a0 <__sflush_r+0x20>
 800689a:	2000      	movs	r0, #0
 800689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a2:	2e00      	cmp	r6, #0
 80068a4:	d0f9      	beq.n	800689a <__sflush_r+0x1a>
 80068a6:	2300      	movs	r3, #0
 80068a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068ac:	682f      	ldr	r7, [r5, #0]
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	d032      	beq.n	8006918 <__sflush_r+0x98>
 80068b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	075a      	lsls	r2, r3, #29
 80068b8:	d505      	bpl.n	80068c6 <__sflush_r+0x46>
 80068ba:	6863      	ldr	r3, [r4, #4]
 80068bc:	1ac0      	subs	r0, r0, r3
 80068be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068c0:	b10b      	cbz	r3, 80068c6 <__sflush_r+0x46>
 80068c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068c4:	1ac0      	subs	r0, r0, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	4602      	mov	r2, r0
 80068ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068cc:	6a21      	ldr	r1, [r4, #32]
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b0      	blx	r6
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	d106      	bne.n	80068e6 <__sflush_r+0x66>
 80068d8:	6829      	ldr	r1, [r5, #0]
 80068da:	291d      	cmp	r1, #29
 80068dc:	d82c      	bhi.n	8006938 <__sflush_r+0xb8>
 80068de:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <__sflush_r+0x108>)
 80068e0:	40ca      	lsrs	r2, r1
 80068e2:	07d6      	lsls	r6, r2, #31
 80068e4:	d528      	bpl.n	8006938 <__sflush_r+0xb8>
 80068e6:	2200      	movs	r2, #0
 80068e8:	6062      	str	r2, [r4, #4]
 80068ea:	04d9      	lsls	r1, r3, #19
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	d504      	bpl.n	80068fc <__sflush_r+0x7c>
 80068f2:	1c42      	adds	r2, r0, #1
 80068f4:	d101      	bne.n	80068fa <__sflush_r+0x7a>
 80068f6:	682b      	ldr	r3, [r5, #0]
 80068f8:	b903      	cbnz	r3, 80068fc <__sflush_r+0x7c>
 80068fa:	6560      	str	r0, [r4, #84]	; 0x54
 80068fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fe:	602f      	str	r7, [r5, #0]
 8006900:	2900      	cmp	r1, #0
 8006902:	d0ca      	beq.n	800689a <__sflush_r+0x1a>
 8006904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006908:	4299      	cmp	r1, r3
 800690a:	d002      	beq.n	8006912 <__sflush_r+0x92>
 800690c:	4628      	mov	r0, r5
 800690e:	f7fd fccd 	bl	80042ac <_free_r>
 8006912:	2000      	movs	r0, #0
 8006914:	6360      	str	r0, [r4, #52]	; 0x34
 8006916:	e7c1      	b.n	800689c <__sflush_r+0x1c>
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	2301      	movs	r3, #1
 800691c:	4628      	mov	r0, r5
 800691e:	47b0      	blx	r6
 8006920:	1c41      	adds	r1, r0, #1
 8006922:	d1c7      	bne.n	80068b4 <__sflush_r+0x34>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0c4      	beq.n	80068b4 <__sflush_r+0x34>
 800692a:	2b1d      	cmp	r3, #29
 800692c:	d001      	beq.n	8006932 <__sflush_r+0xb2>
 800692e:	2b16      	cmp	r3, #22
 8006930:	d101      	bne.n	8006936 <__sflush_r+0xb6>
 8006932:	602f      	str	r7, [r5, #0]
 8006934:	e7b1      	b.n	800689a <__sflush_r+0x1a>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	e7ad      	b.n	800689c <__sflush_r+0x1c>
 8006940:	690f      	ldr	r7, [r1, #16]
 8006942:	2f00      	cmp	r7, #0
 8006944:	d0a9      	beq.n	800689a <__sflush_r+0x1a>
 8006946:	0793      	lsls	r3, r2, #30
 8006948:	680e      	ldr	r6, [r1, #0]
 800694a:	bf08      	it	eq
 800694c:	694b      	ldreq	r3, [r1, #20]
 800694e:	600f      	str	r7, [r1, #0]
 8006950:	bf18      	it	ne
 8006952:	2300      	movne	r3, #0
 8006954:	eba6 0807 	sub.w	r8, r6, r7
 8006958:	608b      	str	r3, [r1, #8]
 800695a:	f1b8 0f00 	cmp.w	r8, #0
 800695e:	dd9c      	ble.n	800689a <__sflush_r+0x1a>
 8006960:	6a21      	ldr	r1, [r4, #32]
 8006962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006964:	4643      	mov	r3, r8
 8006966:	463a      	mov	r2, r7
 8006968:	4628      	mov	r0, r5
 800696a:	47b0      	blx	r6
 800696c:	2800      	cmp	r0, #0
 800696e:	dc06      	bgt.n	800697e <__sflush_r+0xfe>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	e78e      	b.n	800689c <__sflush_r+0x1c>
 800697e:	4407      	add	r7, r0
 8006980:	eba8 0800 	sub.w	r8, r8, r0
 8006984:	e7e9      	b.n	800695a <__sflush_r+0xda>
 8006986:	bf00      	nop
 8006988:	20400001 	.word	0x20400001

0800698c <_fflush_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b913      	cbnz	r3, 800699c <_fflush_r+0x10>
 8006996:	2500      	movs	r5, #0
 8006998:	4628      	mov	r0, r5
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	b118      	cbz	r0, 80069a6 <_fflush_r+0x1a>
 800699e:	6983      	ldr	r3, [r0, #24]
 80069a0:	b90b      	cbnz	r3, 80069a6 <_fflush_r+0x1a>
 80069a2:	f7ff f891 	bl	8005ac8 <__sinit>
 80069a6:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <_fflush_r+0x6c>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d11b      	bne.n	80069e4 <_fflush_r+0x58>
 80069ac:	686c      	ldr	r4, [r5, #4]
 80069ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ef      	beq.n	8006996 <_fflush_r+0xa>
 80069b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069b8:	07d0      	lsls	r0, r2, #31
 80069ba:	d404      	bmi.n	80069c6 <_fflush_r+0x3a>
 80069bc:	0599      	lsls	r1, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_fflush_r+0x3a>
 80069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c2:	f7ff f924 	bl	8005c0e <__retarget_lock_acquire_recursive>
 80069c6:	4628      	mov	r0, r5
 80069c8:	4621      	mov	r1, r4
 80069ca:	f7ff ff59 	bl	8006880 <__sflush_r>
 80069ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069d0:	07da      	lsls	r2, r3, #31
 80069d2:	4605      	mov	r5, r0
 80069d4:	d4e0      	bmi.n	8006998 <_fflush_r+0xc>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	d4dd      	bmi.n	8006998 <_fflush_r+0xc>
 80069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069de:	f7ff f917 	bl	8005c10 <__retarget_lock_release_recursive>
 80069e2:	e7d9      	b.n	8006998 <_fflush_r+0xc>
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <_fflush_r+0x70>)
 80069e6:	429c      	cmp	r4, r3
 80069e8:	d101      	bne.n	80069ee <_fflush_r+0x62>
 80069ea:	68ac      	ldr	r4, [r5, #8]
 80069ec:	e7df      	b.n	80069ae <_fflush_r+0x22>
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <_fflush_r+0x74>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	bf08      	it	eq
 80069f4:	68ec      	ldreq	r4, [r5, #12]
 80069f6:	e7da      	b.n	80069ae <_fflush_r+0x22>
 80069f8:	08006df0 	.word	0x08006df0
 80069fc:	08006e10 	.word	0x08006e10
 8006a00:	08006dd0 	.word	0x08006dd0

08006a04 <fiprintf>:
 8006a04:	b40e      	push	{r1, r2, r3}
 8006a06:	b503      	push	{r0, r1, lr}
 8006a08:	4601      	mov	r1, r0
 8006a0a:	ab03      	add	r3, sp, #12
 8006a0c:	4805      	ldr	r0, [pc, #20]	; (8006a24 <fiprintf+0x20>)
 8006a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	f7ff fcbf 	bl	8006398 <_vfiprintf_r>
 8006a1a:	b002      	add	sp, #8
 8006a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a20:	b003      	add	sp, #12
 8006a22:	4770      	bx	lr
 8006a24:	2000000c 	.word	0x2000000c

08006a28 <_lseek_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	; (8006a48 <_lseek_r+0x20>)
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4611      	mov	r1, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fa fd5c 	bl	80014f4 <_lseek>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_lseek_r+0x1e>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_lseek_r+0x1e>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	200002f4 	.word	0x200002f4

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460e      	mov	r6, r1
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	b096      	sub	sp, #88	; 0x58
 8006a58:	4614      	mov	r4, r2
 8006a5a:	461d      	mov	r5, r3
 8006a5c:	da07      	bge.n	8006a6e <__swhatbuf_r+0x22>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	89b3      	ldrh	r3, [r6, #12]
 8006a64:	061a      	lsls	r2, r3, #24
 8006a66:	d410      	bmi.n	8006a8a <__swhatbuf_r+0x3e>
 8006a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6c:	e00e      	b.n	8006a8c <__swhatbuf_r+0x40>
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f000 f888 	bl	8006b84 <_fstat_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dbf2      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a82:	425a      	negs	r2, r3
 8006a84:	415a      	adcs	r2, r3
 8006a86:	602a      	str	r2, [r5, #0]
 8006a88:	e7ee      	b.n	8006a68 <__swhatbuf_r+0x1c>
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	b016      	add	sp, #88	; 0x58
 8006a92:	bd70      	pop	{r4, r5, r6, pc}

08006a94 <__smakebuf_r>:
 8006a94:	898b      	ldrh	r3, [r1, #12]
 8006a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a98:	079d      	lsls	r5, r3, #30
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	d507      	bpl.n	8006ab0 <__smakebuf_r+0x1c>
 8006aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	6163      	str	r3, [r4, #20]
 8006aac:	b002      	add	sp, #8
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	ab01      	add	r3, sp, #4
 8006ab2:	466a      	mov	r2, sp
 8006ab4:	f7ff ffca 	bl	8006a4c <__swhatbuf_r>
 8006ab8:	9900      	ldr	r1, [sp, #0]
 8006aba:	4605      	mov	r5, r0
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7fd fc45 	bl	800434c <_malloc_r>
 8006ac2:	b948      	cbnz	r0, 8006ad8 <__smakebuf_r+0x44>
 8006ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac8:	059a      	lsls	r2, r3, #22
 8006aca:	d4ef      	bmi.n	8006aac <__smakebuf_r+0x18>
 8006acc:	f023 0303 	bic.w	r3, r3, #3
 8006ad0:	f043 0302 	orr.w	r3, r3, #2
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	e7e3      	b.n	8006aa0 <__smakebuf_r+0xc>
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <__smakebuf_r+0x7c>)
 8006ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	6020      	str	r0, [r4, #0]
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	9b00      	ldr	r3, [sp, #0]
 8006ae8:	6163      	str	r3, [r4, #20]
 8006aea:	9b01      	ldr	r3, [sp, #4]
 8006aec:	6120      	str	r0, [r4, #16]
 8006aee:	b15b      	cbz	r3, 8006b08 <__smakebuf_r+0x74>
 8006af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 f857 	bl	8006ba8 <_isatty_r>
 8006afa:	b128      	cbz	r0, 8006b08 <__smakebuf_r+0x74>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	89a0      	ldrh	r0, [r4, #12]
 8006b0a:	4305      	orrs	r5, r0
 8006b0c:	81a5      	strh	r5, [r4, #12]
 8006b0e:	e7cd      	b.n	8006aac <__smakebuf_r+0x18>
 8006b10:	08005a61 	.word	0x08005a61

08006b14 <__ascii_mbtowc>:
 8006b14:	b082      	sub	sp, #8
 8006b16:	b901      	cbnz	r1, 8006b1a <__ascii_mbtowc+0x6>
 8006b18:	a901      	add	r1, sp, #4
 8006b1a:	b142      	cbz	r2, 8006b2e <__ascii_mbtowc+0x1a>
 8006b1c:	b14b      	cbz	r3, 8006b32 <__ascii_mbtowc+0x1e>
 8006b1e:	7813      	ldrb	r3, [r2, #0]
 8006b20:	600b      	str	r3, [r1, #0]
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	1e10      	subs	r0, r2, #0
 8006b26:	bf18      	it	ne
 8006b28:	2001      	movne	r0, #1
 8006b2a:	b002      	add	sp, #8
 8006b2c:	4770      	bx	lr
 8006b2e:	4610      	mov	r0, r2
 8006b30:	e7fb      	b.n	8006b2a <__ascii_mbtowc+0x16>
 8006b32:	f06f 0001 	mvn.w	r0, #1
 8006b36:	e7f8      	b.n	8006b2a <__ascii_mbtowc+0x16>

08006b38 <_read_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	; (8006b58 <_read_r+0x20>)
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4608      	mov	r0, r1
 8006b40:	4611      	mov	r1, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7fa fc74 	bl	8001434 <_read>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_read_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_read_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	200002f4 	.word	0x200002f4

08006b5c <__ascii_wctomb>:
 8006b5c:	b149      	cbz	r1, 8006b72 <__ascii_wctomb+0x16>
 8006b5e:	2aff      	cmp	r2, #255	; 0xff
 8006b60:	bf85      	ittet	hi
 8006b62:	238a      	movhi	r3, #138	; 0x8a
 8006b64:	6003      	strhi	r3, [r0, #0]
 8006b66:	700a      	strbls	r2, [r1, #0]
 8006b68:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b6c:	bf98      	it	ls
 8006b6e:	2001      	movls	r0, #1
 8006b70:	4770      	bx	lr
 8006b72:	4608      	mov	r0, r1
 8006b74:	4770      	bx	lr

08006b76 <abort>:
 8006b76:	b508      	push	{r3, lr}
 8006b78:	2006      	movs	r0, #6
 8006b7a:	f000 f84d 	bl	8006c18 <raise>
 8006b7e:	2001      	movs	r0, #1
 8006b80:	f7fa fc4e 	bl	8001420 <_exit>

08006b84 <_fstat_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d07      	ldr	r5, [pc, #28]	; (8006ba4 <_fstat_r+0x20>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	f7fa fc94 	bl	80014be <_fstat>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d102      	bne.n	8006ba0 <_fstat_r+0x1c>
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	b103      	cbz	r3, 8006ba0 <_fstat_r+0x1c>
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	bd38      	pop	{r3, r4, r5, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200002f4 	.word	0x200002f4

08006ba8 <_isatty_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d06      	ldr	r5, [pc, #24]	; (8006bc4 <_isatty_r+0x1c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	f7fa fc93 	bl	80014de <_isatty>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_isatty_r+0x1a>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_isatty_r+0x1a>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	200002f4 	.word	0x200002f4

08006bc8 <_raise_r>:
 8006bc8:	291f      	cmp	r1, #31
 8006bca:	b538      	push	{r3, r4, r5, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	d904      	bls.n	8006bdc <_raise_r+0x14>
 8006bd2:	2316      	movs	r3, #22
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bde:	b112      	cbz	r2, 8006be6 <_raise_r+0x1e>
 8006be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006be4:	b94b      	cbnz	r3, 8006bfa <_raise_r+0x32>
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f830 	bl	8006c4c <_getpid_r>
 8006bec:	462a      	mov	r2, r5
 8006bee:	4601      	mov	r1, r0
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf6:	f000 b817 	b.w	8006c28 <_kill_r>
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d00a      	beq.n	8006c14 <_raise_r+0x4c>
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	d103      	bne.n	8006c0a <_raise_r+0x42>
 8006c02:	2316      	movs	r3, #22
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	2001      	movs	r0, #1
 8006c08:	e7e7      	b.n	8006bda <_raise_r+0x12>
 8006c0a:	2400      	movs	r4, #0
 8006c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c10:	4628      	mov	r0, r5
 8006c12:	4798      	blx	r3
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7e0      	b.n	8006bda <_raise_r+0x12>

08006c18 <raise>:
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <raise+0xc>)
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f7ff bfd3 	b.w	8006bc8 <_raise_r>
 8006c22:	bf00      	nop
 8006c24:	2000000c 	.word	0x2000000c

08006c28 <_kill_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	; (8006c48 <_kill_r+0x20>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	f7fa fbe3 	bl	8001400 <_kill>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d102      	bne.n	8006c44 <_kill_r+0x1c>
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	b103      	cbz	r3, 8006c44 <_kill_r+0x1c>
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	200002f4 	.word	0x200002f4

08006c4c <_getpid_r>:
 8006c4c:	f7fa bbd0 	b.w	80013f0 <_getpid>

08006c50 <_init>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr

08006c5c <_fini>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	bf00      	nop
 8006c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c62:	bc08      	pop	{r3}
 8006c64:	469e      	mov	lr, r3
 8006c66:	4770      	bx	lr
