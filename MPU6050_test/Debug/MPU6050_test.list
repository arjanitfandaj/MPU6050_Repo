
MPU6050_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08007088  08007088  00017088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007594  08007594  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007594  08007594  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007594  08007594  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007594  08007594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800759c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000298  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffd2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212f  00000000  00000000  000301de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d0  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b00  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e12e  00000000  00000000  00054278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc6f8  00000000  00000000  000623a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011ea9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ca8  00000000  00000000  0011eaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007070 	.word	0x08007070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007070 	.word	0x08007070

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MPU6050_init>:
uint32_t Ay = 0;
uint32_t Az = 0;


void MPU6050_init(mpu6050_t *obj, I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *UART)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]

	obj->_i2c = hi2c;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	601a      	str	r2, [r3, #0]
	obj->_uart = UART;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	605a      	str	r2, [r3, #4]
	obj->interrupt_flag = 0;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	memset(obj->_X_data, 0, sizeof(int32_t));
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fb79 	bl	8004368 <memset>
	memset(obj->_Y_data, 0, sizeof(int32_t));
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3388      	adds	r3, #136	; 0x88
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fb72 	bl	8004368 <memset>
	memset(obj->_Z_data, 0,sizeof(int32_t));
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fb6a 	bl	8004368 <memset>


	mpu6050_power_management(obj);
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f000 f8b3 	bl	8000e00 <mpu6050_power_management>
	MPU6050_SMPL_DIV(obj);
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f85e 	bl	8000d5c <MPU6050_SMPL_DIV>

	MPU6050_FIFO_EN_Config(obj, ACCEL_FIFO_EN); //you can enable here gyro temperature also
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f000 f86b 	bl	8000d7e <MPU6050_FIFO_EN_Config>
	MPU6050_FIFO_EN_DATA(obj); // you can enable fifo data
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 f88e 	bl	8000dca <MPU6050_FIFO_EN_DATA>



}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <MPU6050_write>:
//}



void MPU6050_write(mpu6050_t *obj, uint8_t reg, uint8_t * buf, uint16_t buflen)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b088      	sub	sp, #32
 8000cba:	af02      	add	r7, sp, #8
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	72fb      	strb	r3, [r7, #11]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	813b      	strh	r3, [r7, #8]
	uint8_t *payload = (uint8_t *)malloc((buflen+1) * sizeof(uint8_t));
 8000cca:	893b      	ldrh	r3, [r7, #8]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb2c 	bl	800432c <malloc>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	617b      	str	r3, [r7, #20]
	*payload = reg;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	7afa      	ldrb	r2, [r7, #11]
 8000cdc:	701a      	strb	r2, [r3, #0]

	if(buf != NULL && buflen != 0)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d009      	beq.n	8000cf8 <MPU6050_write+0x42>
 8000ce4:	893b      	ldrh	r3, [r7, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <MPU6050_write+0x42>
	{
		memcpy(payload+1,buf,buflen);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	893a      	ldrh	r2, [r7, #8]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fb2a 	bl	800434c <memcpy>

	}

	HAL_I2C_Master_Transmit(obj->_i2c, MPU6050_ADDRESS << 1, payload, buflen+1, 50);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	893b      	ldrh	r3, [r7, #8]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	2232      	movs	r2, #50	; 0x32
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	21d0      	movs	r1, #208	; 0xd0
 8000d0a:	f001 f837 	bl	8001d7c <HAL_I2C_Master_Transmit>

}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <MPU6050_read>:



void MPU6050_read(mpu6050_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b088      	sub	sp, #32
 8000d1a:	af02      	add	r7, sp, #8
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	461a      	mov	r2, r3
 8000d22:	460b      	mov	r3, r1
 8000d24:	72fb      	strb	r3, [r7, #11]
 8000d26:	4613      	mov	r3, r2
 8000d28:	813b      	strh	r3, [r7, #8]
//	uint8_t data = 0;
	uint8_t reg_address = reg;
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(obj->_i2c, MPU6050_ADDRESS<<1, &reg_address, 1, 50);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	f107 0217 	add.w	r2, r7, #23
 8000d36:	2332      	movs	r3, #50	; 0x32
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	21d0      	movs	r1, #208	; 0xd0
 8000d3e:	f001 f81d 	bl	8001d7c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(obj->_i2c, (MPU6050_ADDRESS << 1)|1, buf, buflen, 50);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	893b      	ldrh	r3, [r7, #8]
 8000d48:	2232      	movs	r2, #50	; 0x32
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	21d1      	movs	r1, #209	; 0xd1
 8000d50:	f001 f908 	bl	8001f64 <HAL_I2C_Master_Receive>

}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MPU6050_SMPL_DIV>:




void MPU6050_SMPL_DIV(mpu6050_t * obj)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x07;
 8000d64:	2307      	movs	r3, #7
 8000d66:	73fb      	strb	r3, [r7, #15]

	MPU6050_write(obj, SMPLRT_DIV, &data, 1);
 8000d68:	f107 020f 	add.w	r2, r7, #15
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2119      	movs	r1, #25
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ffa0 	bl	8000cb6 <MPU6050_write>

}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <MPU6050_FIFO_EN_Config>:
}



void MPU6050_FIFO_EN_Config(mpu6050_t *obj, fifo_en_t fifo_en)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70fb      	strb	r3, [r7, #3]

	uint8_t config;
	MPU6050_read(obj, FIFO_EN, &config, 1);
 8000d8a:	f107 020f 	add.w	r2, r7, #15
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2123      	movs	r1, #35	; 0x23
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffbf 	bl	8000d16 <MPU6050_read>
	config = ((config & 0xBF) | 0x01 << fifo_en);// enabling fifo for the accel data. By using the fifo_en check header you can use fifo for temp or gyro.
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000da0:	b25a      	sxtb	r2, r3
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
	MPU6050_write(obj, FIFO_EN, &config, 1);
 8000db4:	f107 020f 	add.w	r2, r7, #15
 8000db8:	2301      	movs	r3, #1
 8000dba:	2123      	movs	r1, #35	; 0x23
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff7a 	bl	8000cb6 <MPU6050_write>
//	uint8_t test_data;
//
//	MPU6050_read(obj, FIFO_EN, &test_data, 1);


}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <MPU6050_FIFO_EN_DATA>:
}



void MPU6050_FIFO_EN_DATA(mpu6050_t *obj)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	uint8_t config;

	MPU6050_read(obj, USER_CTRL, &config, 1);
 8000dd2:	f107 020f 	add.w	r2, r7, #15
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	216a      	movs	r1, #106	; 0x6a
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff9b 	bl	8000d16 <MPU6050_read>

	config = ((config & 0xBF) | 0x01 << 6);
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	73fb      	strb	r3, [r7, #15]

	MPU6050_write(obj, USER_CTRL, &config, 1);
 8000dea:	f107 020f 	add.w	r2, r7, #15
 8000dee:	2301      	movs	r3, #1
 8000df0:	216a      	movs	r1, #106	; 0x6a
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ff5f 	bl	8000cb6 <MPU6050_write>




}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <mpu6050_power_management>:


}

void mpu6050_power_management(mpu6050_t * obj)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

	//if turn on 1 we will start the sensor

	uint8_t config = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

	MPU6050_write(obj, PWR_MGMT_1, &config, 1);
 8000e0c:	f107 020f 	add.w	r2, r7, #15
 8000e10:	2301      	movs	r3, #1
 8000e12:	216b      	movs	r1, #107	; 0x6b
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff4e 	bl	8000cb6 <MPU6050_write>

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <read_fifo>:
	UNUSED(y_data);
	UNUSED(z_data);
}

void read_fifo(mpu6050_t * obj)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	float Ax,Ay,Az;

	uint8_t config[2];
	uint8_t user_ct = 0x00;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	MPU6050_read(obj, FIFO_COUNTH, &config[0], 1);
 8000e32:	f107 0210 	add.w	r2, r7, #16
 8000e36:	2301      	movs	r3, #1
 8000e38:	2172      	movs	r1, #114	; 0x72
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff6b 	bl	8000d16 <MPU6050_read>


	if(config[0] != 0){
 8000e40:	7c3b      	ldrb	r3, [r7, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8081 	beq.w	8000f4a <read_fifo+0x126>

	for(uint8_t i =0; i<config[0];i++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e4e:	e076      	b.n	8000f3e <read_fifo+0x11a>
	{
		uint8_t samples[6];
		uint8_t conf;
		MPU6050_read(obj, FIFO_R_W, &samples, 6);
 8000e50:	f107 0208 	add.w	r2, r7, #8
 8000e54:	2306      	movs	r3, #6
 8000e56:	2174      	movs	r1, #116	; 0x74
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff5c 	bl	8000d16 <MPU6050_read>
//		obj->_X_data = (int16_t)(samples[0] << 8 | samples[1]);
//		obj->_Y_data = (int16_t)(samples[2] << 8 | samples[3]);
//		obj->_Z_data = (int16_t)(samples[4] << 8 | samples[5]);
		int16_t z_data = (int16_t)(samples[2] << 8 | samples[3]);
 8000e5e:	7abb      	ldrb	r3, [r7, #10]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		int16_t y_data = (int16_t)(samples[0] << 8 | samples[1]);
 8000e6c:	7a3b      	ldrb	r3, [r7, #8]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	7a7b      	ldrb	r3, [r7, #9]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	847b      	strh	r3, [r7, #34]	; 0x22
		int16_t x_data = (int16_t)(samples[4] << 8 | samples[5]);
 8000e7a:	7b3b      	ldrb	r3, [r7, #12]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	843b      	strh	r3, [r7, #32]



		obj->_Z_data[i] = z_data;
 8000e88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e8c:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3242      	adds	r2, #66	; 0x42
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		obj->_Y_data[i] = y_data;
 8000e98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e9c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3222      	adds	r2, #34	; 0x22
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		obj->_X_data[i] = x_data;
 8000ea8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000eac:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3202      	adds	r2, #2
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]



			Ax = (x_data /16384.0);//*1000; // dont use float because the lib will take processing power and flash storage :)
 8000eb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb31 	bl	8000524 <__aeabi_i2d>
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <read_fifo+0x13c>)
 8000ec8:	f7ff fcc0 	bl	800084c <__aeabi_ddiv>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fe68 	bl	8000ba8 <__aeabi_d2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	61fb      	str	r3, [r7, #28]
			Ay = (y_data/16384.0);//*1000;
 8000edc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb1f 	bl	8000524 <__aeabi_i2d>
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <read_fifo+0x13c>)
 8000eec:	f7ff fcae 	bl	800084c <__aeabi_ddiv>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fe56 	bl	8000ba8 <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
			Az = (z_data/16384.0);//*1000;
 8000f00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fb0d 	bl	8000524 <__aeabi_i2d>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <read_fifo+0x13c>)
 8000f10:	f7ff fc9c 	bl	800084c <__aeabi_ddiv>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fe44 	bl	8000ba8 <__aeabi_d2f>
 8000f20:	4603      	mov	r3, r0
 8000f22:	617b      	str	r3, [r7, #20]

			print_data(Ax, Ay, Az);
 8000f24:	ed97 1a05 	vldr	s2, [r7, #20]
 8000f28:	edd7 0a06 	vldr	s1, [r7, #24]
 8000f2c:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f30:	f000 f81a 	bl	8000f68 <print_data>
	for(uint8_t i =0; i<config[0];i++)
 8000f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f3e:	7c3b      	ldrb	r3, [r7, #16]
 8000f40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d383      	bcc.n	8000e50 <read_fifo+0x2c>
	}
	else{
		HAL_UART_Transmit(obj->_uart, (uint8_t*)"FIFO full", strlen("FIFO full"), 100);
	}

}
 8000f48:	e006      	b.n	8000f58 <read_fifo+0x134>
		HAL_UART_Transmit(obj->_uart, (uint8_t*)"FIFO full", strlen("FIFO full"), 100);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6858      	ldr	r0, [r3, #4]
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	2209      	movs	r2, #9
 8000f52:	4904      	ldr	r1, [pc, #16]	; (8000f64 <read_fifo+0x140>)
 8000f54:	f002 fe46 	bl	8003be4 <HAL_UART_Transmit>
}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40d00000 	.word	0x40d00000
 8000f64:	08007088 	.word	0x08007088

08000f68 <print_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_data(float x_data,float y_data,float z_data)
{
 8000f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f6c:	b08a      	sub	sp, #40	; 0x28
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f74:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f78:	ed87 1a01 	vstr	s2, [r7, #4]
	char *msg = (char *)malloc(50*sizeof(char));
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f003 f9d5 	bl	800432c <malloc>
 8000f82:	4603      	mov	r3, r0
 8000f84:	617b      	str	r3, [r7, #20]

//	float msg[30];


	sprintf(msg,"X_DATA:%.2f \n Y_data: %.2f\n Z_data: %.2f\n ",x_data,y_data,z_data);
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff fade 	bl	8000548 <__aeabi_f2d>
 8000f8c:	4680      	mov	r8, r0
 8000f8e:	4689      	mov	r9, r1
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f7ff fad9 	bl	8000548 <__aeabi_f2d>
 8000f96:	4604      	mov	r4, r0
 8000f98:	460d      	mov	r5, r1
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fa8:	e9cd 4500 	strd	r4, r5, [sp]
 8000fac:	4642      	mov	r2, r8
 8000fae:	464b      	mov	r3, r9
 8000fb0:	490a      	ldr	r1, [pc, #40]	; (8000fdc <print_data+0x74>)
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f003 ff04 	bl	8004dc0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff f909 	bl	80001d0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	6979      	ldr	r1, [r7, #20]
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <print_data+0x78>)
 8000fc8:	f002 fe0c 	bl	8003be4 <HAL_UART_Transmit>
	free(msg);
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f003 f9b5 	bl	800433c <free>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fdc:	080070e0 	.word	0x080070e0
 8000fe0:	200003dc 	.word	0x200003dc

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fb3e 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f822 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f8ea 	bl	80011c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 f8b8 	bl	8001168 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ff8:	f000 f876 	bl	80010e8 <MX_I2C1_Init>
//  MPU6050_GYRO_CFG(&MPU6050_t);

//  uint8_t data;

//  uint8_t config;
  MPU6050_init(&MPU6050, &hi2c1,&huart2);
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <main+0x40>)
 8000ffe:	490a      	ldr	r1, [pc, #40]	; (8001028 <main+0x44>)
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <main+0x48>)
 8001002:	f7ff fe21 	bl	8000c48 <MPU6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  MPU6050_READ_ACCEL_DATA(&MPU6050_t);
	  read_fifo(&MPU6050);
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <main+0x48>)
 8001008:	f7ff ff0c 	bl	8000e24 <read_fifo>
	  HAL_UART_Transmit(&huart2, (uint8_t *)"\n-----------------------------------------------\n", strlen("-------------------------------------------------"), 10);
 800100c:	230a      	movs	r3, #10
 800100e:	2231      	movs	r2, #49	; 0x31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <main+0x4c>)
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <main+0x40>)
 8001014:	f002 fde6 	bl	8003be4 <HAL_UART_Transmit>
	  HAL_Delay(1500);
 8001018:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800101c:	f000 fb8a 	bl	8001734 <HAL_Delay>
	  read_fifo(&MPU6050);
 8001020:	e7f1      	b.n	8001006 <main+0x22>
 8001022:	bf00      	nop
 8001024:	200003dc 	.word	0x200003dc
 8001028:	20000204 	.word	0x20000204
 800102c:	20000250 	.word	0x20000250
 8001030:	0800710c 	.word	0x0800710c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b096      	sub	sp, #88	; 0x58
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 f990 	bl	8004368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2310      	movs	r3, #16
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2300      	movs	r3, #0
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800107e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fae9 	bl	8002660 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001094:	f000 f90c 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 f9db 	bl	8003470 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010c0:	f000 f8f6 	bl	80012b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c4:	2320      	movs	r3, #32
 80010c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fc04 	bl	80038dc <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010da:	f000 f8e9 	bl	80012b0 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3758      	adds	r7, #88	; 0x58
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_I2C1_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_I2C1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_I2C1_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <MX_I2C1_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_I2C1_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_I2C1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_I2C1_Init+0x74>)
 8001124:	f000 fd9a 	bl	8001c5c <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f8bf 	bl	80012b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <MX_I2C1_Init+0x74>)
 8001136:	f001 f9fb 	bl	8002530 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f8b6 	bl	80012b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_I2C1_Init+0x74>)
 8001148:	f001 fa3d 	bl	80025c6 <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f8ad 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000204 	.word	0x20000204
 8001160:	40005400 	.word	0x40005400
 8001164:	2000090e 	.word	0x2000090e

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <MX_USART2_UART_Init+0x5c>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART2_UART_Init+0x58>)
 80011ac:	f002 fccc 	bl	8003b48 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011b6:	f000 f87b 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200003dc 	.word	0x200003dc
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <MX_GPIO_Init+0xe0>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <MX_GPIO_Init+0xe0>)
 80011e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <MX_GPIO_Init+0xe0>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <MX_GPIO_Init+0xe0>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <MX_GPIO_Init+0xe0>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6153      	str	r3, [r2, #20]
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_GPIO_Init+0xe0>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xe0>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <MX_GPIO_Init+0xe0>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_GPIO_Init+0xe0>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xe0>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xe0>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6153      	str	r3, [r2, #20]
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xe0>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f000 fcf1 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001250:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <MX_GPIO_Init+0xe4>)
 8001262:	f000 fb71 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f000 fb63 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001282:	2320      	movs	r3, #32
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f000 fb54 	bl	8001948 <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000800 	.word	0x48000800

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_MspInit+0x44>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_MspInit+0x44>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_MspInit+0x44>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_MspInit+0x44>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_MspInit+0x44>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f2:	2007      	movs	r0, #7
 80012f4:	f000 faf4 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_I2C_MspInit+0x7c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d128      	bne.n	8001378 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_I2C_MspInit+0x80>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <HAL_I2C_MspInit+0x80>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6153      	str	r3, [r2, #20]
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_I2C_MspInit+0x80>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001344:	2312      	movs	r3, #18
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <HAL_I2C_MspInit+0x84>)
 800135c:	f000 faf4 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_I2C_MspInit+0x80>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_I2C_MspInit+0x80>)
 8001366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136a:	61d3      	str	r3, [r2, #28]
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_I2C_MspInit+0x80>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40005400 	.word	0x40005400
 8001384:	40021000 	.word	0x40021000
 8001388:	48000400 	.word	0x48000400

0800138c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_UART_MspInit+0x7c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d128      	bne.n	8001400 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_UART_MspInit+0x80>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <HAL_UART_MspInit+0x80>)
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_UART_MspInit+0x80>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_UART_MspInit+0x80>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_UART_MspInit+0x80>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	6153      	str	r3, [r2, #20]
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_UART_MspInit+0x80>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013de:	230c      	movs	r3, #12
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ee:	2307      	movs	r3, #7
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f000 faa4 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40004400 	.word	0x40004400
 800140c:	40021000 	.word	0x40021000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f94a 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800147e:	f002 ff2b 	bl	80042d8 <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2216      	movs	r2, #22
 8001486:	601a      	str	r2, [r3, #0]
	return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_exit>:

void _exit (int status)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe7 	bl	8001474 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014a6:	e7fe      	b.n	80014a6 <_exit+0x12>

080014a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
	}

return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
	}
	return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f002 fe90 	bl	80042d8 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20003000 	.word	0x20003000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200001f8 	.word	0x200001f8
 80015ec:	20000478 	.word	0x20000478

080015f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f002 fe4f 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001646:	f7ff fccd 	bl	8000fe4 <main>

0800164a <LoopForever>:

LoopForever:
    b LoopForever
 800164a:	e7fe      	b.n	800164a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800164c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001658:	0800759c 	.word	0x0800759c
  ldr r2, =_sbss
 800165c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001660:	20000474 	.word	0x20000474

08001664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>
	...

08001668 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x28>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 f931 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fe1a 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40022000 	.word	0x40022000

08001694 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f93b 	bl	800192e <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f911 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	20000460 	.word	0x20000460

0800171c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000460 	.word	0x20000460

08001734 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff47 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff5c 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff8e 	bl	8001834 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffb0 	bl	800189c <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e14e      	b.n	8001bf6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8140 	beq.w	8001bf0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d005      	beq.n	8001988 <HAL_GPIO_Init+0x40>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d017      	beq.n	8001a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d123      	bne.n	8001a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	6939      	ldr	r1, [r7, #16]
 8001a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0203 	and.w	r2, r3, #3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 809a 	beq.w	8001bf0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b52      	ldr	r3, [pc, #328]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad4:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <HAL_GPIO_Init+0x2d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1dc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1d8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <HAL_GPIO_Init+0x2dc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1d4>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3a:	4937      	ldr	r1, [pc, #220]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b96:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f47f aea9 	bne.w	8001958 <HAL_GPIO_Init+0x10>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	48000800 	.word	0x48000800
 8001c24:	48000c00 	.word	0x48000c00
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e081      	b.n	8001d72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fb3e 	bl	8001304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	e006      	b.n	8001ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d104      	bne.n	8001cf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69d9      	ldr	r1, [r3, #28]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	817b      	strh	r3, [r7, #10]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	f040 80da 	bne.w	8001f52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_I2C_Master_Transmit+0x30>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0d3      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1d8>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db4:	f7ff fcb2 	bl	800171c <HAL_GetTick>
 8001db8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2319      	movs	r3, #25
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f9e6 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0be      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2210      	movs	r2, #16
 8001de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	893a      	ldrh	r2, [r7, #8]
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2bff      	cmp	r3, #255	; 0xff
 8001e06:	d90e      	bls.n	8001e26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	22ff      	movs	r2, #255	; 0xff
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fb58 	bl	80024d4 <I2C_TransferConfig>
 8001e24:	e06c      	b.n	8001f00 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	8979      	ldrh	r1, [r7, #10]
 8001e38:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fb47 	bl	80024d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e46:	e05b      	b.n	8001f00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	6a39      	ldr	r1, [r7, #32]
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f9e3 	bl	8002218 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e07b      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d034      	beq.n	8001f00 <HAL_I2C_Master_Transmit+0x184>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d130      	bne.n	8001f00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f975 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e04d      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d90e      	bls.n	8001ee0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	22ff      	movs	r2, #255	; 0xff
 8001ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fafb 	bl	80024d4 <I2C_TransferConfig>
 8001ede:	e00f      	b.n	8001f00 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 faea 	bl	80024d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d19e      	bne.n	8001e48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f9c2 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01a      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2220      	movs	r2, #32
 8001f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f32:	400b      	ands	r3, r1
 8001f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	80002000 	.word	0x80002000
 8001f60:	fe00e800 	.word	0xfe00e800

08001f64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
 8001f74:	4613      	mov	r3, r2
 8001f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	f040 80db 	bne.w	800213c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2C_Master_Receive+0x30>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e0d4      	b.n	800213e <HAL_I2C_Master_Receive+0x1da>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fbbe 	bl	800171c <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2319      	movs	r3, #25
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8f2 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0bf      	b.n	800213e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2222      	movs	r2, #34	; 0x22
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d90e      	bls.n	800200e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_I2C_Master_Receive+0x1e4>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fa64 	bl	80024d4 <I2C_TransferConfig>
 800200c:	e06d      	b.n	80020ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_I2C_Master_Receive+0x1e4>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fa53 	bl	80024d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800202e:	e05c      	b.n	80020ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	6a39      	ldr	r1, [r7, #32]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f96b 	bl	8002310 <I2C_WaitOnRXNEFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e07c      	b.n	800213e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d034      	beq.n	80020ea <HAL_I2C_Master_Receive+0x186>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d130      	bne.n	80020ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	2200      	movs	r2, #0
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f880 	bl	8002198 <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e04d      	b.n	800213e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2bff      	cmp	r3, #255	; 0xff
 80020aa:	d90e      	bls.n	80020ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	8979      	ldrh	r1, [r7, #10]
 80020ba:	2300      	movs	r3, #0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fa06 	bl	80024d4 <I2C_TransferConfig>
 80020c8:	e00f      	b.n	80020ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	8979      	ldrh	r1, [r7, #10]
 80020dc:	2300      	movs	r3, #0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f9f5 	bl	80024d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d19d      	bne.n	8002030 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	6a39      	ldr	r1, [r7, #32]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f8cd 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e01a      	b.n	800213e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_I2C_Master_Receive+0x1e8>)
 800211c:	400b      	ands	r3, r1
 800211e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	80002400 	.word	0x80002400
 800214c:	fe00e800 	.word	0xfe00e800

08002150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d103      	bne.n	800216e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d007      	beq.n	800218c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	619a      	str	r2, [r3, #24]
  }
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a8:	e022      	b.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d01e      	beq.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff fab3 	bl	800171c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f043 0220 	orr.w	r2, r3, #32
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e00f      	b.n	8002210 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	429a      	cmp	r2, r3
 800220c:	d0cd      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002224:	e02c      	b.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f8dc 	bl	80023e8 <I2C_IsAcknowledgeFailed>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e02a      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d01e      	beq.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7ff fa6b 	bl	800171c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d1cb      	bne.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a4:	e028      	b.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f89c 	bl	80023e8 <I2C_IsAcknowledgeFailed>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e026      	b.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7ff fa2f 	bl	800171c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d113      	bne.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b20      	cmp	r3, #32
 8002304:	d1cf      	bne.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800231c:	e055      	b.n	80023ca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f860 	bl	80023e8 <I2C_IsAcknowledgeFailed>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e053      	b.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	d129      	bne.n	8002394 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d105      	bne.n	800235a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e03f      	b.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800236e:	400b      	ands	r3, r1
 8002370:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e022      	b.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002394:	f7ff f9c2 	bl	800171c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d302      	bcc.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d1a2      	bne.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	fe00e800 	.word	0xfe00e800

080023e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d161      	bne.n	80024c6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002410:	d02b      	beq.n	800246a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002420:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002422:	e022      	b.n	800246a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d01e      	beq.n	800246a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7ff f976 	bl	800171c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_IsAcknowledgeFailed+0x5a>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e02e      	b.n	80024c8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b20      	cmp	r3, #32
 8002476:	d1d5      	bne.n	8002424 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2210      	movs	r2, #16
 800247e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2220      	movs	r2, #32
 8002486:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fe61 	bl	8002150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <I2C_IsAcknowledgeFailed+0xe8>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f043 0204 	orr.w	r2, r3, #4
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	4613      	mov	r3, r2
 80024e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	0d5b      	lsrs	r3, r3, #21
 80024f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <I2C_TransferConfig+0x58>)
 80024f6:	430b      	orrs	r3, r1
 80024f8:	43db      	mvns	r3, r3
 80024fa:	ea02 0103 	and.w	r1, r2, r3
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002504:	7a7b      	ldrb	r3, [r7, #9]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	431a      	orrs	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	431a      	orrs	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	03ff63ff 	.word	0x03ff63ff

08002530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d138      	bne.n	80025b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002550:	2302      	movs	r3, #2
 8002552:	e032      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2224      	movs	r2, #36	; 0x24
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d139      	bne.n	8002650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e033      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	; 0x24
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002666:	af00      	add	r7, sp, #0
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f000 bef4 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 816a 	beq.w	800295e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800268a:	4bb3      	ldr	r3, [pc, #716]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d00c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002696:	4bb0      	ldr	r3, [pc, #704]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d159      	bne.n	8002756 <HAL_RCC_OscConfig+0xf6>
 80026a2:	4bad      	ldr	r3, [pc, #692]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ae:	d152      	bne.n	8002756 <HAL_RCC_OscConfig+0xf6>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_OscConfig+0x82>
 80026dc:	4b9e      	ldr	r3, [pc, #632]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0xae>
 80026e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800270a:	4b93      	ldr	r3, [pc, #588]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002712:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002716:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002722:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 810c 	beq.w	800295c <HAL_RCC_OscConfig+0x2fc>
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 8106 	bne.w	800295c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f000 be86 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x110>
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7c      	ldr	r2, [pc, #496]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e030      	b.n	80027d2 <HAL_RCC_OscConfig+0x172>
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x134>
 800277a:	4b77      	ldr	r3, [pc, #476]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a76      	ldr	r2, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b74      	ldr	r3, [pc, #464]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a73      	ldr	r2, [pc, #460]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01e      	b.n	80027d2 <HAL_RCC_OscConfig+0x172>
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x15a>
 80027a0:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a69      	ldr	r2, [pc, #420]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x172>
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a66      	ldr	r2, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b64      	ldr	r3, [pc, #400]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a63      	ldr	r2, [pc, #396]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d2:	4b61      	ldr	r3, [pc, #388]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f023 020f 	bic.w	r2, r3, #15
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	495d      	ldr	r1, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d059      	beq.n	80028a4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe ff94 	bl	800171c <HAL_GetTick>
 80027f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fa:	f7fe ff8f 	bl	800171c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d902      	bls.n	8002810 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	f000 be29 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>
 8002810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002814:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002824:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_RCC_OscConfig+0x1e2>
 800283c:	4b46      	ldr	r3, [pc, #280]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e015      	b.n	800286e <HAL_RCC_OscConfig+0x20e>
 8002842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002846:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800285a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800285e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002872:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002876:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800287a:	fa92 f2a2 	rbit	r2, r2
 800287e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002882:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002886:	fab2 f282 	clz	r2, r2
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f042 0220 	orr.w	r2, r2, #32
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f002 021f 	and.w	r2, r2, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ab      	beq.n	80027fa <HAL_RCC_OscConfig+0x19a>
 80028a2:	e05c      	b.n	800295e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe ff3a 	bl	800171c <HAL_GetTick>
 80028a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ae:	f7fe ff35 	bl	800171c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d902      	bls.n	80028c4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	f000 bdcf 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>
 80028c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d102      	bne.n	80028f6 <HAL_RCC_OscConfig+0x296>
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	e015      	b.n	8002922 <HAL_RCC_OscConfig+0x2c2>
 80028f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800290a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002912:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_RCC_OscConfig+0x2f8>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002926:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800292a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800292e:	fa92 f2a2 	rbit	r2, r2
 8002932:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002936:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800293a:	fab2 f282 	clz	r2, r2
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f042 0220 	orr.w	r2, r2, #32
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f002 021f 	and.w	r2, r2, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f202 	lsl.w	r2, r1, r2
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ab      	bne.n	80028ae <HAL_RCC_OscConfig+0x24e>
 8002956:	e002      	b.n	800295e <HAL_RCC_OscConfig+0x2fe>
 8002958:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 816f 	beq.w	8002c4c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800296e:	4bd0      	ldr	r3, [pc, #832]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800297a:	4bcd      	ldr	r3, [pc, #820]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d16c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x400>
 8002986:	4bca      	ldr	r3, [pc, #808]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d166      	bne.n	8002a60 <HAL_RCC_OscConfig+0x400>
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0x362>
 80029bc:	4bbc      	ldr	r3, [pc, #752]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	e013      	b.n	80029ea <HAL_RCC_OscConfig+0x38a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029e6:	4bb2      	ldr	r3, [pc, #712]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2202      	movs	r2, #2
 80029ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80029f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029f4:	fa92 f2a2 	rbit	r2, r2
 80029f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80029fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a00:	fab2 f282 	clz	r2, r2
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f002 021f 	and.w	r2, r2, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d002      	beq.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f000 bd1b 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4ba0      	ldr	r3, [pc, #640]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	21f8      	movs	r1, #248	; 0xf8
 8002a3c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a44:	fa91 f1a1 	rbit	r1, r1
 8002a48:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a4c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a50:	fab1 f181 	clz	r1, r1
 8002a54:	b2c9      	uxtb	r1, r1
 8002a56:	408b      	lsls	r3, r1
 8002a58:	4995      	ldr	r1, [pc, #596]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e0f5      	b.n	8002c4c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8085 	beq.w	8002b76 <HAL_RCC_OscConfig+0x516>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	461a      	mov	r2, r3
 8002a94:	2301      	movs	r3, #1
 8002a96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fe40 	bl	800171c <HAL_GetTick>
 8002a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fe3b 	bl	800171c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f000 bcd5 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002aca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x488>
 8002ae2:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x4b0>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2202      	movs	r2, #2
 8002b12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b1a:	fa92 f2a2 	rbit	r2, r2
 8002b1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f002 021f 	and.w	r2, r2, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0af      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	21f8      	movs	r1, #248	; 0xf8
 8002b52:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b5a:	fa91 f1a1 	rbit	r1, r1
 8002b5e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b62:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b66:	fab1 f181 	clz	r1, r1
 8002b6a:	b2c9      	uxtb	r1, r1
 8002b6c:	408b      	lsls	r3, r1
 8002b6e:	4950      	ldr	r1, [pc, #320]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	e06a      	b.n	8002c4c <HAL_RCC_OscConfig+0x5ec>
 8002b76:	2301      	movs	r3, #1
 8002b78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fdbb 	bl	800171c <HAL_GetTick>
 8002ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe fdb6 	bl	800171c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	f000 bc50 	b.w	8003462 <HAL_RCC_OscConfig+0xe02>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x592>
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e013      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCC_OscConfig+0x650>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c20:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1af      	bne.n	8002bac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80da 	beq.w	8002e10 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d069      	beq.n	8002d3a <HAL_RCC_OscConfig+0x6da>
 8002c66:	2301      	movs	r3, #1
 8002c68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x654>)
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fe fd44 	bl	800171c <HAL_GetTick>
 8002c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c98:	e00e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fd3f 	bl	800171c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d906      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e3d9      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	10908120 	.word	0x10908120
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002cca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cf8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4ba5      	ldr	r3, [pc, #660]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d02:	2102      	movs	r1, #2
 8002d04:	6019      	str	r1, [r3, #0]
 8002d06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f1a3 	rbit	r1, r3
 8002d10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d14:	6019      	str	r1, [r3, #0]
  return result;
 8002d16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0b0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x63a>
 8002d38:	e06a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7b0>
 8002d3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fa93 f2a3 	rbit	r2, r3
 8002d4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d50:	601a      	str	r2, [r3, #0]
  return result;
 8002d52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d56:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b8c      	ldr	r3, [pc, #560]	; (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	461a      	mov	r2, r3
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fcd6 	bl	800171c <HAL_GetTick>
 8002d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	e009      	b.n	8002d8a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fe fcd1 	bl	800171c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e36b      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 8002d8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d8e:	2202      	movs	r2, #2
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f2a3 	rbit	r2, r3
 8002d9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002da6:	2202      	movs	r2, #2
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd2:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dda:	2102      	movs	r1, #2
 8002ddc:	6019      	str	r1, [r3, #0]
 8002dde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f1a3 	rbit	r1, r3
 8002de8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dec:	6019      	str	r1, [r3, #0]
  return result;
 8002dee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1b2      	bne.n	8002d76 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8158 	beq.w	80030d0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d112      	bne.n	8002e58 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a56      	ldr	r2, [pc, #344]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]
 8002e3e:	4b54      	ldr	r3, [pc, #336]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f107 0308 	add.w	r3, r7, #8
 8002e50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	4b4f      	ldr	r3, [pc, #316]	; (8002f98 <HAL_RCC_OscConfig+0x938>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d11a      	bne.n	8002e9a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e64:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <HAL_RCC_OscConfig+0x938>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4b      	ldr	r2, [pc, #300]	; (8002f98 <HAL_RCC_OscConfig+0x938>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fc54 	bl	800171c <HAL_GetTick>
 8002e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e009      	b.n	8002e8e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe fc4f 	bl	800171c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e2e9      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <HAL_RCC_OscConfig+0x938>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ef      	beq.n	8002e7a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x852>
 8002ea4:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a39      	ldr	r2, [pc, #228]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e02f      	b.n	8002f12 <HAL_RCC_OscConfig+0x8b2>
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x876>
 8002ebc:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	e01d      	b.n	8002f12 <HAL_RCC_OscConfig+0x8b2>
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x89a>
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6213      	str	r3, [r2, #32]
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x8b2>
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d06b      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fbfe 	bl	800171c <HAL_GetTick>
 8002f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe fbf9 	bl	800171c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e291      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 8002f3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f42:	2202      	movs	r2, #2
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f6c:	601a      	str	r2, [r3, #0]
  return result;
 8002f6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d109      	bne.n	8002f9c <HAL_RCC_OscConfig+0x93c>
 8002f88:	4b01      	ldr	r3, [pc, #4]	; (8002f90 <HAL_RCC_OscConfig+0x930>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	e014      	b.n	8002fb8 <HAL_RCC_OscConfig+0x958>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	10908120 	.word	0x10908120
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	fa93 f2a3 	rbit	r2, r3
 8002fae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4bbb      	ldr	r3, [pc, #748]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	6011      	str	r1, [r2, #0]
 8002fc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	fa92 f1a2 	rbit	r1, r2
 8002fca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fce:	6011      	str	r1, [r2, #0]
  return result;
 8002fd0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	fab2 f282 	clz	r2, r2
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f002 021f 	and.w	r2, r2, #31
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d099      	beq.n	8002f26 <HAL_RCC_OscConfig+0x8c6>
 8002ff2:	e063      	b.n	80030bc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fb92 	bl	800171c <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe fb8d 	bl	800171c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e225      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 8003016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003044:	601a      	str	r2, [r3, #0]
  return result;
 8003046:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800304a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d102      	bne.n	8003066 <HAL_RCC_OscConfig+0xa06>
 8003060:	4b90      	ldr	r3, [pc, #576]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	e00d      	b.n	8003082 <HAL_RCC_OscConfig+0xa22>
 8003066:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800306a:	2202      	movs	r2, #2
 800306c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	fa93 f2a3 	rbit	r2, r3
 8003078:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4b89      	ldr	r3, [pc, #548]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003086:	2102      	movs	r1, #2
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fa92 f1a2 	rbit	r1, r2
 8003094:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003098:	6011      	str	r1, [r2, #0]
  return result;
 800309a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	f002 021f 	and.w	r2, r2, #31
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f202 	lsl.w	r2, r1, r2
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1a0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c4:	4b77      	ldr	r3, [pc, #476]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80030ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 81c2 	beq.w	8003460 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030dc:	4b71      	ldr	r3, [pc, #452]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f000 819c 	beq.w	8003422 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f040 8114 	bne.w	800331e <HAL_RCC_OscConfig+0xcbe>
 80030f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fa93 f2a3 	rbit	r2, r3
 800310a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800310e:	601a      	str	r2, [r3, #0]
  return result;
 8003110:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003114:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	461a      	mov	r2, r3
 8003128:	2300      	movs	r3, #0
 800312a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe faf6 	bl	800171c <HAL_GetTick>
 8003130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003134:	e009      	b.n	800314a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe faf1 	bl	800171c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e18b      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 800314a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800314e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	fa93 f2a3 	rbit	r2, r3
 800315e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003162:	601a      	str	r2, [r3, #0]
  return result;
 8003164:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003168:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0xb24>
 800317e:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e01b      	b.n	80031bc <HAL_RCC_OscConfig+0xb5c>
 8003184:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fa93 f2a3 	rbit	r2, r3
 80031b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	fa92 f1a2 	rbit	r1, r2
 80031d0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031d4:	6011      	str	r1, [r2, #0]
  return result;
 80031d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f042 0220 	orr.w	r2, r2, #32
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f002 021f 	and.w	r2, r2, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d19e      	bne.n	8003136 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	430b      	orrs	r3, r1
 800320e:	4925      	ldr	r1, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800322c:	601a      	str	r2, [r3, #0]
  return result;
 800322e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003232:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800323e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	461a      	mov	r2, r3
 8003246:	2301      	movs	r3, #1
 8003248:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fe fa67 	bl	800171c <HAL_GetTick>
 800324e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003252:	e009      	b.n	8003268 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fa62 	bl	800171c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0fc      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 8003268:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800326c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003280:	601a      	str	r2, [r3, #0]
  return result;
 8003282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003286:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0xc48>
 800329c:	4b01      	ldr	r3, [pc, #4]	; (80032a4 <HAL_RCC_OscConfig+0xc44>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	e01e      	b.n	80032e0 <HAL_RCC_OscConfig+0xc80>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_OscConfig+0xe0c>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	fa92 f1a2 	rbit	r1, r2
 80032f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032f8:	6011      	str	r1, [r2, #0]
  return result;
 80032fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f042 0220 	orr.w	r2, r2, #32
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f002 021f 	and.w	r2, r2, #31
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d09b      	beq.n	8003254 <HAL_RCC_OscConfig+0xbf4>
 800331c:	e0a0      	b.n	8003460 <HAL_RCC_OscConfig+0xe00>
 800331e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003336:	601a      	str	r2, [r3, #0]
  return result;
 8003338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800333c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe f9e2 	bl	800171c <HAL_GetTick>
 8003358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	e009      	b.n	8003372 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe f9dd 	bl	800171c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e077      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
 8003372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338a:	601a      	str	r2, [r3, #0]
  return result;
 800338c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_RCC_OscConfig+0xd4c>
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_OscConfig+0xe0c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0xd84>
 80033ac:	f107 0320 	add.w	r3, r7, #32
 80033b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f107 0320 	add.w	r3, r7, #32
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f107 0318 	add.w	r3, r7, #24
 80033ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_OscConfig+0xe0c>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f107 0210 	add.w	r2, r7, #16
 80033e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	f107 0210 	add.w	r2, r7, #16
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fa92 f1a2 	rbit	r1, r2
 80033f8:	f107 020c 	add.w	r2, r7, #12
 80033fc:	6011      	str	r1, [r2, #0]
  return result;
 80033fe:	f107 020c 	add.w	r2, r7, #12
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fab2 f282 	clz	r2, r2
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f042 0220 	orr.w	r2, r2, #32
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f002 021f 	and.w	r2, r2, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d19e      	bne.n	800335e <HAL_RCC_OscConfig+0xcfe>
 8003420:	e01e      	b.n	8003460 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e018      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_RCC_OscConfig+0xe0c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003438:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800343c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	429a      	cmp	r2, r3
 8003448:	d108      	bne.n	800345c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800344a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800344e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000

08003470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b09e      	sub	sp, #120	; 0x78
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e162      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b90      	ldr	r3, [pc, #576]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	498b      	ldr	r1, [pc, #556]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e14a      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b82      	ldr	r3, [pc, #520]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	497f      	ldr	r1, [pc, #508]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80dc 	beq.w	800369c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d13c      	bne.n	8003566 <HAL_RCC_ClockConfig+0xf6>
 80034ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d102      	bne.n	8003516 <HAL_RCC_ClockConfig+0xa6>
 8003510:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e00f      	b.n	8003536 <HAL_RCC_ClockConfig+0xc6>
 8003516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	667b      	str	r3, [r7, #100]	; 0x64
 8003524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003528:	663b      	str	r3, [r7, #96]	; 0x60
 800352a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003532:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800353a:	65ba      	str	r2, [r7, #88]	; 0x58
 800353c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800353e:	fa92 f2a2 	rbit	r2, r2
 8003542:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003546:	fab2 f282 	clz	r2, r2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f042 0220 	orr.w	r2, r2, #32
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d17b      	bne.n	800365a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0f3      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d13c      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x178>
 800356e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003572:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <HAL_RCC_ClockConfig+0x128>
 8003592:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	e00f      	b.n	80035b8 <HAL_RCC_ClockConfig+0x148>
 8003598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800359c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
 80035a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b4:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80035be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c0:	fa92 f2a2 	rbit	r2, r2
 80035c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c8:	fab2 f282 	clz	r2, r2
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f042 0220 	orr.w	r2, r2, #32
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f002 021f 	and.w	r2, r2, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d13a      	bne.n	800365a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b2      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
 80035e8:	2302      	movs	r3, #2
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_RCC_ClockConfig+0x1a0>
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	e00d      	b.n	800362c <HAL_RCC_ClockConfig+0x1bc>
 8003610:	2302      	movs	r3, #2
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	2302      	movs	r3, #2
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	2202      	movs	r2, #2
 800362e:	61ba      	str	r2, [r7, #24]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	fa92 f2a2 	rbit	r2, r2
 8003636:	617a      	str	r2, [r7, #20]
  return result;
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f002 021f 	and.w	r2, r2, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e079      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	491a      	ldr	r1, [pc, #104]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800366c:	f7fe f856 	bl	800171c <HAL_GetTick>
 8003670:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fe f852 	bl	800171c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e061      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <HAL_RCC_ClockConfig+0x260>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d214      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	4906      	ldr	r1, [pc, #24]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_RCC_ClockConfig+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e040      	b.n	800374e <HAL_RCC_ClockConfig+0x2de>
 80036cc:	40022000 	.word	0x40022000
 80036d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCC_ClockConfig+0x2e8>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	491a      	ldr	r1, [pc, #104]	; (8003758 <HAL_RCC_ClockConfig+0x2e8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x2e8>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4912      	ldr	r1, [pc, #72]	; (8003758 <HAL_RCC_ClockConfig+0x2e8>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003712:	f000 f829 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003716:	4601      	mov	r1, r0
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <HAL_RCC_ClockConfig+0x2e8>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003720:	22f0      	movs	r2, #240	; 0xf0
 8003722:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	fa92 f2a2 	rbit	r2, r2
 800372a:	60fa      	str	r2, [r7, #12]
  return result;
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	fab2 f282 	clz	r2, r2
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	40d3      	lsrs	r3, r2
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x2ec>)
 8003738:	5cd3      	ldrb	r3, [r2, r3]
 800373a:	fa21 f303 	lsr.w	r3, r1, r3
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_RCC_ClockConfig+0x2f0>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_RCC_ClockConfig+0x2f4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd ffa4 	bl	8001694 <HAL_InitTick>
  
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3778      	adds	r7, #120	; 0x78
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	08007178 	.word	0x08007178
 8003760:	20000000 	.word	0x20000000
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b08b      	sub	sp, #44	; 0x2c
 800376c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003782:	4b29      	ldr	r3, [pc, #164]	; (8003828 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d002      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x30>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x36>
 8003796:	e03c      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCC_GetSysClockFreq+0xc4>)
 800379a:	623b      	str	r3, [r7, #32]
      break;
 800379c:	e03c      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	fa92 f2a2 	rbit	r2, r2
 80037b0:	607a      	str	r2, [r7, #4]
  return result;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	fab2 f282 	clz	r2, r2
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	40d3      	lsrs	r3, r2
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037c2:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	220f      	movs	r2, #15
 80037cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	fa92 f2a2 	rbit	r2, r2
 80037d4:	60fa      	str	r2, [r7, #12]
  return result;
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	fab2 f282 	clz	r2, r2
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	40d3      	lsrs	r3, r2
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037f0:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_RCC_GetSysClockFreq+0xc4>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	e004      	b.n	800380c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	623b      	str	r3, [r7, #32]
      break;
 8003810:	e002      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003814:	623b      	str	r3, [r7, #32]
      break;
 8003816:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003818:	6a3b      	ldr	r3, [r7, #32]
}
 800381a:	4618      	mov	r0, r3
 800381c:	372c      	adds	r7, #44	; 0x2c
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	007a1200 	.word	0x007a1200
 8003830:	08007190 	.word	0x08007190
 8003834:	080071a0 	.word	0x080071a0
 8003838:	003d0900 	.word	0x003d0900

0800383c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_GetHCLKFreq+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800385a:	f7ff ffef 	bl	800383c <HAL_RCC_GetHCLKFreq>
 800385e:	4601      	mov	r1, r0
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003868:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800386c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	fa92 f2a2 	rbit	r2, r2
 8003874:	603a      	str	r2, [r7, #0]
  return result;
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	40d3      	lsrs	r3, r2
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08007188 	.word	0x08007188

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800389e:	f7ff ffcd 	bl	800383c <HAL_RCC_GetHCLKFreq>
 80038a2:	4601      	mov	r1, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	fa92 f2a2 	rbit	r2, r2
 80038b8:	603a      	str	r2, [r7, #0]
  return result;
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	fab2 f282 	clz	r2, r2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	40d3      	lsrs	r3, r2
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08007188 	.word	0x08007188

080038dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b092      	sub	sp, #72	; 0x48
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80cd 	beq.w	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003900:	4b8e      	ldr	r3, [pc, #568]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10e      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4a8a      	ldr	r2, [pc, #552]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	61d3      	str	r3, [r2, #28]
 8003918:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a81      	ldr	r2, [pc, #516]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fd feeb 	bl	800171c <HAL_GetTick>
 8003946:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e008      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fd fee7 	bl	800171c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b64      	cmp	r3, #100	; 0x64
 8003956:	d901      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0ea      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003968:	4b74      	ldr	r3, [pc, #464]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d07d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003982:	429a      	cmp	r2, r3
 8003984:	d076      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003986:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b66      	ldr	r3, [pc, #408]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	461a      	mov	r2, r3
 80039b0:	2301      	movs	r3, #1
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b5d      	ldr	r3, [pc, #372]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	461a      	mov	r2, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d045      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd fe98 	bl	800171c <HAL_GetTick>
 80039ec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd fe94 	bl	800171c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e095      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003a06:	2302      	movs	r3, #2
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	2302      	movs	r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	61fb      	str	r3, [r7, #28]
  return result;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d102      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a34:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	e007      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	613a      	str	r2, [r7, #16]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	fa92 f2a2 	rbit	r2, r2
 8003a54:	60fa      	str	r2, [r7, #12]
  return result;
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f002 021f 	and.w	r2, r2, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0bd      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	492e      	ldr	r1, [pc, #184]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a98:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4922      	ldr	r1, [pc, #136]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f023 0210 	bic.w	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4913      	ldr	r1, [pc, #76]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	490b      	ldr	r1, [pc, #44]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3748      	adds	r7, #72	; 0x48
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	10908100 	.word	0x10908100

08003b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e040      	b.n	8003bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fc0e 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8c0 	bl	8003d0c <UART_SetConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e022      	b.n	8003bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9ea 	bl	8003f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa71 	bl	80040bc <UART_CheckIdleState>
 8003bda:	4603      	mov	r3, r0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 8082 	bne.w	8003d02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_UART_Transmit+0x26>
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07a      	b.n	8003d04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Transmit+0x38>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e073      	b.n	8003d04 <HAL_UART_Transmit+0x120>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2221      	movs	r2, #33	; 0x21
 8003c30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c32:	f7fd fd73 	bl	800171c <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	d108      	bne.n	8003c64 <HAL_UART_Transmit+0x80>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c74:	e02d      	b.n	8003cd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fa64 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e039      	b.n	8003d04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e008      	b.n	8003cc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cb      	bne.n	8003c76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa30 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e005      	b.n	8003d04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b8a      	ldr	r3, [pc, #552]	; (8003f60 <UART_SetConfig+0x254>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6979      	ldr	r1, [r7, #20]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a78      	ldr	r2, [pc, #480]	; (8003f64 <UART_SetConfig+0x258>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d120      	bne.n	8003dca <UART_SetConfig+0xbe>
 8003d88:	4b77      	ldr	r3, [pc, #476]	; (8003f68 <UART_SetConfig+0x25c>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d817      	bhi.n	8003dc4 <UART_SetConfig+0xb8>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x90>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003db9 	.word	0x08003db9
 8003da4:	08003dbf 	.word	0x08003dbf
 8003da8:	08003db3 	.word	0x08003db3
 8003dac:	2300      	movs	r3, #0
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e01d      	b.n	8003dee <UART_SetConfig+0xe2>
 8003db2:	2302      	movs	r3, #2
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e01a      	b.n	8003dee <UART_SetConfig+0xe2>
 8003db8:	2304      	movs	r3, #4
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e017      	b.n	8003dee <UART_SetConfig+0xe2>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e014      	b.n	8003dee <UART_SetConfig+0xe2>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e011      	b.n	8003dee <UART_SetConfig+0xe2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <UART_SetConfig+0x260>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d102      	bne.n	8003dda <UART_SetConfig+0xce>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e009      	b.n	8003dee <UART_SetConfig+0xe2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a64      	ldr	r2, [pc, #400]	; (8003f70 <UART_SetConfig+0x264>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d102      	bne.n	8003dea <UART_SetConfig+0xde>
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e001      	b.n	8003dee <UART_SetConfig+0xe2>
 8003dea:	2310      	movs	r3, #16
 8003dec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df6:	d15b      	bne.n	8003eb0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d827      	bhi.n	8003e4e <UART_SetConfig+0x142>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <UART_SetConfig+0xf8>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	08003e39 	.word	0x08003e39
 8003e10:	08003e4f 	.word	0x08003e4f
 8003e14:	08003e3f 	.word	0x08003e3f
 8003e18:	08003e4f 	.word	0x08003e4f
 8003e1c:	08003e4f 	.word	0x08003e4f
 8003e20:	08003e4f 	.word	0x08003e4f
 8003e24:	08003e47 	.word	0x08003e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7ff fd14 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8003e2c:	61b8      	str	r0, [r7, #24]
        break;
 8003e2e:	e013      	b.n	8003e58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e30:	f7ff fd32 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8003e34:	61b8      	str	r0, [r7, #24]
        break;
 8003e36:	e00f      	b.n	8003e58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <UART_SetConfig+0x268>)
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e00c      	b.n	8003e58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7ff fc93 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003e42:	61b8      	str	r0, [r7, #24]
        break;
 8003e44:	e008      	b.n	8003e58 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	61bb      	str	r3, [r7, #24]
        break;
 8003e4c:	e004      	b.n	8003e58 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	77bb      	strb	r3, [r7, #30]
        break;
 8003e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d074      	beq.n	8003f48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	005a      	lsls	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b0f      	cmp	r3, #15
 8003e7a:	d916      	bls.n	8003eaa <UART_SetConfig+0x19e>
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e82:	d212      	bcs.n	8003eaa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f023 030f 	bic.w	r3, r3, #15
 8003e8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	89fa      	ldrh	r2, [r7, #14]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e04e      	b.n	8003f48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77bb      	strb	r3, [r7, #30]
 8003eae:	e04b      	b.n	8003f48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb0:	7ffb      	ldrb	r3, [r7, #31]
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d827      	bhi.n	8003f06 <UART_SetConfig+0x1fa>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <UART_SetConfig+0x1b0>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	08003f07 	.word	0x08003f07
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	08003f07 	.word	0x08003f07
 8003ed4:	08003f07 	.word	0x08003f07
 8003ed8:	08003f07 	.word	0x08003f07
 8003edc:	08003eff 	.word	0x08003eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7ff fcb8 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8003ee4:	61b8      	str	r0, [r7, #24]
        break;
 8003ee6:	e013      	b.n	8003f10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff fcd6 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8003eec:	61b8      	str	r0, [r7, #24]
        break;
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <UART_SetConfig+0x268>)
 8003ef2:	61bb      	str	r3, [r7, #24]
        break;
 8003ef4:	e00c      	b.n	8003f10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef6:	f7ff fc37 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003efa:	61b8      	str	r0, [r7, #24]
        break;
 8003efc:	e008      	b.n	8003f10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f02:	61bb      	str	r3, [r7, #24]
        break;
 8003f04:	e004      	b.n	8003f10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d018      	beq.n	8003f48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085a      	lsrs	r2, r3, #1
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	441a      	add	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	d908      	bls.n	8003f44 <UART_SetConfig+0x238>
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d204      	bcs.n	8003f44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	e001      	b.n	8003f48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	efff69f3 	.word	0xefff69f3
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40004400 	.word	0x40004400
 8003f70:	40004800 	.word	0x40004800
 8003f74:	007a1200 	.word	0x007a1200

08003f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01a      	beq.n	800408e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004076:	d10a      	bne.n	800408e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040cc:	f7fd fb26 	bl	800171c <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d10e      	bne.n	80040fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f82d 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e023      	b.n	8004146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d10e      	bne.n	800412a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800410c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f817 	bl	800414e <UART_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e00d      	b.n	8004146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b09c      	sub	sp, #112	; 0x70
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415e:	e0a5      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	f000 80a1 	beq.w	80042ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fd fad7 	bl	800171c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <UART_WaitOnFlagUntilTimeout+0x32>
 800417a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417c:	2b00      	cmp	r3, #0
 800417e:	d13e      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004194:	667b      	str	r3, [r7, #100]	; 0x64
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e067      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d04f      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421a:	d147      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004224:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800423a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
 8004246:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	613b      	str	r3, [r7, #16]
   return(result);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004278:	623a      	str	r2, [r7, #32]
 800427a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	69f9      	ldr	r1, [r7, #28]
 800427e:	6a3a      	ldr	r2, [r7, #32]
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	61bb      	str	r3, [r7, #24]
   return(result);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e5      	bne.n	8004258 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e010      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	f43f af4a 	beq.w	8004160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3770      	adds	r7, #112	; 0x70
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <__errno>:
 80042d8:	4b01      	ldr	r3, [pc, #4]	; (80042e0 <__errno+0x8>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f002 feba 	bl	8007070 <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08007594 	.word	0x08007594
 8004320:	08007594 	.word	0x08007594
 8004324:	08007594 	.word	0x08007594
 8004328:	08007598 	.word	0x08007598

0800432c <malloc>:
 800432c:	4b02      	ldr	r3, [pc, #8]	; (8004338 <malloc+0xc>)
 800432e:	4601      	mov	r1, r0
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f000 b871 	b.w	8004418 <_malloc_r>
 8004336:	bf00      	nop
 8004338:	2000000c 	.word	0x2000000c

0800433c <free>:
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <free+0xc>)
 800433e:	4601      	mov	r1, r0
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f000 b819 	b.w	8004378 <_free_r>
 8004346:	bf00      	nop
 8004348:	2000000c 	.word	0x2000000c

0800434c <memcpy>:
 800434c:	440a      	add	r2, r1
 800434e:	4291      	cmp	r1, r2
 8004350:	f100 33ff 	add.w	r3, r0, #4294967295
 8004354:	d100      	bne.n	8004358 <memcpy+0xc>
 8004356:	4770      	bx	lr
 8004358:	b510      	push	{r4, lr}
 800435a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800435e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004362:	4291      	cmp	r1, r2
 8004364:	d1f9      	bne.n	800435a <memcpy+0xe>
 8004366:	bd10      	pop	{r4, pc}

08004368 <memset>:
 8004368:	4402      	add	r2, r0
 800436a:	4603      	mov	r3, r0
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	f803 1b01 	strb.w	r1, [r3], #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <_free_r>:
 8004378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800437a:	2900      	cmp	r1, #0
 800437c:	d048      	beq.n	8004410 <_free_r+0x98>
 800437e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004382:	9001      	str	r0, [sp, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f1a1 0404 	sub.w	r4, r1, #4
 800438a:	bfb8      	it	lt
 800438c:	18e4      	addlt	r4, r4, r3
 800438e:	f001 fbb3 	bl	8005af8 <__malloc_lock>
 8004392:	4a20      	ldr	r2, [pc, #128]	; (8004414 <_free_r+0x9c>)
 8004394:	9801      	ldr	r0, [sp, #4]
 8004396:	6813      	ldr	r3, [r2, #0]
 8004398:	4615      	mov	r5, r2
 800439a:	b933      	cbnz	r3, 80043aa <_free_r+0x32>
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6014      	str	r4, [r2, #0]
 80043a0:	b003      	add	sp, #12
 80043a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043a6:	f001 bbad 	b.w	8005b04 <__malloc_unlock>
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	d90b      	bls.n	80043c6 <_free_r+0x4e>
 80043ae:	6821      	ldr	r1, [r4, #0]
 80043b0:	1862      	adds	r2, r4, r1
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bf04      	itt	eq
 80043b6:	681a      	ldreq	r2, [r3, #0]
 80043b8:	685b      	ldreq	r3, [r3, #4]
 80043ba:	6063      	str	r3, [r4, #4]
 80043bc:	bf04      	itt	eq
 80043be:	1852      	addeq	r2, r2, r1
 80043c0:	6022      	streq	r2, [r4, #0]
 80043c2:	602c      	str	r4, [r5, #0]
 80043c4:	e7ec      	b.n	80043a0 <_free_r+0x28>
 80043c6:	461a      	mov	r2, r3
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b10b      	cbz	r3, 80043d0 <_free_r+0x58>
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	d9fa      	bls.n	80043c6 <_free_r+0x4e>
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	1855      	adds	r5, r2, r1
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d10b      	bne.n	80043f0 <_free_r+0x78>
 80043d8:	6824      	ldr	r4, [r4, #0]
 80043da:	4421      	add	r1, r4
 80043dc:	1854      	adds	r4, r2, r1
 80043de:	42a3      	cmp	r3, r4
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	d1dd      	bne.n	80043a0 <_free_r+0x28>
 80043e4:	681c      	ldr	r4, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	6053      	str	r3, [r2, #4]
 80043ea:	4421      	add	r1, r4
 80043ec:	6011      	str	r1, [r2, #0]
 80043ee:	e7d7      	b.n	80043a0 <_free_r+0x28>
 80043f0:	d902      	bls.n	80043f8 <_free_r+0x80>
 80043f2:	230c      	movs	r3, #12
 80043f4:	6003      	str	r3, [r0, #0]
 80043f6:	e7d3      	b.n	80043a0 <_free_r+0x28>
 80043f8:	6825      	ldr	r5, [r4, #0]
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf04      	itt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	bf04      	itt	eq
 8004408:	1949      	addeq	r1, r1, r5
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	6054      	str	r4, [r2, #4]
 800440e:	e7c7      	b.n	80043a0 <_free_r+0x28>
 8004410:	b003      	add	sp, #12
 8004412:	bd30      	pop	{r4, r5, pc}
 8004414:	200001fc 	.word	0x200001fc

08004418 <_malloc_r>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	1ccd      	adds	r5, r1, #3
 800441c:	f025 0503 	bic.w	r5, r5, #3
 8004420:	3508      	adds	r5, #8
 8004422:	2d0c      	cmp	r5, #12
 8004424:	bf38      	it	cc
 8004426:	250c      	movcc	r5, #12
 8004428:	2d00      	cmp	r5, #0
 800442a:	4606      	mov	r6, r0
 800442c:	db01      	blt.n	8004432 <_malloc_r+0x1a>
 800442e:	42a9      	cmp	r1, r5
 8004430:	d903      	bls.n	800443a <_malloc_r+0x22>
 8004432:	230c      	movs	r3, #12
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	2000      	movs	r0, #0
 8004438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443a:	f001 fb5d 	bl	8005af8 <__malloc_lock>
 800443e:	4921      	ldr	r1, [pc, #132]	; (80044c4 <_malloc_r+0xac>)
 8004440:	680a      	ldr	r2, [r1, #0]
 8004442:	4614      	mov	r4, r2
 8004444:	b99c      	cbnz	r4, 800446e <_malloc_r+0x56>
 8004446:	4f20      	ldr	r7, [pc, #128]	; (80044c8 <_malloc_r+0xb0>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b923      	cbnz	r3, 8004456 <_malloc_r+0x3e>
 800444c:	4621      	mov	r1, r4
 800444e:	4630      	mov	r0, r6
 8004450:	f000 fca6 	bl	8004da0 <_sbrk_r>
 8004454:	6038      	str	r0, [r7, #0]
 8004456:	4629      	mov	r1, r5
 8004458:	4630      	mov	r0, r6
 800445a:	f000 fca1 	bl	8004da0 <_sbrk_r>
 800445e:	1c43      	adds	r3, r0, #1
 8004460:	d123      	bne.n	80044aa <_malloc_r+0x92>
 8004462:	230c      	movs	r3, #12
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	4630      	mov	r0, r6
 8004468:	f001 fb4c 	bl	8005b04 <__malloc_unlock>
 800446c:	e7e3      	b.n	8004436 <_malloc_r+0x1e>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	1b5b      	subs	r3, r3, r5
 8004472:	d417      	bmi.n	80044a4 <_malloc_r+0x8c>
 8004474:	2b0b      	cmp	r3, #11
 8004476:	d903      	bls.n	8004480 <_malloc_r+0x68>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	441c      	add	r4, r3
 800447c:	6025      	str	r5, [r4, #0]
 800447e:	e004      	b.n	800448a <_malloc_r+0x72>
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	42a2      	cmp	r2, r4
 8004484:	bf0c      	ite	eq
 8004486:	600b      	streq	r3, [r1, #0]
 8004488:	6053      	strne	r3, [r2, #4]
 800448a:	4630      	mov	r0, r6
 800448c:	f001 fb3a 	bl	8005b04 <__malloc_unlock>
 8004490:	f104 000b 	add.w	r0, r4, #11
 8004494:	1d23      	adds	r3, r4, #4
 8004496:	f020 0007 	bic.w	r0, r0, #7
 800449a:	1ac2      	subs	r2, r0, r3
 800449c:	d0cc      	beq.n	8004438 <_malloc_r+0x20>
 800449e:	1a1b      	subs	r3, r3, r0
 80044a0:	50a3      	str	r3, [r4, r2]
 80044a2:	e7c9      	b.n	8004438 <_malloc_r+0x20>
 80044a4:	4622      	mov	r2, r4
 80044a6:	6864      	ldr	r4, [r4, #4]
 80044a8:	e7cc      	b.n	8004444 <_malloc_r+0x2c>
 80044aa:	1cc4      	adds	r4, r0, #3
 80044ac:	f024 0403 	bic.w	r4, r4, #3
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d0e3      	beq.n	800447c <_malloc_r+0x64>
 80044b4:	1a21      	subs	r1, r4, r0
 80044b6:	4630      	mov	r0, r6
 80044b8:	f000 fc72 	bl	8004da0 <_sbrk_r>
 80044bc:	3001      	adds	r0, #1
 80044be:	d1dd      	bne.n	800447c <_malloc_r+0x64>
 80044c0:	e7cf      	b.n	8004462 <_malloc_r+0x4a>
 80044c2:	bf00      	nop
 80044c4:	200001fc 	.word	0x200001fc
 80044c8:	20000200 	.word	0x20000200

080044cc <__cvt>:
 80044cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	ec55 4b10 	vmov	r4, r5, d0
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	460e      	mov	r6, r1
 80044d8:	4619      	mov	r1, r3
 80044da:	462b      	mov	r3, r5
 80044dc:	bfbb      	ittet	lt
 80044de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044e2:	461d      	movlt	r5, r3
 80044e4:	2300      	movge	r3, #0
 80044e6:	232d      	movlt	r3, #45	; 0x2d
 80044e8:	700b      	strb	r3, [r1, #0]
 80044ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044f0:	4691      	mov	r9, r2
 80044f2:	f023 0820 	bic.w	r8, r3, #32
 80044f6:	bfbc      	itt	lt
 80044f8:	4622      	movlt	r2, r4
 80044fa:	4614      	movlt	r4, r2
 80044fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004500:	d005      	beq.n	800450e <__cvt+0x42>
 8004502:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004506:	d100      	bne.n	800450a <__cvt+0x3e>
 8004508:	3601      	adds	r6, #1
 800450a:	2102      	movs	r1, #2
 800450c:	e000      	b.n	8004510 <__cvt+0x44>
 800450e:	2103      	movs	r1, #3
 8004510:	ab03      	add	r3, sp, #12
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	ab02      	add	r3, sp, #8
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	ec45 4b10 	vmov	d0, r4, r5
 800451c:	4653      	mov	r3, sl
 800451e:	4632      	mov	r2, r6
 8004520:	f000 fcfa 	bl	8004f18 <_dtoa_r>
 8004524:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004528:	4607      	mov	r7, r0
 800452a:	d102      	bne.n	8004532 <__cvt+0x66>
 800452c:	f019 0f01 	tst.w	r9, #1
 8004530:	d022      	beq.n	8004578 <__cvt+0xac>
 8004532:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004536:	eb07 0906 	add.w	r9, r7, r6
 800453a:	d110      	bne.n	800455e <__cvt+0x92>
 800453c:	783b      	ldrb	r3, [r7, #0]
 800453e:	2b30      	cmp	r3, #48	; 0x30
 8004540:	d10a      	bne.n	8004558 <__cvt+0x8c>
 8004542:	2200      	movs	r2, #0
 8004544:	2300      	movs	r3, #0
 8004546:	4620      	mov	r0, r4
 8004548:	4629      	mov	r1, r5
 800454a:	f7fc fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800454e:	b918      	cbnz	r0, 8004558 <__cvt+0x8c>
 8004550:	f1c6 0601 	rsb	r6, r6, #1
 8004554:	f8ca 6000 	str.w	r6, [sl]
 8004558:	f8da 3000 	ldr.w	r3, [sl]
 800455c:	4499      	add	r9, r3
 800455e:	2200      	movs	r2, #0
 8004560:	2300      	movs	r3, #0
 8004562:	4620      	mov	r0, r4
 8004564:	4629      	mov	r1, r5
 8004566:	f7fc faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800456a:	b108      	cbz	r0, 8004570 <__cvt+0xa4>
 800456c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004570:	2230      	movs	r2, #48	; 0x30
 8004572:	9b03      	ldr	r3, [sp, #12]
 8004574:	454b      	cmp	r3, r9
 8004576:	d307      	bcc.n	8004588 <__cvt+0xbc>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800457c:	1bdb      	subs	r3, r3, r7
 800457e:	4638      	mov	r0, r7
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	b004      	add	sp, #16
 8004584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004588:	1c59      	adds	r1, r3, #1
 800458a:	9103      	str	r1, [sp, #12]
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e7f0      	b.n	8004572 <__cvt+0xa6>

08004590 <__exponent>:
 8004590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004592:	4603      	mov	r3, r0
 8004594:	2900      	cmp	r1, #0
 8004596:	bfb8      	it	lt
 8004598:	4249      	neglt	r1, r1
 800459a:	f803 2b02 	strb.w	r2, [r3], #2
 800459e:	bfb4      	ite	lt
 80045a0:	222d      	movlt	r2, #45	; 0x2d
 80045a2:	222b      	movge	r2, #43	; 0x2b
 80045a4:	2909      	cmp	r1, #9
 80045a6:	7042      	strb	r2, [r0, #1]
 80045a8:	dd2a      	ble.n	8004600 <__exponent+0x70>
 80045aa:	f10d 0407 	add.w	r4, sp, #7
 80045ae:	46a4      	mov	ip, r4
 80045b0:	270a      	movs	r7, #10
 80045b2:	46a6      	mov	lr, r4
 80045b4:	460a      	mov	r2, r1
 80045b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80045ba:	fb07 1516 	mls	r5, r7, r6, r1
 80045be:	3530      	adds	r5, #48	; 0x30
 80045c0:	2a63      	cmp	r2, #99	; 0x63
 80045c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80045c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045ca:	4631      	mov	r1, r6
 80045cc:	dcf1      	bgt.n	80045b2 <__exponent+0x22>
 80045ce:	3130      	adds	r1, #48	; 0x30
 80045d0:	f1ae 0502 	sub.w	r5, lr, #2
 80045d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045d8:	1c44      	adds	r4, r0, #1
 80045da:	4629      	mov	r1, r5
 80045dc:	4561      	cmp	r1, ip
 80045de:	d30a      	bcc.n	80045f6 <__exponent+0x66>
 80045e0:	f10d 0209 	add.w	r2, sp, #9
 80045e4:	eba2 020e 	sub.w	r2, r2, lr
 80045e8:	4565      	cmp	r5, ip
 80045ea:	bf88      	it	hi
 80045ec:	2200      	movhi	r2, #0
 80045ee:	4413      	add	r3, r2
 80045f0:	1a18      	subs	r0, r3, r0
 80045f2:	b003      	add	sp, #12
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045fe:	e7ed      	b.n	80045dc <__exponent+0x4c>
 8004600:	2330      	movs	r3, #48	; 0x30
 8004602:	3130      	adds	r1, #48	; 0x30
 8004604:	7083      	strb	r3, [r0, #2]
 8004606:	70c1      	strb	r1, [r0, #3]
 8004608:	1d03      	adds	r3, r0, #4
 800460a:	e7f1      	b.n	80045f0 <__exponent+0x60>

0800460c <_printf_float>:
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	ed2d 8b02 	vpush	{d8}
 8004614:	b08d      	sub	sp, #52	; 0x34
 8004616:	460c      	mov	r4, r1
 8004618:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800461c:	4616      	mov	r6, r2
 800461e:	461f      	mov	r7, r3
 8004620:	4605      	mov	r5, r0
 8004622:	f001 fa65 	bl	8005af0 <_localeconv_r>
 8004626:	f8d0 a000 	ldr.w	sl, [r0]
 800462a:	4650      	mov	r0, sl
 800462c:	f7fb fdd0 	bl	80001d0 <strlen>
 8004630:	2300      	movs	r3, #0
 8004632:	930a      	str	r3, [sp, #40]	; 0x28
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	9305      	str	r3, [sp, #20]
 8004638:	f8d8 3000 	ldr.w	r3, [r8]
 800463c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004640:	3307      	adds	r3, #7
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	f103 0208 	add.w	r2, r3, #8
 800464a:	f8c8 2000 	str.w	r2, [r8]
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004656:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800465a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800465e:	9307      	str	r3, [sp, #28]
 8004660:	f8cd 8018 	str.w	r8, [sp, #24]
 8004664:	ee08 0a10 	vmov	s16, r0
 8004668:	4b9f      	ldr	r3, [pc, #636]	; (80048e8 <_printf_float+0x2dc>)
 800466a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800466e:	f04f 32ff 	mov.w	r2, #4294967295
 8004672:	f7fc fa5b 	bl	8000b2c <__aeabi_dcmpun>
 8004676:	bb88      	cbnz	r0, 80046dc <_printf_float+0xd0>
 8004678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800467c:	4b9a      	ldr	r3, [pc, #616]	; (80048e8 <_printf_float+0x2dc>)
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	f7fc fa35 	bl	8000af0 <__aeabi_dcmple>
 8004686:	bb48      	cbnz	r0, 80046dc <_printf_float+0xd0>
 8004688:	2200      	movs	r2, #0
 800468a:	2300      	movs	r3, #0
 800468c:	4640      	mov	r0, r8
 800468e:	4649      	mov	r1, r9
 8004690:	f7fc fa24 	bl	8000adc <__aeabi_dcmplt>
 8004694:	b110      	cbz	r0, 800469c <_printf_float+0x90>
 8004696:	232d      	movs	r3, #45	; 0x2d
 8004698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469c:	4b93      	ldr	r3, [pc, #588]	; (80048ec <_printf_float+0x2e0>)
 800469e:	4894      	ldr	r0, [pc, #592]	; (80048f0 <_printf_float+0x2e4>)
 80046a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80046a4:	bf94      	ite	ls
 80046a6:	4698      	movls	r8, r3
 80046a8:	4680      	movhi	r8, r0
 80046aa:	2303      	movs	r3, #3
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	9b05      	ldr	r3, [sp, #20]
 80046b0:	f023 0204 	bic.w	r2, r3, #4
 80046b4:	6022      	str	r2, [r4, #0]
 80046b6:	f04f 0900 	mov.w	r9, #0
 80046ba:	9700      	str	r7, [sp, #0]
 80046bc:	4633      	mov	r3, r6
 80046be:	aa0b      	add	r2, sp, #44	; 0x2c
 80046c0:	4621      	mov	r1, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 f9d8 	bl	8004a78 <_printf_common>
 80046c8:	3001      	adds	r0, #1
 80046ca:	f040 8090 	bne.w	80047ee <_printf_float+0x1e2>
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295
 80046d2:	b00d      	add	sp, #52	; 0x34
 80046d4:	ecbd 8b02 	vpop	{d8}
 80046d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fc fa22 	bl	8000b2c <__aeabi_dcmpun>
 80046e8:	b140      	cbz	r0, 80046fc <_printf_float+0xf0>
 80046ea:	464b      	mov	r3, r9
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bfbc      	itt	lt
 80046f0:	232d      	movlt	r3, #45	; 0x2d
 80046f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046f6:	487f      	ldr	r0, [pc, #508]	; (80048f4 <_printf_float+0x2e8>)
 80046f8:	4b7f      	ldr	r3, [pc, #508]	; (80048f8 <_printf_float+0x2ec>)
 80046fa:	e7d1      	b.n	80046a0 <_printf_float+0x94>
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004702:	9206      	str	r2, [sp, #24]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	d13f      	bne.n	8004788 <_printf_float+0x17c>
 8004708:	2306      	movs	r3, #6
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	9b05      	ldr	r3, [sp, #20]
 800470e:	6861      	ldr	r1, [r4, #4]
 8004710:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004714:	2300      	movs	r3, #0
 8004716:	9303      	str	r3, [sp, #12]
 8004718:	ab0a      	add	r3, sp, #40	; 0x28
 800471a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800471e:	ab09      	add	r3, sp, #36	; 0x24
 8004720:	ec49 8b10 	vmov	d0, r8, r9
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6022      	str	r2, [r4, #0]
 8004728:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800472c:	4628      	mov	r0, r5
 800472e:	f7ff fecd 	bl	80044cc <__cvt>
 8004732:	9b06      	ldr	r3, [sp, #24]
 8004734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004736:	2b47      	cmp	r3, #71	; 0x47
 8004738:	4680      	mov	r8, r0
 800473a:	d108      	bne.n	800474e <_printf_float+0x142>
 800473c:	1cc8      	adds	r0, r1, #3
 800473e:	db02      	blt.n	8004746 <_printf_float+0x13a>
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	4299      	cmp	r1, r3
 8004744:	dd41      	ble.n	80047ca <_printf_float+0x1be>
 8004746:	f1ab 0b02 	sub.w	fp, fp, #2
 800474a:	fa5f fb8b 	uxtb.w	fp, fp
 800474e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004752:	d820      	bhi.n	8004796 <_printf_float+0x18a>
 8004754:	3901      	subs	r1, #1
 8004756:	465a      	mov	r2, fp
 8004758:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800475c:	9109      	str	r1, [sp, #36]	; 0x24
 800475e:	f7ff ff17 	bl	8004590 <__exponent>
 8004762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004764:	1813      	adds	r3, r2, r0
 8004766:	2a01      	cmp	r2, #1
 8004768:	4681      	mov	r9, r0
 800476a:	6123      	str	r3, [r4, #16]
 800476c:	dc02      	bgt.n	8004774 <_printf_float+0x168>
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	07d2      	lsls	r2, r2, #31
 8004772:	d501      	bpl.n	8004778 <_printf_float+0x16c>
 8004774:	3301      	adds	r3, #1
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800477c:	2b00      	cmp	r3, #0
 800477e:	d09c      	beq.n	80046ba <_printf_float+0xae>
 8004780:	232d      	movs	r3, #45	; 0x2d
 8004782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004786:	e798      	b.n	80046ba <_printf_float+0xae>
 8004788:	9a06      	ldr	r2, [sp, #24]
 800478a:	2a47      	cmp	r2, #71	; 0x47
 800478c:	d1be      	bne.n	800470c <_printf_float+0x100>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1bc      	bne.n	800470c <_printf_float+0x100>
 8004792:	2301      	movs	r3, #1
 8004794:	e7b9      	b.n	800470a <_printf_float+0xfe>
 8004796:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800479a:	d118      	bne.n	80047ce <_printf_float+0x1c2>
 800479c:	2900      	cmp	r1, #0
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	dd0b      	ble.n	80047ba <_printf_float+0x1ae>
 80047a2:	6121      	str	r1, [r4, #16]
 80047a4:	b913      	cbnz	r3, 80047ac <_printf_float+0x1a0>
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	07d0      	lsls	r0, r2, #31
 80047aa:	d502      	bpl.n	80047b2 <_printf_float+0x1a6>
 80047ac:	3301      	adds	r3, #1
 80047ae:	440b      	add	r3, r1
 80047b0:	6123      	str	r3, [r4, #16]
 80047b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047b4:	f04f 0900 	mov.w	r9, #0
 80047b8:	e7de      	b.n	8004778 <_printf_float+0x16c>
 80047ba:	b913      	cbnz	r3, 80047c2 <_printf_float+0x1b6>
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	07d2      	lsls	r2, r2, #31
 80047c0:	d501      	bpl.n	80047c6 <_printf_float+0x1ba>
 80047c2:	3302      	adds	r3, #2
 80047c4:	e7f4      	b.n	80047b0 <_printf_float+0x1a4>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e7f2      	b.n	80047b0 <_printf_float+0x1a4>
 80047ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d0:	4299      	cmp	r1, r3
 80047d2:	db05      	blt.n	80047e0 <_printf_float+0x1d4>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	6121      	str	r1, [r4, #16]
 80047d8:	07d8      	lsls	r0, r3, #31
 80047da:	d5ea      	bpl.n	80047b2 <_printf_float+0x1a6>
 80047dc:	1c4b      	adds	r3, r1, #1
 80047de:	e7e7      	b.n	80047b0 <_printf_float+0x1a4>
 80047e0:	2900      	cmp	r1, #0
 80047e2:	bfd4      	ite	le
 80047e4:	f1c1 0202 	rsble	r2, r1, #2
 80047e8:	2201      	movgt	r2, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	e7e0      	b.n	80047b0 <_printf_float+0x1a4>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	055a      	lsls	r2, r3, #21
 80047f2:	d407      	bmi.n	8004804 <_printf_float+0x1f8>
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	4642      	mov	r2, r8
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	d12c      	bne.n	800485c <_printf_float+0x250>
 8004802:	e764      	b.n	80046ce <_printf_float+0xc2>
 8004804:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004808:	f240 80e0 	bls.w	80049cc <_printf_float+0x3c0>
 800480c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004810:	2200      	movs	r2, #0
 8004812:	2300      	movs	r3, #0
 8004814:	f7fc f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8004818:	2800      	cmp	r0, #0
 800481a:	d034      	beq.n	8004886 <_printf_float+0x27a>
 800481c:	4a37      	ldr	r2, [pc, #220]	; (80048fc <_printf_float+0x2f0>)
 800481e:	2301      	movs	r3, #1
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	47b8      	blx	r7
 8004826:	3001      	adds	r0, #1
 8004828:	f43f af51 	beq.w	80046ce <_printf_float+0xc2>
 800482c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004830:	429a      	cmp	r2, r3
 8004832:	db02      	blt.n	800483a <_printf_float+0x22e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	07d8      	lsls	r0, r3, #31
 8004838:	d510      	bpl.n	800485c <_printf_float+0x250>
 800483a:	ee18 3a10 	vmov	r3, s16
 800483e:	4652      	mov	r2, sl
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f af41 	beq.w	80046ce <_printf_float+0xc2>
 800484c:	f04f 0800 	mov.w	r8, #0
 8004850:	f104 091a 	add.w	r9, r4, #26
 8004854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	4543      	cmp	r3, r8
 800485a:	dc09      	bgt.n	8004870 <_printf_float+0x264>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	079b      	lsls	r3, r3, #30
 8004860:	f100 8105 	bmi.w	8004a6e <_printf_float+0x462>
 8004864:	68e0      	ldr	r0, [r4, #12]
 8004866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004868:	4298      	cmp	r0, r3
 800486a:	bfb8      	it	lt
 800486c:	4618      	movlt	r0, r3
 800486e:	e730      	b.n	80046d2 <_printf_float+0xc6>
 8004870:	2301      	movs	r3, #1
 8004872:	464a      	mov	r2, r9
 8004874:	4631      	mov	r1, r6
 8004876:	4628      	mov	r0, r5
 8004878:	47b8      	blx	r7
 800487a:	3001      	adds	r0, #1
 800487c:	f43f af27 	beq.w	80046ce <_printf_float+0xc2>
 8004880:	f108 0801 	add.w	r8, r8, #1
 8004884:	e7e6      	b.n	8004854 <_printf_float+0x248>
 8004886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc39      	bgt.n	8004900 <_printf_float+0x2f4>
 800488c:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <_printf_float+0x2f0>)
 800488e:	2301      	movs	r3, #1
 8004890:	4631      	mov	r1, r6
 8004892:	4628      	mov	r0, r5
 8004894:	47b8      	blx	r7
 8004896:	3001      	adds	r0, #1
 8004898:	f43f af19 	beq.w	80046ce <_printf_float+0xc2>
 800489c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a0:	4313      	orrs	r3, r2
 80048a2:	d102      	bne.n	80048aa <_printf_float+0x29e>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	07d9      	lsls	r1, r3, #31
 80048a8:	d5d8      	bpl.n	800485c <_printf_float+0x250>
 80048aa:	ee18 3a10 	vmov	r3, s16
 80048ae:	4652      	mov	r2, sl
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f af09 	beq.w	80046ce <_printf_float+0xc2>
 80048bc:	f04f 0900 	mov.w	r9, #0
 80048c0:	f104 0a1a 	add.w	sl, r4, #26
 80048c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c6:	425b      	negs	r3, r3
 80048c8:	454b      	cmp	r3, r9
 80048ca:	dc01      	bgt.n	80048d0 <_printf_float+0x2c4>
 80048cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ce:	e792      	b.n	80047f6 <_printf_float+0x1ea>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4652      	mov	r2, sl
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f aef7 	beq.w	80046ce <_printf_float+0xc2>
 80048e0:	f109 0901 	add.w	r9, r9, #1
 80048e4:	e7ee      	b.n	80048c4 <_printf_float+0x2b8>
 80048e6:	bf00      	nop
 80048e8:	7fefffff 	.word	0x7fefffff
 80048ec:	080071b4 	.word	0x080071b4
 80048f0:	080071b8 	.word	0x080071b8
 80048f4:	080071c0 	.word	0x080071c0
 80048f8:	080071bc 	.word	0x080071bc
 80048fc:	080071c4 	.word	0x080071c4
 8004900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004904:	429a      	cmp	r2, r3
 8004906:	bfa8      	it	ge
 8004908:	461a      	movge	r2, r3
 800490a:	2a00      	cmp	r2, #0
 800490c:	4691      	mov	r9, r2
 800490e:	dc37      	bgt.n	8004980 <_printf_float+0x374>
 8004910:	f04f 0b00 	mov.w	fp, #0
 8004914:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004918:	f104 021a 	add.w	r2, r4, #26
 800491c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800491e:	9305      	str	r3, [sp, #20]
 8004920:	eba3 0309 	sub.w	r3, r3, r9
 8004924:	455b      	cmp	r3, fp
 8004926:	dc33      	bgt.n	8004990 <_printf_float+0x384>
 8004928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800492c:	429a      	cmp	r2, r3
 800492e:	db3b      	blt.n	80049a8 <_printf_float+0x39c>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	07da      	lsls	r2, r3, #31
 8004934:	d438      	bmi.n	80049a8 <_printf_float+0x39c>
 8004936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004938:	9b05      	ldr	r3, [sp, #20]
 800493a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	eba2 0901 	sub.w	r9, r2, r1
 8004942:	4599      	cmp	r9, r3
 8004944:	bfa8      	it	ge
 8004946:	4699      	movge	r9, r3
 8004948:	f1b9 0f00 	cmp.w	r9, #0
 800494c:	dc35      	bgt.n	80049ba <_printf_float+0x3ae>
 800494e:	f04f 0800 	mov.w	r8, #0
 8004952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004956:	f104 0a1a 	add.w	sl, r4, #26
 800495a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	eba3 0309 	sub.w	r3, r3, r9
 8004964:	4543      	cmp	r3, r8
 8004966:	f77f af79 	ble.w	800485c <_printf_float+0x250>
 800496a:	2301      	movs	r3, #1
 800496c:	4652      	mov	r2, sl
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	47b8      	blx	r7
 8004974:	3001      	adds	r0, #1
 8004976:	f43f aeaa 	beq.w	80046ce <_printf_float+0xc2>
 800497a:	f108 0801 	add.w	r8, r8, #1
 800497e:	e7ec      	b.n	800495a <_printf_float+0x34e>
 8004980:	4613      	mov	r3, r2
 8004982:	4631      	mov	r1, r6
 8004984:	4642      	mov	r2, r8
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	d1c0      	bne.n	8004910 <_printf_float+0x304>
 800498e:	e69e      	b.n	80046ce <_printf_float+0xc2>
 8004990:	2301      	movs	r3, #1
 8004992:	4631      	mov	r1, r6
 8004994:	4628      	mov	r0, r5
 8004996:	9205      	str	r2, [sp, #20]
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	f43f ae97 	beq.w	80046ce <_printf_float+0xc2>
 80049a0:	9a05      	ldr	r2, [sp, #20]
 80049a2:	f10b 0b01 	add.w	fp, fp, #1
 80049a6:	e7b9      	b.n	800491c <_printf_float+0x310>
 80049a8:	ee18 3a10 	vmov	r3, s16
 80049ac:	4652      	mov	r2, sl
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	47b8      	blx	r7
 80049b4:	3001      	adds	r0, #1
 80049b6:	d1be      	bne.n	8004936 <_printf_float+0x32a>
 80049b8:	e689      	b.n	80046ce <_printf_float+0xc2>
 80049ba:	9a05      	ldr	r2, [sp, #20]
 80049bc:	464b      	mov	r3, r9
 80049be:	4442      	add	r2, r8
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	47b8      	blx	r7
 80049c6:	3001      	adds	r0, #1
 80049c8:	d1c1      	bne.n	800494e <_printf_float+0x342>
 80049ca:	e680      	b.n	80046ce <_printf_float+0xc2>
 80049cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ce:	2a01      	cmp	r2, #1
 80049d0:	dc01      	bgt.n	80049d6 <_printf_float+0x3ca>
 80049d2:	07db      	lsls	r3, r3, #31
 80049d4:	d538      	bpl.n	8004a48 <_printf_float+0x43c>
 80049d6:	2301      	movs	r3, #1
 80049d8:	4642      	mov	r2, r8
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	47b8      	blx	r7
 80049e0:	3001      	adds	r0, #1
 80049e2:	f43f ae74 	beq.w	80046ce <_printf_float+0xc2>
 80049e6:	ee18 3a10 	vmov	r3, s16
 80049ea:	4652      	mov	r2, sl
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b8      	blx	r7
 80049f2:	3001      	adds	r0, #1
 80049f4:	f43f ae6b 	beq.w	80046ce <_printf_float+0xc2>
 80049f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049fc:	2200      	movs	r2, #0
 80049fe:	2300      	movs	r3, #0
 8004a00:	f7fc f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a04:	b9d8      	cbnz	r0, 8004a3e <_printf_float+0x432>
 8004a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a08:	f108 0201 	add.w	r2, r8, #1
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	d10e      	bne.n	8004a36 <_printf_float+0x42a>
 8004a18:	e659      	b.n	80046ce <_printf_float+0xc2>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4652      	mov	r2, sl
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f ae52 	beq.w	80046ce <_printf_float+0xc2>
 8004a2a:	f108 0801 	add.w	r8, r8, #1
 8004a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	4543      	cmp	r3, r8
 8004a34:	dcf1      	bgt.n	8004a1a <_printf_float+0x40e>
 8004a36:	464b      	mov	r3, r9
 8004a38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a3c:	e6dc      	b.n	80047f8 <_printf_float+0x1ec>
 8004a3e:	f04f 0800 	mov.w	r8, #0
 8004a42:	f104 0a1a 	add.w	sl, r4, #26
 8004a46:	e7f2      	b.n	8004a2e <_printf_float+0x422>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4642      	mov	r2, r8
 8004a4c:	e7df      	b.n	8004a0e <_printf_float+0x402>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	464a      	mov	r2, r9
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f ae38 	beq.w	80046ce <_printf_float+0xc2>
 8004a5e:	f108 0801 	add.w	r8, r8, #1
 8004a62:	68e3      	ldr	r3, [r4, #12]
 8004a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a66:	1a5b      	subs	r3, r3, r1
 8004a68:	4543      	cmp	r3, r8
 8004a6a:	dcf0      	bgt.n	8004a4e <_printf_float+0x442>
 8004a6c:	e6fa      	b.n	8004864 <_printf_float+0x258>
 8004a6e:	f04f 0800 	mov.w	r8, #0
 8004a72:	f104 0919 	add.w	r9, r4, #25
 8004a76:	e7f4      	b.n	8004a62 <_printf_float+0x456>

08004a78 <_printf_common>:
 8004a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	4699      	mov	r9, r3
 8004a80:	688a      	ldr	r2, [r1, #8]
 8004a82:	690b      	ldr	r3, [r1, #16]
 8004a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	bfb8      	it	lt
 8004a8c:	4613      	movlt	r3, r2
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a94:	4607      	mov	r7, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	b10a      	cbz	r2, 8004a9e <_printf_common+0x26>
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	6033      	str	r3, [r6, #0]
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	0699      	lsls	r1, r3, #26
 8004aa2:	bf42      	ittt	mi
 8004aa4:	6833      	ldrmi	r3, [r6, #0]
 8004aa6:	3302      	addmi	r3, #2
 8004aa8:	6033      	strmi	r3, [r6, #0]
 8004aaa:	6825      	ldr	r5, [r4, #0]
 8004aac:	f015 0506 	ands.w	r5, r5, #6
 8004ab0:	d106      	bne.n	8004ac0 <_printf_common+0x48>
 8004ab2:	f104 0a19 	add.w	sl, r4, #25
 8004ab6:	68e3      	ldr	r3, [r4, #12]
 8004ab8:	6832      	ldr	r2, [r6, #0]
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	dc26      	bgt.n	8004b0e <_printf_common+0x96>
 8004ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ac4:	1e13      	subs	r3, r2, #0
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	bf18      	it	ne
 8004aca:	2301      	movne	r3, #1
 8004acc:	0692      	lsls	r2, r2, #26
 8004ace:	d42b      	bmi.n	8004b28 <_printf_common+0xb0>
 8004ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	47c0      	blx	r8
 8004ada:	3001      	adds	r0, #1
 8004adc:	d01e      	beq.n	8004b1c <_printf_common+0xa4>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	68e5      	ldr	r5, [r4, #12]
 8004ae2:	6832      	ldr	r2, [r6, #0]
 8004ae4:	f003 0306 	and.w	r3, r3, #6
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	bf08      	it	eq
 8004aec:	1aad      	subeq	r5, r5, r2
 8004aee:	68a3      	ldr	r3, [r4, #8]
 8004af0:	6922      	ldr	r2, [r4, #16]
 8004af2:	bf0c      	ite	eq
 8004af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af8:	2500      	movne	r5, #0
 8004afa:	4293      	cmp	r3, r2
 8004afc:	bfc4      	itt	gt
 8004afe:	1a9b      	subgt	r3, r3, r2
 8004b00:	18ed      	addgt	r5, r5, r3
 8004b02:	2600      	movs	r6, #0
 8004b04:	341a      	adds	r4, #26
 8004b06:	42b5      	cmp	r5, r6
 8004b08:	d11a      	bne.n	8004b40 <_printf_common+0xc8>
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e008      	b.n	8004b20 <_printf_common+0xa8>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4652      	mov	r2, sl
 8004b12:	4649      	mov	r1, r9
 8004b14:	4638      	mov	r0, r7
 8004b16:	47c0      	blx	r8
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d103      	bne.n	8004b24 <_printf_common+0xac>
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b24:	3501      	adds	r5, #1
 8004b26:	e7c6      	b.n	8004ab6 <_printf_common+0x3e>
 8004b28:	18e1      	adds	r1, r4, r3
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	2030      	movs	r0, #48	; 0x30
 8004b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b32:	4422      	add	r2, r4
 8004b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	e7c7      	b.n	8004ad0 <_printf_common+0x58>
 8004b40:	2301      	movs	r3, #1
 8004b42:	4622      	mov	r2, r4
 8004b44:	4649      	mov	r1, r9
 8004b46:	4638      	mov	r0, r7
 8004b48:	47c0      	blx	r8
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d0e6      	beq.n	8004b1c <_printf_common+0xa4>
 8004b4e:	3601      	adds	r6, #1
 8004b50:	e7d9      	b.n	8004b06 <_printf_common+0x8e>
	...

08004b54 <_printf_i>:
 8004b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	460c      	mov	r4, r1
 8004b5a:	4691      	mov	r9, r2
 8004b5c:	7e27      	ldrb	r7, [r4, #24]
 8004b5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b60:	2f78      	cmp	r7, #120	; 0x78
 8004b62:	4680      	mov	r8, r0
 8004b64:	469a      	mov	sl, r3
 8004b66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b6a:	d807      	bhi.n	8004b7c <_printf_i+0x28>
 8004b6c:	2f62      	cmp	r7, #98	; 0x62
 8004b6e:	d80a      	bhi.n	8004b86 <_printf_i+0x32>
 8004b70:	2f00      	cmp	r7, #0
 8004b72:	f000 80d8 	beq.w	8004d26 <_printf_i+0x1d2>
 8004b76:	2f58      	cmp	r7, #88	; 0x58
 8004b78:	f000 80a3 	beq.w	8004cc2 <_printf_i+0x16e>
 8004b7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b84:	e03a      	b.n	8004bfc <_printf_i+0xa8>
 8004b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b8a:	2b15      	cmp	r3, #21
 8004b8c:	d8f6      	bhi.n	8004b7c <_printf_i+0x28>
 8004b8e:	a001      	add	r0, pc, #4	; (adr r0, 8004b94 <_printf_i+0x40>)
 8004b90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b94:	08004bed 	.word	0x08004bed
 8004b98:	08004c01 	.word	0x08004c01
 8004b9c:	08004b7d 	.word	0x08004b7d
 8004ba0:	08004b7d 	.word	0x08004b7d
 8004ba4:	08004b7d 	.word	0x08004b7d
 8004ba8:	08004b7d 	.word	0x08004b7d
 8004bac:	08004c01 	.word	0x08004c01
 8004bb0:	08004b7d 	.word	0x08004b7d
 8004bb4:	08004b7d 	.word	0x08004b7d
 8004bb8:	08004b7d 	.word	0x08004b7d
 8004bbc:	08004b7d 	.word	0x08004b7d
 8004bc0:	08004d0d 	.word	0x08004d0d
 8004bc4:	08004c31 	.word	0x08004c31
 8004bc8:	08004cef 	.word	0x08004cef
 8004bcc:	08004b7d 	.word	0x08004b7d
 8004bd0:	08004b7d 	.word	0x08004b7d
 8004bd4:	08004d2f 	.word	0x08004d2f
 8004bd8:	08004b7d 	.word	0x08004b7d
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004b7d 	.word	0x08004b7d
 8004be4:	08004b7d 	.word	0x08004b7d
 8004be8:	08004cf7 	.word	0x08004cf7
 8004bec:	680b      	ldr	r3, [r1, #0]
 8004bee:	1d1a      	adds	r2, r3, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	600a      	str	r2, [r1, #0]
 8004bf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0a3      	b.n	8004d48 <_printf_i+0x1f4>
 8004c00:	6825      	ldr	r5, [r4, #0]
 8004c02:	6808      	ldr	r0, [r1, #0]
 8004c04:	062e      	lsls	r6, r5, #24
 8004c06:	f100 0304 	add.w	r3, r0, #4
 8004c0a:	d50a      	bpl.n	8004c22 <_printf_i+0xce>
 8004c0c:	6805      	ldr	r5, [r0, #0]
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	da03      	bge.n	8004c1c <_printf_i+0xc8>
 8004c14:	232d      	movs	r3, #45	; 0x2d
 8004c16:	426d      	negs	r5, r5
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1c:	485e      	ldr	r0, [pc, #376]	; (8004d98 <_printf_i+0x244>)
 8004c1e:	230a      	movs	r3, #10
 8004c20:	e019      	b.n	8004c56 <_printf_i+0x102>
 8004c22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c26:	6805      	ldr	r5, [r0, #0]
 8004c28:	600b      	str	r3, [r1, #0]
 8004c2a:	bf18      	it	ne
 8004c2c:	b22d      	sxthne	r5, r5
 8004c2e:	e7ef      	b.n	8004c10 <_printf_i+0xbc>
 8004c30:	680b      	ldr	r3, [r1, #0]
 8004c32:	6825      	ldr	r5, [r4, #0]
 8004c34:	1d18      	adds	r0, r3, #4
 8004c36:	6008      	str	r0, [r1, #0]
 8004c38:	0628      	lsls	r0, r5, #24
 8004c3a:	d501      	bpl.n	8004c40 <_printf_i+0xec>
 8004c3c:	681d      	ldr	r5, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <_printf_i+0xf2>
 8004c40:	0669      	lsls	r1, r5, #25
 8004c42:	d5fb      	bpl.n	8004c3c <_printf_i+0xe8>
 8004c44:	881d      	ldrh	r5, [r3, #0]
 8004c46:	4854      	ldr	r0, [pc, #336]	; (8004d98 <_printf_i+0x244>)
 8004c48:	2f6f      	cmp	r7, #111	; 0x6f
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2308      	moveq	r3, #8
 8004c4e:	230a      	movne	r3, #10
 8004c50:	2100      	movs	r1, #0
 8004c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c56:	6866      	ldr	r6, [r4, #4]
 8004c58:	60a6      	str	r6, [r4, #8]
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	bfa2      	ittt	ge
 8004c5e:	6821      	ldrge	r1, [r4, #0]
 8004c60:	f021 0104 	bicge.w	r1, r1, #4
 8004c64:	6021      	strge	r1, [r4, #0]
 8004c66:	b90d      	cbnz	r5, 8004c6c <_printf_i+0x118>
 8004c68:	2e00      	cmp	r6, #0
 8004c6a:	d04d      	beq.n	8004d08 <_printf_i+0x1b4>
 8004c6c:	4616      	mov	r6, r2
 8004c6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c72:	fb03 5711 	mls	r7, r3, r1, r5
 8004c76:	5dc7      	ldrb	r7, [r0, r7]
 8004c78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c7c:	462f      	mov	r7, r5
 8004c7e:	42bb      	cmp	r3, r7
 8004c80:	460d      	mov	r5, r1
 8004c82:	d9f4      	bls.n	8004c6e <_printf_i+0x11a>
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d10b      	bne.n	8004ca0 <_printf_i+0x14c>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	07df      	lsls	r7, r3, #31
 8004c8c:	d508      	bpl.n	8004ca0 <_printf_i+0x14c>
 8004c8e:	6923      	ldr	r3, [r4, #16]
 8004c90:	6861      	ldr	r1, [r4, #4]
 8004c92:	4299      	cmp	r1, r3
 8004c94:	bfde      	ittt	le
 8004c96:	2330      	movle	r3, #48	; 0x30
 8004c98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ca0:	1b92      	subs	r2, r2, r6
 8004ca2:	6122      	str	r2, [r4, #16]
 8004ca4:	f8cd a000 	str.w	sl, [sp]
 8004ca8:	464b      	mov	r3, r9
 8004caa:	aa03      	add	r2, sp, #12
 8004cac:	4621      	mov	r1, r4
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f7ff fee2 	bl	8004a78 <_printf_common>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d14c      	bne.n	8004d52 <_printf_i+0x1fe>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	b004      	add	sp, #16
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc2:	4835      	ldr	r0, [pc, #212]	; (8004d98 <_printf_i+0x244>)
 8004cc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	680e      	ldr	r6, [r1, #0]
 8004ccc:	061f      	lsls	r7, r3, #24
 8004cce:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cd2:	600e      	str	r6, [r1, #0]
 8004cd4:	d514      	bpl.n	8004d00 <_printf_i+0x1ac>
 8004cd6:	07d9      	lsls	r1, r3, #31
 8004cd8:	bf44      	itt	mi
 8004cda:	f043 0320 	orrmi.w	r3, r3, #32
 8004cde:	6023      	strmi	r3, [r4, #0]
 8004ce0:	b91d      	cbnz	r5, 8004cea <_printf_i+0x196>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f023 0320 	bic.w	r3, r3, #32
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	2310      	movs	r3, #16
 8004cec:	e7b0      	b.n	8004c50 <_printf_i+0xfc>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	f043 0320 	orr.w	r3, r3, #32
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	2378      	movs	r3, #120	; 0x78
 8004cf8:	4828      	ldr	r0, [pc, #160]	; (8004d9c <_printf_i+0x248>)
 8004cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cfe:	e7e3      	b.n	8004cc8 <_printf_i+0x174>
 8004d00:	065e      	lsls	r6, r3, #25
 8004d02:	bf48      	it	mi
 8004d04:	b2ad      	uxthmi	r5, r5
 8004d06:	e7e6      	b.n	8004cd6 <_printf_i+0x182>
 8004d08:	4616      	mov	r6, r2
 8004d0a:	e7bb      	b.n	8004c84 <_printf_i+0x130>
 8004d0c:	680b      	ldr	r3, [r1, #0]
 8004d0e:	6826      	ldr	r6, [r4, #0]
 8004d10:	6960      	ldr	r0, [r4, #20]
 8004d12:	1d1d      	adds	r5, r3, #4
 8004d14:	600d      	str	r5, [r1, #0]
 8004d16:	0635      	lsls	r5, r6, #24
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	d501      	bpl.n	8004d20 <_printf_i+0x1cc>
 8004d1c:	6018      	str	r0, [r3, #0]
 8004d1e:	e002      	b.n	8004d26 <_printf_i+0x1d2>
 8004d20:	0671      	lsls	r1, r6, #25
 8004d22:	d5fb      	bpl.n	8004d1c <_printf_i+0x1c8>
 8004d24:	8018      	strh	r0, [r3, #0]
 8004d26:	2300      	movs	r3, #0
 8004d28:	6123      	str	r3, [r4, #16]
 8004d2a:	4616      	mov	r6, r2
 8004d2c:	e7ba      	b.n	8004ca4 <_printf_i+0x150>
 8004d2e:	680b      	ldr	r3, [r1, #0]
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	600a      	str	r2, [r1, #0]
 8004d34:	681e      	ldr	r6, [r3, #0]
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f7fb fa50 	bl	80001e0 <memchr>
 8004d40:	b108      	cbz	r0, 8004d46 <_printf_i+0x1f2>
 8004d42:	1b80      	subs	r0, r0, r6
 8004d44:	6060      	str	r0, [r4, #4]
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d50:	e7a8      	b.n	8004ca4 <_printf_i+0x150>
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	4632      	mov	r2, r6
 8004d56:	4649      	mov	r1, r9
 8004d58:	4640      	mov	r0, r8
 8004d5a:	47d0      	blx	sl
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d0ab      	beq.n	8004cb8 <_printf_i+0x164>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	079b      	lsls	r3, r3, #30
 8004d64:	d413      	bmi.n	8004d8e <_printf_i+0x23a>
 8004d66:	68e0      	ldr	r0, [r4, #12]
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	4298      	cmp	r0, r3
 8004d6c:	bfb8      	it	lt
 8004d6e:	4618      	movlt	r0, r3
 8004d70:	e7a4      	b.n	8004cbc <_printf_i+0x168>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4632      	mov	r2, r6
 8004d76:	4649      	mov	r1, r9
 8004d78:	4640      	mov	r0, r8
 8004d7a:	47d0      	blx	sl
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d09b      	beq.n	8004cb8 <_printf_i+0x164>
 8004d80:	3501      	adds	r5, #1
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	9903      	ldr	r1, [sp, #12]
 8004d86:	1a5b      	subs	r3, r3, r1
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dcf2      	bgt.n	8004d72 <_printf_i+0x21e>
 8004d8c:	e7eb      	b.n	8004d66 <_printf_i+0x212>
 8004d8e:	2500      	movs	r5, #0
 8004d90:	f104 0619 	add.w	r6, r4, #25
 8004d94:	e7f5      	b.n	8004d82 <_printf_i+0x22e>
 8004d96:	bf00      	nop
 8004d98:	080071c6 	.word	0x080071c6
 8004d9c:	080071d7 	.word	0x080071d7

08004da0 <_sbrk_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d06      	ldr	r5, [pc, #24]	; (8004dbc <_sbrk_r+0x1c>)
 8004da4:	2300      	movs	r3, #0
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	f7fc fbea 	bl	8001584 <_sbrk>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_sbrk_r+0x1a>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_sbrk_r+0x1a>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20000464 	.word	0x20000464

08004dc0 <siprintf>:
 8004dc0:	b40e      	push	{r1, r2, r3}
 8004dc2:	b500      	push	{lr}
 8004dc4:	b09c      	sub	sp, #112	; 0x70
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd0:	4809      	ldr	r0, [pc, #36]	; (8004df8 <siprintf+0x38>)
 8004dd2:	9107      	str	r1, [sp, #28]
 8004dd4:	9104      	str	r1, [sp, #16]
 8004dd6:	4909      	ldr	r1, [pc, #36]	; (8004dfc <siprintf+0x3c>)
 8004dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	f001 fa7c 	bl	80062e0 <_svfiprintf_r>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	b01c      	add	sp, #112	; 0x70
 8004df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df4:	b003      	add	sp, #12
 8004df6:	4770      	bx	lr
 8004df8:	2000000c 	.word	0x2000000c
 8004dfc:	ffff0208 	.word	0xffff0208

08004e00 <quorem>:
 8004e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	6903      	ldr	r3, [r0, #16]
 8004e06:	690c      	ldr	r4, [r1, #16]
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	f2c0 8081 	blt.w	8004f12 <quorem+0x112>
 8004e10:	3c01      	subs	r4, #1
 8004e12:	f101 0814 	add.w	r8, r1, #20
 8004e16:	f100 0514 	add.w	r5, r0, #20
 8004e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e38:	d331      	bcc.n	8004e9e <quorem+0x9e>
 8004e3a:	f04f 0e00 	mov.w	lr, #0
 8004e3e:	4640      	mov	r0, r8
 8004e40:	46ac      	mov	ip, r5
 8004e42:	46f2      	mov	sl, lr
 8004e44:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e48:	b293      	uxth	r3, r2
 8004e4a:	fb06 e303 	mla	r3, r6, r3, lr
 8004e4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ebaa 0303 	sub.w	r3, sl, r3
 8004e58:	0c12      	lsrs	r2, r2, #16
 8004e5a:	f8dc a000 	ldr.w	sl, [ip]
 8004e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8004e62:	fa13 f38a 	uxtah	r3, r3, sl
 8004e66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e6a:	fa1f fa82 	uxth.w	sl, r2
 8004e6e:	f8dc 2000 	ldr.w	r2, [ip]
 8004e72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004e76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e80:	4581      	cmp	r9, r0
 8004e82:	f84c 3b04 	str.w	r3, [ip], #4
 8004e86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e8a:	d2db      	bcs.n	8004e44 <quorem+0x44>
 8004e8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e90:	b92b      	cbnz	r3, 8004e9e <quorem+0x9e>
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	429d      	cmp	r5, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	d32e      	bcc.n	8004efa <quorem+0xfa>
 8004e9c:	613c      	str	r4, [r7, #16]
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f001 f8b4 	bl	800600c <__mcmp>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	db24      	blt.n	8004ef2 <quorem+0xf2>
 8004ea8:	3601      	adds	r6, #1
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f04f 0c00 	mov.w	ip, #0
 8004eb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8004eb8:	b293      	uxth	r3, r2
 8004eba:	ebac 0303 	sub.w	r3, ip, r3
 8004ebe:	0c12      	lsrs	r2, r2, #16
 8004ec0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed2:	45c1      	cmp	r9, r8
 8004ed4:	f840 3b04 	str.w	r3, [r0], #4
 8004ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004edc:	d2e8      	bcs.n	8004eb0 <quorem+0xb0>
 8004ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee6:	b922      	cbnz	r2, 8004ef2 <quorem+0xf2>
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	429d      	cmp	r5, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	d30a      	bcc.n	8004f06 <quorem+0x106>
 8004ef0:	613c      	str	r4, [r7, #16]
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	b003      	add	sp, #12
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	d1cc      	bne.n	8004e9c <quorem+0x9c>
 8004f02:	3c01      	subs	r4, #1
 8004f04:	e7c7      	b.n	8004e96 <quorem+0x96>
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <quorem+0xf0>
 8004f0e:	3c01      	subs	r4, #1
 8004f10:	e7eb      	b.n	8004eea <quorem+0xea>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e7ee      	b.n	8004ef4 <quorem+0xf4>
	...

08004f18 <_dtoa_r>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	ed2d 8b02 	vpush	{d8}
 8004f20:	ec57 6b10 	vmov	r6, r7, d0
 8004f24:	b095      	sub	sp, #84	; 0x54
 8004f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f2c:	9105      	str	r1, [sp, #20]
 8004f2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f32:	4604      	mov	r4, r0
 8004f34:	9209      	str	r2, [sp, #36]	; 0x24
 8004f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f38:	b975      	cbnz	r5, 8004f58 <_dtoa_r+0x40>
 8004f3a:	2010      	movs	r0, #16
 8004f3c:	f7ff f9f6 	bl	800432c <malloc>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6260      	str	r0, [r4, #36]	; 0x24
 8004f44:	b920      	cbnz	r0, 8004f50 <_dtoa_r+0x38>
 8004f46:	4bb2      	ldr	r3, [pc, #712]	; (8005210 <_dtoa_r+0x2f8>)
 8004f48:	21ea      	movs	r1, #234	; 0xea
 8004f4a:	48b2      	ldr	r0, [pc, #712]	; (8005214 <_dtoa_r+0x2fc>)
 8004f4c:	f001 fac8 	bl	80064e0 <__assert_func>
 8004f50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f54:	6005      	str	r5, [r0, #0]
 8004f56:	60c5      	str	r5, [r0, #12]
 8004f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	b151      	cbz	r1, 8004f74 <_dtoa_r+0x5c>
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	604a      	str	r2, [r1, #4]
 8004f62:	2301      	movs	r3, #1
 8004f64:	4093      	lsls	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 fe11 	bl	8005b90 <_Bfree>
 8004f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	1e3b      	subs	r3, r7, #0
 8004f76:	bfb9      	ittee	lt
 8004f78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f7c:	9303      	strlt	r3, [sp, #12]
 8004f7e:	2300      	movge	r3, #0
 8004f80:	f8c8 3000 	strge.w	r3, [r8]
 8004f84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004f88:	4ba3      	ldr	r3, [pc, #652]	; (8005218 <_dtoa_r+0x300>)
 8004f8a:	bfbc      	itt	lt
 8004f8c:	2201      	movlt	r2, #1
 8004f8e:	f8c8 2000 	strlt.w	r2, [r8]
 8004f92:	ea33 0309 	bics.w	r3, r3, r9
 8004f96:	d11b      	bne.n	8004fd0 <_dtoa_r+0xb8>
 8004f98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fa4:	4333      	orrs	r3, r6
 8004fa6:	f000 857a 	beq.w	8005a9e <_dtoa_r+0xb86>
 8004faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fac:	b963      	cbnz	r3, 8004fc8 <_dtoa_r+0xb0>
 8004fae:	4b9b      	ldr	r3, [pc, #620]	; (800521c <_dtoa_r+0x304>)
 8004fb0:	e024      	b.n	8004ffc <_dtoa_r+0xe4>
 8004fb2:	4b9b      	ldr	r3, [pc, #620]	; (8005220 <_dtoa_r+0x308>)
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	9800      	ldr	r0, [sp, #0]
 8004fbe:	b015      	add	sp, #84	; 0x54
 8004fc0:	ecbd 8b02 	vpop	{d8}
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	4b94      	ldr	r3, [pc, #592]	; (800521c <_dtoa_r+0x304>)
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	3303      	adds	r3, #3
 8004fce:	e7f3      	b.n	8004fb8 <_dtoa_r+0xa0>
 8004fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	ec51 0b17 	vmov	r0, r1, d7
 8004fda:	2300      	movs	r3, #0
 8004fdc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004fe0:	f7fb fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	b158      	cbz	r0, 8005000 <_dtoa_r+0xe8>
 8004fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fea:	2301      	movs	r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8551 	beq.w	8005a98 <_dtoa_r+0xb80>
 8004ff6:	488b      	ldr	r0, [pc, #556]	; (8005224 <_dtoa_r+0x30c>)
 8004ff8:	6018      	str	r0, [r3, #0]
 8004ffa:	1e43      	subs	r3, r0, #1
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	e7dd      	b.n	8004fbc <_dtoa_r+0xa4>
 8005000:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005004:	aa12      	add	r2, sp, #72	; 0x48
 8005006:	a913      	add	r1, sp, #76	; 0x4c
 8005008:	4620      	mov	r0, r4
 800500a:	f001 f8a3 	bl	8006154 <__d2b>
 800500e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005012:	4683      	mov	fp, r0
 8005014:	2d00      	cmp	r5, #0
 8005016:	d07c      	beq.n	8005112 <_dtoa_r+0x1fa>
 8005018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800501e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005022:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005026:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800502a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800502e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005032:	4b7d      	ldr	r3, [pc, #500]	; (8005228 <_dtoa_r+0x310>)
 8005034:	2200      	movs	r2, #0
 8005036:	4630      	mov	r0, r6
 8005038:	4639      	mov	r1, r7
 800503a:	f7fb f925 	bl	8000288 <__aeabi_dsub>
 800503e:	a36e      	add	r3, pc, #440	; (adr r3, 80051f8 <_dtoa_r+0x2e0>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fad8 	bl	80005f8 <__aeabi_dmul>
 8005048:	a36d      	add	r3, pc, #436	; (adr r3, 8005200 <_dtoa_r+0x2e8>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f7fb f91d 	bl	800028c <__adddf3>
 8005052:	4606      	mov	r6, r0
 8005054:	4628      	mov	r0, r5
 8005056:	460f      	mov	r7, r1
 8005058:	f7fb fa64 	bl	8000524 <__aeabi_i2d>
 800505c:	a36a      	add	r3, pc, #424	; (adr r3, 8005208 <_dtoa_r+0x2f0>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb fac9 	bl	80005f8 <__aeabi_dmul>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4630      	mov	r0, r6
 800506c:	4639      	mov	r1, r7
 800506e:	f7fb f90d 	bl	800028c <__adddf3>
 8005072:	4606      	mov	r6, r0
 8005074:	460f      	mov	r7, r1
 8005076:	f7fb fd6f 	bl	8000b58 <__aeabi_d2iz>
 800507a:	2200      	movs	r2, #0
 800507c:	4682      	mov	sl, r0
 800507e:	2300      	movs	r3, #0
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb fd2a 	bl	8000adc <__aeabi_dcmplt>
 8005088:	b148      	cbz	r0, 800509e <_dtoa_r+0x186>
 800508a:	4650      	mov	r0, sl
 800508c:	f7fb fa4a 	bl	8000524 <__aeabi_i2d>
 8005090:	4632      	mov	r2, r6
 8005092:	463b      	mov	r3, r7
 8005094:	f7fb fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005098:	b908      	cbnz	r0, 800509e <_dtoa_r+0x186>
 800509a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800509e:	f1ba 0f16 	cmp.w	sl, #22
 80050a2:	d854      	bhi.n	800514e <_dtoa_r+0x236>
 80050a4:	4b61      	ldr	r3, [pc, #388]	; (800522c <_dtoa_r+0x314>)
 80050a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050b2:	f7fb fd13 	bl	8000adc <__aeabi_dcmplt>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d04b      	beq.n	8005152 <_dtoa_r+0x23a>
 80050ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050be:	2300      	movs	r3, #0
 80050c0:	930e      	str	r3, [sp, #56]	; 0x38
 80050c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050c4:	1b5d      	subs	r5, r3, r5
 80050c6:	1e6b      	subs	r3, r5, #1
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	bf43      	ittte	mi
 80050cc:	2300      	movmi	r3, #0
 80050ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80050d2:	9304      	strmi	r3, [sp, #16]
 80050d4:	f04f 0800 	movpl.w	r8, #0
 80050d8:	f1ba 0f00 	cmp.w	sl, #0
 80050dc:	db3b      	blt.n	8005156 <_dtoa_r+0x23e>
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80050e4:	4453      	add	r3, sl
 80050e6:	9304      	str	r3, [sp, #16]
 80050e8:	2300      	movs	r3, #0
 80050ea:	9306      	str	r3, [sp, #24]
 80050ec:	9b05      	ldr	r3, [sp, #20]
 80050ee:	2b09      	cmp	r3, #9
 80050f0:	d869      	bhi.n	80051c6 <_dtoa_r+0x2ae>
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	bfc4      	itt	gt
 80050f6:	3b04      	subgt	r3, #4
 80050f8:	9305      	strgt	r3, [sp, #20]
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	f1a3 0302 	sub.w	r3, r3, #2
 8005100:	bfcc      	ite	gt
 8005102:	2500      	movgt	r5, #0
 8005104:	2501      	movle	r5, #1
 8005106:	2b03      	cmp	r3, #3
 8005108:	d869      	bhi.n	80051de <_dtoa_r+0x2c6>
 800510a:	e8df f003 	tbb	[pc, r3]
 800510e:	4e2c      	.short	0x4e2c
 8005110:	5a4c      	.short	0x5a4c
 8005112:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005116:	441d      	add	r5, r3
 8005118:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800511c:	2b20      	cmp	r3, #32
 800511e:	bfc1      	itttt	gt
 8005120:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005124:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005128:	fa09 f303 	lslgt.w	r3, r9, r3
 800512c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005130:	bfda      	itte	le
 8005132:	f1c3 0320 	rsble	r3, r3, #32
 8005136:	fa06 f003 	lslle.w	r0, r6, r3
 800513a:	4318      	orrgt	r0, r3
 800513c:	f7fb f9e2 	bl	8000504 <__aeabi_ui2d>
 8005140:	2301      	movs	r3, #1
 8005142:	4606      	mov	r6, r0
 8005144:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005148:	3d01      	subs	r5, #1
 800514a:	9310      	str	r3, [sp, #64]	; 0x40
 800514c:	e771      	b.n	8005032 <_dtoa_r+0x11a>
 800514e:	2301      	movs	r3, #1
 8005150:	e7b6      	b.n	80050c0 <_dtoa_r+0x1a8>
 8005152:	900e      	str	r0, [sp, #56]	; 0x38
 8005154:	e7b5      	b.n	80050c2 <_dtoa_r+0x1aa>
 8005156:	f1ca 0300 	rsb	r3, sl, #0
 800515a:	9306      	str	r3, [sp, #24]
 800515c:	2300      	movs	r3, #0
 800515e:	eba8 080a 	sub.w	r8, r8, sl
 8005162:	930d      	str	r3, [sp, #52]	; 0x34
 8005164:	e7c2      	b.n	80050ec <_dtoa_r+0x1d4>
 8005166:	2300      	movs	r3, #0
 8005168:	9308      	str	r3, [sp, #32]
 800516a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	dc39      	bgt.n	80051e4 <_dtoa_r+0x2cc>
 8005170:	f04f 0901 	mov.w	r9, #1
 8005174:	f8cd 9004 	str.w	r9, [sp, #4]
 8005178:	464b      	mov	r3, r9
 800517a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800517e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005180:	2200      	movs	r2, #0
 8005182:	6042      	str	r2, [r0, #4]
 8005184:	2204      	movs	r2, #4
 8005186:	f102 0614 	add.w	r6, r2, #20
 800518a:	429e      	cmp	r6, r3
 800518c:	6841      	ldr	r1, [r0, #4]
 800518e:	d92f      	bls.n	80051f0 <_dtoa_r+0x2d8>
 8005190:	4620      	mov	r0, r4
 8005192:	f000 fcbd 	bl	8005b10 <_Balloc>
 8005196:	9000      	str	r0, [sp, #0]
 8005198:	2800      	cmp	r0, #0
 800519a:	d14b      	bne.n	8005234 <_dtoa_r+0x31c>
 800519c:	4b24      	ldr	r3, [pc, #144]	; (8005230 <_dtoa_r+0x318>)
 800519e:	4602      	mov	r2, r0
 80051a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051a4:	e6d1      	b.n	8004f4a <_dtoa_r+0x32>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e7de      	b.n	8005168 <_dtoa_r+0x250>
 80051aa:	2300      	movs	r3, #0
 80051ac:	9308      	str	r3, [sp, #32]
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	eb0a 0903 	add.w	r9, sl, r3
 80051b4:	f109 0301 	add.w	r3, r9, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	bfb8      	it	lt
 80051be:	2301      	movlt	r3, #1
 80051c0:	e7dd      	b.n	800517e <_dtoa_r+0x266>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e7f2      	b.n	80051ac <_dtoa_r+0x294>
 80051c6:	2501      	movs	r5, #1
 80051c8:	2300      	movs	r3, #0
 80051ca:	9305      	str	r3, [sp, #20]
 80051cc:	9508      	str	r5, [sp, #32]
 80051ce:	f04f 39ff 	mov.w	r9, #4294967295
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80051d8:	2312      	movs	r3, #18
 80051da:	9209      	str	r2, [sp, #36]	; 0x24
 80051dc:	e7cf      	b.n	800517e <_dtoa_r+0x266>
 80051de:	2301      	movs	r3, #1
 80051e0:	9308      	str	r3, [sp, #32]
 80051e2:	e7f4      	b.n	80051ce <_dtoa_r+0x2b6>
 80051e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051ec:	464b      	mov	r3, r9
 80051ee:	e7c6      	b.n	800517e <_dtoa_r+0x266>
 80051f0:	3101      	adds	r1, #1
 80051f2:	6041      	str	r1, [r0, #4]
 80051f4:	0052      	lsls	r2, r2, #1
 80051f6:	e7c6      	b.n	8005186 <_dtoa_r+0x26e>
 80051f8:	636f4361 	.word	0x636f4361
 80051fc:	3fd287a7 	.word	0x3fd287a7
 8005200:	8b60c8b3 	.word	0x8b60c8b3
 8005204:	3fc68a28 	.word	0x3fc68a28
 8005208:	509f79fb 	.word	0x509f79fb
 800520c:	3fd34413 	.word	0x3fd34413
 8005210:	080071f5 	.word	0x080071f5
 8005214:	0800720c 	.word	0x0800720c
 8005218:	7ff00000 	.word	0x7ff00000
 800521c:	080071f1 	.word	0x080071f1
 8005220:	080071e8 	.word	0x080071e8
 8005224:	080071c5 	.word	0x080071c5
 8005228:	3ff80000 	.word	0x3ff80000
 800522c:	08007308 	.word	0x08007308
 8005230:	0800726b 	.word	0x0800726b
 8005234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005236:	9a00      	ldr	r2, [sp, #0]
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	9b01      	ldr	r3, [sp, #4]
 800523c:	2b0e      	cmp	r3, #14
 800523e:	f200 80ad 	bhi.w	800539c <_dtoa_r+0x484>
 8005242:	2d00      	cmp	r5, #0
 8005244:	f000 80aa 	beq.w	800539c <_dtoa_r+0x484>
 8005248:	f1ba 0f00 	cmp.w	sl, #0
 800524c:	dd36      	ble.n	80052bc <_dtoa_r+0x3a4>
 800524e:	4ac3      	ldr	r2, [pc, #780]	; (800555c <_dtoa_r+0x644>)
 8005250:	f00a 030f 	and.w	r3, sl, #15
 8005254:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005258:	ed93 7b00 	vldr	d7, [r3]
 800525c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005260:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005264:	eeb0 8a47 	vmov.f32	s16, s14
 8005268:	eef0 8a67 	vmov.f32	s17, s15
 800526c:	d016      	beq.n	800529c <_dtoa_r+0x384>
 800526e:	4bbc      	ldr	r3, [pc, #752]	; (8005560 <_dtoa_r+0x648>)
 8005270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005278:	f7fb fae8 	bl	800084c <__aeabi_ddiv>
 800527c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005280:	f007 070f 	and.w	r7, r7, #15
 8005284:	2503      	movs	r5, #3
 8005286:	4eb6      	ldr	r6, [pc, #728]	; (8005560 <_dtoa_r+0x648>)
 8005288:	b957      	cbnz	r7, 80052a0 <_dtoa_r+0x388>
 800528a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800528e:	ec53 2b18 	vmov	r2, r3, d8
 8005292:	f7fb fadb 	bl	800084c <__aeabi_ddiv>
 8005296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800529a:	e029      	b.n	80052f0 <_dtoa_r+0x3d8>
 800529c:	2502      	movs	r5, #2
 800529e:	e7f2      	b.n	8005286 <_dtoa_r+0x36e>
 80052a0:	07f9      	lsls	r1, r7, #31
 80052a2:	d508      	bpl.n	80052b6 <_dtoa_r+0x39e>
 80052a4:	ec51 0b18 	vmov	r0, r1, d8
 80052a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052ac:	f7fb f9a4 	bl	80005f8 <__aeabi_dmul>
 80052b0:	ec41 0b18 	vmov	d8, r0, r1
 80052b4:	3501      	adds	r5, #1
 80052b6:	107f      	asrs	r7, r7, #1
 80052b8:	3608      	adds	r6, #8
 80052ba:	e7e5      	b.n	8005288 <_dtoa_r+0x370>
 80052bc:	f000 80a6 	beq.w	800540c <_dtoa_r+0x4f4>
 80052c0:	f1ca 0600 	rsb	r6, sl, #0
 80052c4:	4ba5      	ldr	r3, [pc, #660]	; (800555c <_dtoa_r+0x644>)
 80052c6:	4fa6      	ldr	r7, [pc, #664]	; (8005560 <_dtoa_r+0x648>)
 80052c8:	f006 020f 	and.w	r2, r6, #15
 80052cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052d8:	f7fb f98e 	bl	80005f8 <__aeabi_dmul>
 80052dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052e0:	1136      	asrs	r6, r6, #4
 80052e2:	2300      	movs	r3, #0
 80052e4:	2502      	movs	r5, #2
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	f040 8085 	bne.w	80053f6 <_dtoa_r+0x4de>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1d2      	bne.n	8005296 <_dtoa_r+0x37e>
 80052f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 808c 	beq.w	8005410 <_dtoa_r+0x4f8>
 80052f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052fc:	4b99      	ldr	r3, [pc, #612]	; (8005564 <_dtoa_r+0x64c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	4630      	mov	r0, r6
 8005302:	4639      	mov	r1, r7
 8005304:	f7fb fbea 	bl	8000adc <__aeabi_dcmplt>
 8005308:	2800      	cmp	r0, #0
 800530a:	f000 8081 	beq.w	8005410 <_dtoa_r+0x4f8>
 800530e:	9b01      	ldr	r3, [sp, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d07d      	beq.n	8005410 <_dtoa_r+0x4f8>
 8005314:	f1b9 0f00 	cmp.w	r9, #0
 8005318:	dd3c      	ble.n	8005394 <_dtoa_r+0x47c>
 800531a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800531e:	9307      	str	r3, [sp, #28]
 8005320:	2200      	movs	r2, #0
 8005322:	4b91      	ldr	r3, [pc, #580]	; (8005568 <_dtoa_r+0x650>)
 8005324:	4630      	mov	r0, r6
 8005326:	4639      	mov	r1, r7
 8005328:	f7fb f966 	bl	80005f8 <__aeabi_dmul>
 800532c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005330:	3501      	adds	r5, #1
 8005332:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005336:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800533a:	4628      	mov	r0, r5
 800533c:	f7fb f8f2 	bl	8000524 <__aeabi_i2d>
 8005340:	4632      	mov	r2, r6
 8005342:	463b      	mov	r3, r7
 8005344:	f7fb f958 	bl	80005f8 <__aeabi_dmul>
 8005348:	4b88      	ldr	r3, [pc, #544]	; (800556c <_dtoa_r+0x654>)
 800534a:	2200      	movs	r2, #0
 800534c:	f7fa ff9e 	bl	800028c <__adddf3>
 8005350:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005358:	9303      	str	r3, [sp, #12]
 800535a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d15c      	bne.n	800541a <_dtoa_r+0x502>
 8005360:	4b83      	ldr	r3, [pc, #524]	; (8005570 <_dtoa_r+0x658>)
 8005362:	2200      	movs	r2, #0
 8005364:	4630      	mov	r0, r6
 8005366:	4639      	mov	r1, r7
 8005368:	f7fa ff8e 	bl	8000288 <__aeabi_dsub>
 800536c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005370:	4606      	mov	r6, r0
 8005372:	460f      	mov	r7, r1
 8005374:	f7fb fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8005378:	2800      	cmp	r0, #0
 800537a:	f040 8296 	bne.w	80058aa <_dtoa_r+0x992>
 800537e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005382:	4630      	mov	r0, r6
 8005384:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005388:	4639      	mov	r1, r7
 800538a:	f7fb fba7 	bl	8000adc <__aeabi_dcmplt>
 800538e:	2800      	cmp	r0, #0
 8005390:	f040 8288 	bne.w	80058a4 <_dtoa_r+0x98c>
 8005394:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005398:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800539c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f2c0 8158 	blt.w	8005654 <_dtoa_r+0x73c>
 80053a4:	f1ba 0f0e 	cmp.w	sl, #14
 80053a8:	f300 8154 	bgt.w	8005654 <_dtoa_r+0x73c>
 80053ac:	4b6b      	ldr	r3, [pc, #428]	; (800555c <_dtoa_r+0x644>)
 80053ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f280 80e3 	bge.w	8005584 <_dtoa_r+0x66c>
 80053be:	9b01      	ldr	r3, [sp, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f300 80df 	bgt.w	8005584 <_dtoa_r+0x66c>
 80053c6:	f040 826d 	bne.w	80058a4 <_dtoa_r+0x98c>
 80053ca:	4b69      	ldr	r3, [pc, #420]	; (8005570 <_dtoa_r+0x658>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fb f911 	bl	80005f8 <__aeabi_dmul>
 80053d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053da:	f7fb fb93 	bl	8000b04 <__aeabi_dcmpge>
 80053de:	9e01      	ldr	r6, [sp, #4]
 80053e0:	4637      	mov	r7, r6
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f040 8243 	bne.w	800586e <_dtoa_r+0x956>
 80053e8:	9d00      	ldr	r5, [sp, #0]
 80053ea:	2331      	movs	r3, #49	; 0x31
 80053ec:	f805 3b01 	strb.w	r3, [r5], #1
 80053f0:	f10a 0a01 	add.w	sl, sl, #1
 80053f4:	e23f      	b.n	8005876 <_dtoa_r+0x95e>
 80053f6:	07f2      	lsls	r2, r6, #31
 80053f8:	d505      	bpl.n	8005406 <_dtoa_r+0x4ee>
 80053fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053fe:	f7fb f8fb 	bl	80005f8 <__aeabi_dmul>
 8005402:	3501      	adds	r5, #1
 8005404:	2301      	movs	r3, #1
 8005406:	1076      	asrs	r6, r6, #1
 8005408:	3708      	adds	r7, #8
 800540a:	e76c      	b.n	80052e6 <_dtoa_r+0x3ce>
 800540c:	2502      	movs	r5, #2
 800540e:	e76f      	b.n	80052f0 <_dtoa_r+0x3d8>
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	f8cd a01c 	str.w	sl, [sp, #28]
 8005416:	930c      	str	r3, [sp, #48]	; 0x30
 8005418:	e78d      	b.n	8005336 <_dtoa_r+0x41e>
 800541a:	9900      	ldr	r1, [sp, #0]
 800541c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800541e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005420:	4b4e      	ldr	r3, [pc, #312]	; (800555c <_dtoa_r+0x644>)
 8005422:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005426:	4401      	add	r1, r0
 8005428:	9102      	str	r1, [sp, #8]
 800542a:	9908      	ldr	r1, [sp, #32]
 800542c:	eeb0 8a47 	vmov.f32	s16, s14
 8005430:	eef0 8a67 	vmov.f32	s17, s15
 8005434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005438:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800543c:	2900      	cmp	r1, #0
 800543e:	d045      	beq.n	80054cc <_dtoa_r+0x5b4>
 8005440:	494c      	ldr	r1, [pc, #304]	; (8005574 <_dtoa_r+0x65c>)
 8005442:	2000      	movs	r0, #0
 8005444:	f7fb fa02 	bl	800084c <__aeabi_ddiv>
 8005448:	ec53 2b18 	vmov	r2, r3, d8
 800544c:	f7fa ff1c 	bl	8000288 <__aeabi_dsub>
 8005450:	9d00      	ldr	r5, [sp, #0]
 8005452:	ec41 0b18 	vmov	d8, r0, r1
 8005456:	4639      	mov	r1, r7
 8005458:	4630      	mov	r0, r6
 800545a:	f7fb fb7d 	bl	8000b58 <__aeabi_d2iz>
 800545e:	900c      	str	r0, [sp, #48]	; 0x30
 8005460:	f7fb f860 	bl	8000524 <__aeabi_i2d>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4630      	mov	r0, r6
 800546a:	4639      	mov	r1, r7
 800546c:	f7fa ff0c 	bl	8000288 <__aeabi_dsub>
 8005470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005472:	3330      	adds	r3, #48	; 0x30
 8005474:	f805 3b01 	strb.w	r3, [r5], #1
 8005478:	ec53 2b18 	vmov	r2, r3, d8
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	f7fb fb2c 	bl	8000adc <__aeabi_dcmplt>
 8005484:	2800      	cmp	r0, #0
 8005486:	d165      	bne.n	8005554 <_dtoa_r+0x63c>
 8005488:	4632      	mov	r2, r6
 800548a:	463b      	mov	r3, r7
 800548c:	4935      	ldr	r1, [pc, #212]	; (8005564 <_dtoa_r+0x64c>)
 800548e:	2000      	movs	r0, #0
 8005490:	f7fa fefa 	bl	8000288 <__aeabi_dsub>
 8005494:	ec53 2b18 	vmov	r2, r3, d8
 8005498:	f7fb fb20 	bl	8000adc <__aeabi_dcmplt>
 800549c:	2800      	cmp	r0, #0
 800549e:	f040 80b9 	bne.w	8005614 <_dtoa_r+0x6fc>
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	429d      	cmp	r5, r3
 80054a6:	f43f af75 	beq.w	8005394 <_dtoa_r+0x47c>
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <_dtoa_r+0x650>)
 80054ac:	ec51 0b18 	vmov	r0, r1, d8
 80054b0:	2200      	movs	r2, #0
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <_dtoa_r+0x650>)
 80054b8:	ec41 0b18 	vmov	d8, r0, r1
 80054bc:	2200      	movs	r2, #0
 80054be:	4630      	mov	r0, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	f7fb f899 	bl	80005f8 <__aeabi_dmul>
 80054c6:	4606      	mov	r6, r0
 80054c8:	460f      	mov	r7, r1
 80054ca:	e7c4      	b.n	8005456 <_dtoa_r+0x53e>
 80054cc:	ec51 0b17 	vmov	r0, r1, d7
 80054d0:	f7fb f892 	bl	80005f8 <__aeabi_dmul>
 80054d4:	9b02      	ldr	r3, [sp, #8]
 80054d6:	9d00      	ldr	r5, [sp, #0]
 80054d8:	930c      	str	r3, [sp, #48]	; 0x30
 80054da:	ec41 0b18 	vmov	d8, r0, r1
 80054de:	4639      	mov	r1, r7
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7fb fb39 	bl	8000b58 <__aeabi_d2iz>
 80054e6:	9011      	str	r0, [sp, #68]	; 0x44
 80054e8:	f7fb f81c 	bl	8000524 <__aeabi_i2d>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fa fec8 	bl	8000288 <__aeabi_dsub>
 80054f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054fa:	3330      	adds	r3, #48	; 0x30
 80054fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	429d      	cmp	r5, r3
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	d134      	bne.n	8005578 <_dtoa_r+0x660>
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <_dtoa_r+0x65c>)
 8005510:	ec51 0b18 	vmov	r0, r1, d8
 8005514:	f7fa feba 	bl	800028c <__adddf3>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	f7fb fafa 	bl	8000b18 <__aeabi_dcmpgt>
 8005524:	2800      	cmp	r0, #0
 8005526:	d175      	bne.n	8005614 <_dtoa_r+0x6fc>
 8005528:	ec53 2b18 	vmov	r2, r3, d8
 800552c:	4911      	ldr	r1, [pc, #68]	; (8005574 <_dtoa_r+0x65c>)
 800552e:	2000      	movs	r0, #0
 8005530:	f7fa feaa 	bl	8000288 <__aeabi_dsub>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb face 	bl	8000adc <__aeabi_dcmplt>
 8005540:	2800      	cmp	r0, #0
 8005542:	f43f af27 	beq.w	8005394 <_dtoa_r+0x47c>
 8005546:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005548:	1e6b      	subs	r3, r5, #1
 800554a:	930c      	str	r3, [sp, #48]	; 0x30
 800554c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d0f8      	beq.n	8005546 <_dtoa_r+0x62e>
 8005554:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005558:	e04a      	b.n	80055f0 <_dtoa_r+0x6d8>
 800555a:	bf00      	nop
 800555c:	08007308 	.word	0x08007308
 8005560:	080072e0 	.word	0x080072e0
 8005564:	3ff00000 	.word	0x3ff00000
 8005568:	40240000 	.word	0x40240000
 800556c:	401c0000 	.word	0x401c0000
 8005570:	40140000 	.word	0x40140000
 8005574:	3fe00000 	.word	0x3fe00000
 8005578:	4baf      	ldr	r3, [pc, #700]	; (8005838 <_dtoa_r+0x920>)
 800557a:	f7fb f83d 	bl	80005f8 <__aeabi_dmul>
 800557e:	4606      	mov	r6, r0
 8005580:	460f      	mov	r7, r1
 8005582:	e7ac      	b.n	80054de <_dtoa_r+0x5c6>
 8005584:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005588:	9d00      	ldr	r5, [sp, #0]
 800558a:	4642      	mov	r2, r8
 800558c:	464b      	mov	r3, r9
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fb f95b 	bl	800084c <__aeabi_ddiv>
 8005596:	f7fb fadf 	bl	8000b58 <__aeabi_d2iz>
 800559a:	9002      	str	r0, [sp, #8]
 800559c:	f7fa ffc2 	bl	8000524 <__aeabi_i2d>
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	f7fb f828 	bl	80005f8 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4630      	mov	r0, r6
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fa fe6a 	bl	8000288 <__aeabi_dsub>
 80055b4:	9e02      	ldr	r6, [sp, #8]
 80055b6:	9f01      	ldr	r7, [sp, #4]
 80055b8:	3630      	adds	r6, #48	; 0x30
 80055ba:	f805 6b01 	strb.w	r6, [r5], #1
 80055be:	9e00      	ldr	r6, [sp, #0]
 80055c0:	1bae      	subs	r6, r5, r6
 80055c2:	42b7      	cmp	r7, r6
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	d137      	bne.n	800563a <_dtoa_r+0x722>
 80055ca:	f7fa fe5f 	bl	800028c <__adddf3>
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	4606      	mov	r6, r0
 80055d4:	460f      	mov	r7, r1
 80055d6:	f7fb fa9f 	bl	8000b18 <__aeabi_dcmpgt>
 80055da:	b9c8      	cbnz	r0, 8005610 <_dtoa_r+0x6f8>
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	f7fb fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 80055e8:	b110      	cbz	r0, 80055f0 <_dtoa_r+0x6d8>
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	07d9      	lsls	r1, r3, #31
 80055ee:	d40f      	bmi.n	8005610 <_dtoa_r+0x6f8>
 80055f0:	4620      	mov	r0, r4
 80055f2:	4659      	mov	r1, fp
 80055f4:	f000 facc 	bl	8005b90 <_Bfree>
 80055f8:	2300      	movs	r3, #0
 80055fa:	702b      	strb	r3, [r5, #0]
 80055fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055fe:	f10a 0001 	add.w	r0, sl, #1
 8005602:	6018      	str	r0, [r3, #0]
 8005604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005606:	2b00      	cmp	r3, #0
 8005608:	f43f acd8 	beq.w	8004fbc <_dtoa_r+0xa4>
 800560c:	601d      	str	r5, [r3, #0]
 800560e:	e4d5      	b.n	8004fbc <_dtoa_r+0xa4>
 8005610:	f8cd a01c 	str.w	sl, [sp, #28]
 8005614:	462b      	mov	r3, r5
 8005616:	461d      	mov	r5, r3
 8005618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800561c:	2a39      	cmp	r2, #57	; 0x39
 800561e:	d108      	bne.n	8005632 <_dtoa_r+0x71a>
 8005620:	9a00      	ldr	r2, [sp, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d1f7      	bne.n	8005616 <_dtoa_r+0x6fe>
 8005626:	9a07      	ldr	r2, [sp, #28]
 8005628:	9900      	ldr	r1, [sp, #0]
 800562a:	3201      	adds	r2, #1
 800562c:	9207      	str	r2, [sp, #28]
 800562e:	2230      	movs	r2, #48	; 0x30
 8005630:	700a      	strb	r2, [r1, #0]
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	3201      	adds	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e78c      	b.n	8005554 <_dtoa_r+0x63c>
 800563a:	4b7f      	ldr	r3, [pc, #508]	; (8005838 <_dtoa_r+0x920>)
 800563c:	2200      	movs	r2, #0
 800563e:	f7fa ffdb 	bl	80005f8 <__aeabi_dmul>
 8005642:	2200      	movs	r2, #0
 8005644:	2300      	movs	r3, #0
 8005646:	4606      	mov	r6, r0
 8005648:	460f      	mov	r7, r1
 800564a:	f7fb fa3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800564e:	2800      	cmp	r0, #0
 8005650:	d09b      	beq.n	800558a <_dtoa_r+0x672>
 8005652:	e7cd      	b.n	80055f0 <_dtoa_r+0x6d8>
 8005654:	9a08      	ldr	r2, [sp, #32]
 8005656:	2a00      	cmp	r2, #0
 8005658:	f000 80c4 	beq.w	80057e4 <_dtoa_r+0x8cc>
 800565c:	9a05      	ldr	r2, [sp, #20]
 800565e:	2a01      	cmp	r2, #1
 8005660:	f300 80a8 	bgt.w	80057b4 <_dtoa_r+0x89c>
 8005664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005666:	2a00      	cmp	r2, #0
 8005668:	f000 80a0 	beq.w	80057ac <_dtoa_r+0x894>
 800566c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005670:	9e06      	ldr	r6, [sp, #24]
 8005672:	4645      	mov	r5, r8
 8005674:	9a04      	ldr	r2, [sp, #16]
 8005676:	2101      	movs	r1, #1
 8005678:	441a      	add	r2, r3
 800567a:	4620      	mov	r0, r4
 800567c:	4498      	add	r8, r3
 800567e:	9204      	str	r2, [sp, #16]
 8005680:	f000 fb42 	bl	8005d08 <__i2b>
 8005684:	4607      	mov	r7, r0
 8005686:	2d00      	cmp	r5, #0
 8005688:	dd0b      	ble.n	80056a2 <_dtoa_r+0x78a>
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dd08      	ble.n	80056a2 <_dtoa_r+0x78a>
 8005690:	42ab      	cmp	r3, r5
 8005692:	9a04      	ldr	r2, [sp, #16]
 8005694:	bfa8      	it	ge
 8005696:	462b      	movge	r3, r5
 8005698:	eba8 0803 	sub.w	r8, r8, r3
 800569c:	1aed      	subs	r5, r5, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	9b06      	ldr	r3, [sp, #24]
 80056a4:	b1fb      	cbz	r3, 80056e6 <_dtoa_r+0x7ce>
 80056a6:	9b08      	ldr	r3, [sp, #32]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 809f 	beq.w	80057ec <_dtoa_r+0x8d4>
 80056ae:	2e00      	cmp	r6, #0
 80056b0:	dd11      	ble.n	80056d6 <_dtoa_r+0x7be>
 80056b2:	4639      	mov	r1, r7
 80056b4:	4632      	mov	r2, r6
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fbe2 	bl	8005e80 <__pow5mult>
 80056bc:	465a      	mov	r2, fp
 80056be:	4601      	mov	r1, r0
 80056c0:	4607      	mov	r7, r0
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fb36 	bl	8005d34 <__multiply>
 80056c8:	4659      	mov	r1, fp
 80056ca:	9007      	str	r0, [sp, #28]
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fa5f 	bl	8005b90 <_Bfree>
 80056d2:	9b07      	ldr	r3, [sp, #28]
 80056d4:	469b      	mov	fp, r3
 80056d6:	9b06      	ldr	r3, [sp, #24]
 80056d8:	1b9a      	subs	r2, r3, r6
 80056da:	d004      	beq.n	80056e6 <_dtoa_r+0x7ce>
 80056dc:	4659      	mov	r1, fp
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 fbce 	bl	8005e80 <__pow5mult>
 80056e4:	4683      	mov	fp, r0
 80056e6:	2101      	movs	r1, #1
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 fb0d 	bl	8005d08 <__i2b>
 80056ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	4606      	mov	r6, r0
 80056f4:	dd7c      	ble.n	80057f0 <_dtoa_r+0x8d8>
 80056f6:	461a      	mov	r2, r3
 80056f8:	4601      	mov	r1, r0
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fbc0 	bl	8005e80 <__pow5mult>
 8005700:	9b05      	ldr	r3, [sp, #20]
 8005702:	2b01      	cmp	r3, #1
 8005704:	4606      	mov	r6, r0
 8005706:	dd76      	ble.n	80057f6 <_dtoa_r+0x8de>
 8005708:	2300      	movs	r3, #0
 800570a:	9306      	str	r3, [sp, #24]
 800570c:	6933      	ldr	r3, [r6, #16]
 800570e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005712:	6918      	ldr	r0, [r3, #16]
 8005714:	f000 faa8 	bl	8005c68 <__hi0bits>
 8005718:	f1c0 0020 	rsb	r0, r0, #32
 800571c:	9b04      	ldr	r3, [sp, #16]
 800571e:	4418      	add	r0, r3
 8005720:	f010 001f 	ands.w	r0, r0, #31
 8005724:	f000 8086 	beq.w	8005834 <_dtoa_r+0x91c>
 8005728:	f1c0 0320 	rsb	r3, r0, #32
 800572c:	2b04      	cmp	r3, #4
 800572e:	dd7f      	ble.n	8005830 <_dtoa_r+0x918>
 8005730:	f1c0 001c 	rsb	r0, r0, #28
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	4403      	add	r3, r0
 8005738:	4480      	add	r8, r0
 800573a:	4405      	add	r5, r0
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	f1b8 0f00 	cmp.w	r8, #0
 8005742:	dd05      	ble.n	8005750 <_dtoa_r+0x838>
 8005744:	4659      	mov	r1, fp
 8005746:	4642      	mov	r2, r8
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fbf3 	bl	8005f34 <__lshift>
 800574e:	4683      	mov	fp, r0
 8005750:	9b04      	ldr	r3, [sp, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	dd05      	ble.n	8005762 <_dtoa_r+0x84a>
 8005756:	4631      	mov	r1, r6
 8005758:	461a      	mov	r2, r3
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fbea 	bl	8005f34 <__lshift>
 8005760:	4606      	mov	r6, r0
 8005762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d069      	beq.n	800583c <_dtoa_r+0x924>
 8005768:	4631      	mov	r1, r6
 800576a:	4658      	mov	r0, fp
 800576c:	f000 fc4e 	bl	800600c <__mcmp>
 8005770:	2800      	cmp	r0, #0
 8005772:	da63      	bge.n	800583c <_dtoa_r+0x924>
 8005774:	2300      	movs	r3, #0
 8005776:	4659      	mov	r1, fp
 8005778:	220a      	movs	r2, #10
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fa2a 	bl	8005bd4 <__multadd>
 8005780:	9b08      	ldr	r3, [sp, #32]
 8005782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005786:	4683      	mov	fp, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 818f 	beq.w	8005aac <_dtoa_r+0xb94>
 800578e:	4639      	mov	r1, r7
 8005790:	2300      	movs	r3, #0
 8005792:	220a      	movs	r2, #10
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fa1d 	bl	8005bd4 <__multadd>
 800579a:	f1b9 0f00 	cmp.w	r9, #0
 800579e:	4607      	mov	r7, r0
 80057a0:	f300 808e 	bgt.w	80058c0 <_dtoa_r+0x9a8>
 80057a4:	9b05      	ldr	r3, [sp, #20]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	dc50      	bgt.n	800584c <_dtoa_r+0x934>
 80057aa:	e089      	b.n	80058c0 <_dtoa_r+0x9a8>
 80057ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057b2:	e75d      	b.n	8005670 <_dtoa_r+0x758>
 80057b4:	9b01      	ldr	r3, [sp, #4]
 80057b6:	1e5e      	subs	r6, r3, #1
 80057b8:	9b06      	ldr	r3, [sp, #24]
 80057ba:	42b3      	cmp	r3, r6
 80057bc:	bfbf      	itttt	lt
 80057be:	9b06      	ldrlt	r3, [sp, #24]
 80057c0:	9606      	strlt	r6, [sp, #24]
 80057c2:	1af2      	sublt	r2, r6, r3
 80057c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80057c6:	bfb6      	itet	lt
 80057c8:	189b      	addlt	r3, r3, r2
 80057ca:	1b9e      	subge	r6, r3, r6
 80057cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	bfb8      	it	lt
 80057d2:	2600      	movlt	r6, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfb5      	itete	lt
 80057d8:	eba8 0503 	sublt.w	r5, r8, r3
 80057dc:	9b01      	ldrge	r3, [sp, #4]
 80057de:	2300      	movlt	r3, #0
 80057e0:	4645      	movge	r5, r8
 80057e2:	e747      	b.n	8005674 <_dtoa_r+0x75c>
 80057e4:	9e06      	ldr	r6, [sp, #24]
 80057e6:	9f08      	ldr	r7, [sp, #32]
 80057e8:	4645      	mov	r5, r8
 80057ea:	e74c      	b.n	8005686 <_dtoa_r+0x76e>
 80057ec:	9a06      	ldr	r2, [sp, #24]
 80057ee:	e775      	b.n	80056dc <_dtoa_r+0x7c4>
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	dc18      	bgt.n	8005828 <_dtoa_r+0x910>
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	b9b3      	cbnz	r3, 8005828 <_dtoa_r+0x910>
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005800:	b9a3      	cbnz	r3, 800582c <_dtoa_r+0x914>
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005808:	0d1b      	lsrs	r3, r3, #20
 800580a:	051b      	lsls	r3, r3, #20
 800580c:	b12b      	cbz	r3, 800581a <_dtoa_r+0x902>
 800580e:	9b04      	ldr	r3, [sp, #16]
 8005810:	3301      	adds	r3, #1
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	f108 0801 	add.w	r8, r8, #1
 8005818:	2301      	movs	r3, #1
 800581a:	9306      	str	r3, [sp, #24]
 800581c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800581e:	2b00      	cmp	r3, #0
 8005820:	f47f af74 	bne.w	800570c <_dtoa_r+0x7f4>
 8005824:	2001      	movs	r0, #1
 8005826:	e779      	b.n	800571c <_dtoa_r+0x804>
 8005828:	2300      	movs	r3, #0
 800582a:	e7f6      	b.n	800581a <_dtoa_r+0x902>
 800582c:	9b02      	ldr	r3, [sp, #8]
 800582e:	e7f4      	b.n	800581a <_dtoa_r+0x902>
 8005830:	d085      	beq.n	800573e <_dtoa_r+0x826>
 8005832:	4618      	mov	r0, r3
 8005834:	301c      	adds	r0, #28
 8005836:	e77d      	b.n	8005734 <_dtoa_r+0x81c>
 8005838:	40240000 	.word	0x40240000
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	dc38      	bgt.n	80058b4 <_dtoa_r+0x99c>
 8005842:	9b05      	ldr	r3, [sp, #20]
 8005844:	2b02      	cmp	r3, #2
 8005846:	dd35      	ble.n	80058b4 <_dtoa_r+0x99c>
 8005848:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	d10d      	bne.n	800586e <_dtoa_r+0x956>
 8005852:	4631      	mov	r1, r6
 8005854:	464b      	mov	r3, r9
 8005856:	2205      	movs	r2, #5
 8005858:	4620      	mov	r0, r4
 800585a:	f000 f9bb 	bl	8005bd4 <__multadd>
 800585e:	4601      	mov	r1, r0
 8005860:	4606      	mov	r6, r0
 8005862:	4658      	mov	r0, fp
 8005864:	f000 fbd2 	bl	800600c <__mcmp>
 8005868:	2800      	cmp	r0, #0
 800586a:	f73f adbd 	bgt.w	80053e8 <_dtoa_r+0x4d0>
 800586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005870:	9d00      	ldr	r5, [sp, #0]
 8005872:	ea6f 0a03 	mvn.w	sl, r3
 8005876:	f04f 0800 	mov.w	r8, #0
 800587a:	4631      	mov	r1, r6
 800587c:	4620      	mov	r0, r4
 800587e:	f000 f987 	bl	8005b90 <_Bfree>
 8005882:	2f00      	cmp	r7, #0
 8005884:	f43f aeb4 	beq.w	80055f0 <_dtoa_r+0x6d8>
 8005888:	f1b8 0f00 	cmp.w	r8, #0
 800588c:	d005      	beq.n	800589a <_dtoa_r+0x982>
 800588e:	45b8      	cmp	r8, r7
 8005890:	d003      	beq.n	800589a <_dtoa_r+0x982>
 8005892:	4641      	mov	r1, r8
 8005894:	4620      	mov	r0, r4
 8005896:	f000 f97b 	bl	8005b90 <_Bfree>
 800589a:	4639      	mov	r1, r7
 800589c:	4620      	mov	r0, r4
 800589e:	f000 f977 	bl	8005b90 <_Bfree>
 80058a2:	e6a5      	b.n	80055f0 <_dtoa_r+0x6d8>
 80058a4:	2600      	movs	r6, #0
 80058a6:	4637      	mov	r7, r6
 80058a8:	e7e1      	b.n	800586e <_dtoa_r+0x956>
 80058aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80058ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80058b0:	4637      	mov	r7, r6
 80058b2:	e599      	b.n	80053e8 <_dtoa_r+0x4d0>
 80058b4:	9b08      	ldr	r3, [sp, #32]
 80058b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80fd 	beq.w	8005aba <_dtoa_r+0xba2>
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	dd05      	ble.n	80058d0 <_dtoa_r+0x9b8>
 80058c4:	4639      	mov	r1, r7
 80058c6:	462a      	mov	r2, r5
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fb33 	bl	8005f34 <__lshift>
 80058ce:	4607      	mov	r7, r0
 80058d0:	9b06      	ldr	r3, [sp, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d05c      	beq.n	8005990 <_dtoa_r+0xa78>
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 f919 	bl	8005b10 <_Balloc>
 80058de:	4605      	mov	r5, r0
 80058e0:	b928      	cbnz	r0, 80058ee <_dtoa_r+0x9d6>
 80058e2:	4b80      	ldr	r3, [pc, #512]	; (8005ae4 <_dtoa_r+0xbcc>)
 80058e4:	4602      	mov	r2, r0
 80058e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058ea:	f7ff bb2e 	b.w	8004f4a <_dtoa_r+0x32>
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	3202      	adds	r2, #2
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	f107 010c 	add.w	r1, r7, #12
 80058f8:	300c      	adds	r0, #12
 80058fa:	f7fe fd27 	bl	800434c <memcpy>
 80058fe:	2201      	movs	r2, #1
 8005900:	4629      	mov	r1, r5
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fb16 	bl	8005f34 <__lshift>
 8005908:	9b00      	ldr	r3, [sp, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	9b00      	ldr	r3, [sp, #0]
 8005910:	444b      	add	r3, r9
 8005912:	9307      	str	r3, [sp, #28]
 8005914:	9b02      	ldr	r3, [sp, #8]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	46b8      	mov	r8, r7
 800591c:	9306      	str	r3, [sp, #24]
 800591e:	4607      	mov	r7, r0
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	4631      	mov	r1, r6
 8005924:	3b01      	subs	r3, #1
 8005926:	4658      	mov	r0, fp
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	f7ff fa69 	bl	8004e00 <quorem>
 800592e:	4603      	mov	r3, r0
 8005930:	3330      	adds	r3, #48	; 0x30
 8005932:	9004      	str	r0, [sp, #16]
 8005934:	4641      	mov	r1, r8
 8005936:	4658      	mov	r0, fp
 8005938:	9308      	str	r3, [sp, #32]
 800593a:	f000 fb67 	bl	800600c <__mcmp>
 800593e:	463a      	mov	r2, r7
 8005940:	4681      	mov	r9, r0
 8005942:	4631      	mov	r1, r6
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fb7d 	bl	8006044 <__mdiff>
 800594a:	68c2      	ldr	r2, [r0, #12]
 800594c:	9b08      	ldr	r3, [sp, #32]
 800594e:	4605      	mov	r5, r0
 8005950:	bb02      	cbnz	r2, 8005994 <_dtoa_r+0xa7c>
 8005952:	4601      	mov	r1, r0
 8005954:	4658      	mov	r0, fp
 8005956:	f000 fb59 	bl	800600c <__mcmp>
 800595a:	9b08      	ldr	r3, [sp, #32]
 800595c:	4602      	mov	r2, r0
 800595e:	4629      	mov	r1, r5
 8005960:	4620      	mov	r0, r4
 8005962:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005966:	f000 f913 	bl	8005b90 <_Bfree>
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800596e:	9d01      	ldr	r5, [sp, #4]
 8005970:	ea43 0102 	orr.w	r1, r3, r2
 8005974:	9b06      	ldr	r3, [sp, #24]
 8005976:	430b      	orrs	r3, r1
 8005978:	9b08      	ldr	r3, [sp, #32]
 800597a:	d10d      	bne.n	8005998 <_dtoa_r+0xa80>
 800597c:	2b39      	cmp	r3, #57	; 0x39
 800597e:	d029      	beq.n	80059d4 <_dtoa_r+0xabc>
 8005980:	f1b9 0f00 	cmp.w	r9, #0
 8005984:	dd01      	ble.n	800598a <_dtoa_r+0xa72>
 8005986:	9b04      	ldr	r3, [sp, #16]
 8005988:	3331      	adds	r3, #49	; 0x31
 800598a:	9a02      	ldr	r2, [sp, #8]
 800598c:	7013      	strb	r3, [r2, #0]
 800598e:	e774      	b.n	800587a <_dtoa_r+0x962>
 8005990:	4638      	mov	r0, r7
 8005992:	e7b9      	b.n	8005908 <_dtoa_r+0x9f0>
 8005994:	2201      	movs	r2, #1
 8005996:	e7e2      	b.n	800595e <_dtoa_r+0xa46>
 8005998:	f1b9 0f00 	cmp.w	r9, #0
 800599c:	db06      	blt.n	80059ac <_dtoa_r+0xa94>
 800599e:	9905      	ldr	r1, [sp, #20]
 80059a0:	ea41 0909 	orr.w	r9, r1, r9
 80059a4:	9906      	ldr	r1, [sp, #24]
 80059a6:	ea59 0101 	orrs.w	r1, r9, r1
 80059aa:	d120      	bne.n	80059ee <_dtoa_r+0xad6>
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	ddec      	ble.n	800598a <_dtoa_r+0xa72>
 80059b0:	4659      	mov	r1, fp
 80059b2:	2201      	movs	r2, #1
 80059b4:	4620      	mov	r0, r4
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	f000 fabc 	bl	8005f34 <__lshift>
 80059bc:	4631      	mov	r1, r6
 80059be:	4683      	mov	fp, r0
 80059c0:	f000 fb24 	bl	800600c <__mcmp>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	dc02      	bgt.n	80059d0 <_dtoa_r+0xab8>
 80059ca:	d1de      	bne.n	800598a <_dtoa_r+0xa72>
 80059cc:	07da      	lsls	r2, r3, #31
 80059ce:	d5dc      	bpl.n	800598a <_dtoa_r+0xa72>
 80059d0:	2b39      	cmp	r3, #57	; 0x39
 80059d2:	d1d8      	bne.n	8005986 <_dtoa_r+0xa6e>
 80059d4:	9a02      	ldr	r2, [sp, #8]
 80059d6:	2339      	movs	r3, #57	; 0x39
 80059d8:	7013      	strb	r3, [r2, #0]
 80059da:	462b      	mov	r3, r5
 80059dc:	461d      	mov	r5, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059e4:	2a39      	cmp	r2, #57	; 0x39
 80059e6:	d050      	beq.n	8005a8a <_dtoa_r+0xb72>
 80059e8:	3201      	adds	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e745      	b.n	800587a <_dtoa_r+0x962>
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	dd03      	ble.n	80059fa <_dtoa_r+0xae2>
 80059f2:	2b39      	cmp	r3, #57	; 0x39
 80059f4:	d0ee      	beq.n	80059d4 <_dtoa_r+0xabc>
 80059f6:	3301      	adds	r3, #1
 80059f8:	e7c7      	b.n	800598a <_dtoa_r+0xa72>
 80059fa:	9a01      	ldr	r2, [sp, #4]
 80059fc:	9907      	ldr	r1, [sp, #28]
 80059fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a02:	428a      	cmp	r2, r1
 8005a04:	d02a      	beq.n	8005a5c <_dtoa_r+0xb44>
 8005a06:	4659      	mov	r1, fp
 8005a08:	2300      	movs	r3, #0
 8005a0a:	220a      	movs	r2, #10
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 f8e1 	bl	8005bd4 <__multadd>
 8005a12:	45b8      	cmp	r8, r7
 8005a14:	4683      	mov	fp, r0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	f04f 020a 	mov.w	r2, #10
 8005a1e:	4641      	mov	r1, r8
 8005a20:	4620      	mov	r0, r4
 8005a22:	d107      	bne.n	8005a34 <_dtoa_r+0xb1c>
 8005a24:	f000 f8d6 	bl	8005bd4 <__multadd>
 8005a28:	4680      	mov	r8, r0
 8005a2a:	4607      	mov	r7, r0
 8005a2c:	9b01      	ldr	r3, [sp, #4]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	e775      	b.n	8005920 <_dtoa_r+0xa08>
 8005a34:	f000 f8ce 	bl	8005bd4 <__multadd>
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	220a      	movs	r2, #10
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 f8c7 	bl	8005bd4 <__multadd>
 8005a46:	4607      	mov	r7, r0
 8005a48:	e7f0      	b.n	8005a2c <_dtoa_r+0xb14>
 8005a4a:	f1b9 0f00 	cmp.w	r9, #0
 8005a4e:	9a00      	ldr	r2, [sp, #0]
 8005a50:	bfcc      	ite	gt
 8005a52:	464d      	movgt	r5, r9
 8005a54:	2501      	movle	r5, #1
 8005a56:	4415      	add	r5, r2
 8005a58:	f04f 0800 	mov.w	r8, #0
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4620      	mov	r0, r4
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	f000 fa66 	bl	8005f34 <__lshift>
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4683      	mov	fp, r0
 8005a6c:	f000 face 	bl	800600c <__mcmp>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	dcb2      	bgt.n	80059da <_dtoa_r+0xac2>
 8005a74:	d102      	bne.n	8005a7c <_dtoa_r+0xb64>
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	07db      	lsls	r3, r3, #31
 8005a7a:	d4ae      	bmi.n	80059da <_dtoa_r+0xac2>
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	461d      	mov	r5, r3
 8005a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a84:	2a30      	cmp	r2, #48	; 0x30
 8005a86:	d0fa      	beq.n	8005a7e <_dtoa_r+0xb66>
 8005a88:	e6f7      	b.n	800587a <_dtoa_r+0x962>
 8005a8a:	9a00      	ldr	r2, [sp, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d1a5      	bne.n	80059dc <_dtoa_r+0xac4>
 8005a90:	f10a 0a01 	add.w	sl, sl, #1
 8005a94:	2331      	movs	r3, #49	; 0x31
 8005a96:	e779      	b.n	800598c <_dtoa_r+0xa74>
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <_dtoa_r+0xbd0>)
 8005a9a:	f7ff baaf 	b.w	8004ffc <_dtoa_r+0xe4>
 8005a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f aa86 	bne.w	8004fb2 <_dtoa_r+0x9a>
 8005aa6:	4b11      	ldr	r3, [pc, #68]	; (8005aec <_dtoa_r+0xbd4>)
 8005aa8:	f7ff baa8 	b.w	8004ffc <_dtoa_r+0xe4>
 8005aac:	f1b9 0f00 	cmp.w	r9, #0
 8005ab0:	dc03      	bgt.n	8005aba <_dtoa_r+0xba2>
 8005ab2:	9b05      	ldr	r3, [sp, #20]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	f73f aec9 	bgt.w	800584c <_dtoa_r+0x934>
 8005aba:	9d00      	ldr	r5, [sp, #0]
 8005abc:	4631      	mov	r1, r6
 8005abe:	4658      	mov	r0, fp
 8005ac0:	f7ff f99e 	bl	8004e00 <quorem>
 8005ac4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ac8:	f805 3b01 	strb.w	r3, [r5], #1
 8005acc:	9a00      	ldr	r2, [sp, #0]
 8005ace:	1aaa      	subs	r2, r5, r2
 8005ad0:	4591      	cmp	r9, r2
 8005ad2:	ddba      	ble.n	8005a4a <_dtoa_r+0xb32>
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	220a      	movs	r2, #10
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 f87a 	bl	8005bd4 <__multadd>
 8005ae0:	4683      	mov	fp, r0
 8005ae2:	e7eb      	b.n	8005abc <_dtoa_r+0xba4>
 8005ae4:	0800726b 	.word	0x0800726b
 8005ae8:	080071c4 	.word	0x080071c4
 8005aec:	080071e8 	.word	0x080071e8

08005af0 <_localeconv_r>:
 8005af0:	4800      	ldr	r0, [pc, #0]	; (8005af4 <_localeconv_r+0x4>)
 8005af2:	4770      	bx	lr
 8005af4:	20000160 	.word	0x20000160

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f000 bd22 	b.w	8006542 <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	2000046c 	.word	0x2000046c

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f000 bd1d 	b.w	8006544 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	2000046c 	.word	0x2000046c

08005b10 <_Balloc>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	b976      	cbnz	r6, 8005b38 <_Balloc+0x28>
 8005b1a:	2010      	movs	r0, #16
 8005b1c:	f7fe fc06 	bl	800432c <malloc>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6260      	str	r0, [r4, #36]	; 0x24
 8005b24:	b920      	cbnz	r0, 8005b30 <_Balloc+0x20>
 8005b26:	4b18      	ldr	r3, [pc, #96]	; (8005b88 <_Balloc+0x78>)
 8005b28:	4818      	ldr	r0, [pc, #96]	; (8005b8c <_Balloc+0x7c>)
 8005b2a:	2166      	movs	r1, #102	; 0x66
 8005b2c:	f000 fcd8 	bl	80064e0 <__assert_func>
 8005b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b34:	6006      	str	r6, [r0, #0]
 8005b36:	60c6      	str	r6, [r0, #12]
 8005b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b3a:	68f3      	ldr	r3, [r6, #12]
 8005b3c:	b183      	cbz	r3, 8005b60 <_Balloc+0x50>
 8005b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b46:	b9b8      	cbnz	r0, 8005b78 <_Balloc+0x68>
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b4e:	1d72      	adds	r2, r6, #5
 8005b50:	0092      	lsls	r2, r2, #2
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 fb5a 	bl	800620c <_calloc_r>
 8005b58:	b160      	cbz	r0, 8005b74 <_Balloc+0x64>
 8005b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b5e:	e00e      	b.n	8005b7e <_Balloc+0x6e>
 8005b60:	2221      	movs	r2, #33	; 0x21
 8005b62:	2104      	movs	r1, #4
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fb51 	bl	800620c <_calloc_r>
 8005b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b6c:	60f0      	str	r0, [r6, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e4      	bne.n	8005b3e <_Balloc+0x2e>
 8005b74:	2000      	movs	r0, #0
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	6802      	ldr	r2, [r0, #0]
 8005b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b84:	e7f7      	b.n	8005b76 <_Balloc+0x66>
 8005b86:	bf00      	nop
 8005b88:	080071f5 	.word	0x080071f5
 8005b8c:	0800727c 	.word	0x0800727c

08005b90 <_Bfree>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b94:	4605      	mov	r5, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	b976      	cbnz	r6, 8005bb8 <_Bfree+0x28>
 8005b9a:	2010      	movs	r0, #16
 8005b9c:	f7fe fbc6 	bl	800432c <malloc>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8005ba4:	b920      	cbnz	r0, 8005bb0 <_Bfree+0x20>
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <_Bfree+0x3c>)
 8005ba8:	4809      	ldr	r0, [pc, #36]	; (8005bd0 <_Bfree+0x40>)
 8005baa:	218a      	movs	r1, #138	; 0x8a
 8005bac:	f000 fc98 	bl	80064e0 <__assert_func>
 8005bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bb4:	6006      	str	r6, [r0, #0]
 8005bb6:	60c6      	str	r6, [r0, #12]
 8005bb8:	b13c      	cbz	r4, 8005bca <_Bfree+0x3a>
 8005bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bc4:	6021      	str	r1, [r4, #0]
 8005bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	080071f5 	.word	0x080071f5
 8005bd0:	0800727c 	.word	0x0800727c

08005bd4 <__multadd>:
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	690e      	ldr	r6, [r1, #16]
 8005bda:	4607      	mov	r7, r0
 8005bdc:	4698      	mov	r8, r3
 8005bde:	460c      	mov	r4, r1
 8005be0:	f101 0014 	add.w	r0, r1, #20
 8005be4:	2300      	movs	r3, #0
 8005be6:	6805      	ldr	r5, [r0, #0]
 8005be8:	b2a9      	uxth	r1, r5
 8005bea:	fb02 8101 	mla	r1, r2, r1, r8
 8005bee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005bf2:	0c2d      	lsrs	r5, r5, #16
 8005bf4:	fb02 c505 	mla	r5, r2, r5, ip
 8005bf8:	b289      	uxth	r1, r1
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005c00:	429e      	cmp	r6, r3
 8005c02:	f840 1b04 	str.w	r1, [r0], #4
 8005c06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005c0a:	dcec      	bgt.n	8005be6 <__multadd+0x12>
 8005c0c:	f1b8 0f00 	cmp.w	r8, #0
 8005c10:	d022      	beq.n	8005c58 <__multadd+0x84>
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	42b3      	cmp	r3, r6
 8005c16:	dc19      	bgt.n	8005c4c <__multadd+0x78>
 8005c18:	6861      	ldr	r1, [r4, #4]
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	3101      	adds	r1, #1
 8005c1e:	f7ff ff77 	bl	8005b10 <_Balloc>
 8005c22:	4605      	mov	r5, r0
 8005c24:	b928      	cbnz	r0, 8005c32 <__multadd+0x5e>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <__multadd+0x8c>)
 8005c2a:	480e      	ldr	r0, [pc, #56]	; (8005c64 <__multadd+0x90>)
 8005c2c:	21b5      	movs	r1, #181	; 0xb5
 8005c2e:	f000 fc57 	bl	80064e0 <__assert_func>
 8005c32:	6922      	ldr	r2, [r4, #16]
 8005c34:	3202      	adds	r2, #2
 8005c36:	f104 010c 	add.w	r1, r4, #12
 8005c3a:	0092      	lsls	r2, r2, #2
 8005c3c:	300c      	adds	r0, #12
 8005c3e:	f7fe fb85 	bl	800434c <memcpy>
 8005c42:	4621      	mov	r1, r4
 8005c44:	4638      	mov	r0, r7
 8005c46:	f7ff ffa3 	bl	8005b90 <_Bfree>
 8005c4a:	462c      	mov	r4, r5
 8005c4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005c50:	3601      	adds	r6, #1
 8005c52:	f8c3 8014 	str.w	r8, [r3, #20]
 8005c56:	6126      	str	r6, [r4, #16]
 8005c58:	4620      	mov	r0, r4
 8005c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c5e:	bf00      	nop
 8005c60:	0800726b 	.word	0x0800726b
 8005c64:	0800727c 	.word	0x0800727c

08005c68 <__hi0bits>:
 8005c68:	0c03      	lsrs	r3, r0, #16
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	b9d3      	cbnz	r3, 8005ca4 <__hi0bits+0x3c>
 8005c6e:	0400      	lsls	r0, r0, #16
 8005c70:	2310      	movs	r3, #16
 8005c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c76:	bf04      	itt	eq
 8005c78:	0200      	lsleq	r0, r0, #8
 8005c7a:	3308      	addeq	r3, #8
 8005c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c80:	bf04      	itt	eq
 8005c82:	0100      	lsleq	r0, r0, #4
 8005c84:	3304      	addeq	r3, #4
 8005c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c8a:	bf04      	itt	eq
 8005c8c:	0080      	lsleq	r0, r0, #2
 8005c8e:	3302      	addeq	r3, #2
 8005c90:	2800      	cmp	r0, #0
 8005c92:	db05      	blt.n	8005ca0 <__hi0bits+0x38>
 8005c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c98:	f103 0301 	add.w	r3, r3, #1
 8005c9c:	bf08      	it	eq
 8005c9e:	2320      	moveq	r3, #32
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	4770      	bx	lr
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e7e4      	b.n	8005c72 <__hi0bits+0xa>

08005ca8 <__lo0bits>:
 8005ca8:	6803      	ldr	r3, [r0, #0]
 8005caa:	f013 0207 	ands.w	r2, r3, #7
 8005cae:	4601      	mov	r1, r0
 8005cb0:	d00b      	beq.n	8005cca <__lo0bits+0x22>
 8005cb2:	07da      	lsls	r2, r3, #31
 8005cb4:	d424      	bmi.n	8005d00 <__lo0bits+0x58>
 8005cb6:	0798      	lsls	r0, r3, #30
 8005cb8:	bf49      	itett	mi
 8005cba:	085b      	lsrmi	r3, r3, #1
 8005cbc:	089b      	lsrpl	r3, r3, #2
 8005cbe:	2001      	movmi	r0, #1
 8005cc0:	600b      	strmi	r3, [r1, #0]
 8005cc2:	bf5c      	itt	pl
 8005cc4:	600b      	strpl	r3, [r1, #0]
 8005cc6:	2002      	movpl	r0, #2
 8005cc8:	4770      	bx	lr
 8005cca:	b298      	uxth	r0, r3
 8005ccc:	b9b0      	cbnz	r0, 8005cfc <__lo0bits+0x54>
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	2010      	movs	r0, #16
 8005cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cd6:	bf04      	itt	eq
 8005cd8:	0a1b      	lsreq	r3, r3, #8
 8005cda:	3008      	addeq	r0, #8
 8005cdc:	071a      	lsls	r2, r3, #28
 8005cde:	bf04      	itt	eq
 8005ce0:	091b      	lsreq	r3, r3, #4
 8005ce2:	3004      	addeq	r0, #4
 8005ce4:	079a      	lsls	r2, r3, #30
 8005ce6:	bf04      	itt	eq
 8005ce8:	089b      	lsreq	r3, r3, #2
 8005cea:	3002      	addeq	r0, #2
 8005cec:	07da      	lsls	r2, r3, #31
 8005cee:	d403      	bmi.n	8005cf8 <__lo0bits+0x50>
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	f100 0001 	add.w	r0, r0, #1
 8005cf6:	d005      	beq.n	8005d04 <__lo0bits+0x5c>
 8005cf8:	600b      	str	r3, [r1, #0]
 8005cfa:	4770      	bx	lr
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	e7e8      	b.n	8005cd2 <__lo0bits+0x2a>
 8005d00:	2000      	movs	r0, #0
 8005d02:	4770      	bx	lr
 8005d04:	2020      	movs	r0, #32
 8005d06:	4770      	bx	lr

08005d08 <__i2b>:
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	f7ff feff 	bl	8005b10 <_Balloc>
 8005d12:	4602      	mov	r2, r0
 8005d14:	b928      	cbnz	r0, 8005d22 <__i2b+0x1a>
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <__i2b+0x24>)
 8005d18:	4805      	ldr	r0, [pc, #20]	; (8005d30 <__i2b+0x28>)
 8005d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d1e:	f000 fbdf 	bl	80064e0 <__assert_func>
 8005d22:	2301      	movs	r3, #1
 8005d24:	6144      	str	r4, [r0, #20]
 8005d26:	6103      	str	r3, [r0, #16]
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	bf00      	nop
 8005d2c:	0800726b 	.word	0x0800726b
 8005d30:	0800727c 	.word	0x0800727c

08005d34 <__multiply>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4614      	mov	r4, r2
 8005d3a:	690a      	ldr	r2, [r1, #16]
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	bfb8      	it	lt
 8005d42:	460b      	movlt	r3, r1
 8005d44:	460d      	mov	r5, r1
 8005d46:	bfbc      	itt	lt
 8005d48:	4625      	movlt	r5, r4
 8005d4a:	461c      	movlt	r4, r3
 8005d4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005d50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d54:	68ab      	ldr	r3, [r5, #8]
 8005d56:	6869      	ldr	r1, [r5, #4]
 8005d58:	eb0a 0709 	add.w	r7, sl, r9
 8005d5c:	42bb      	cmp	r3, r7
 8005d5e:	b085      	sub	sp, #20
 8005d60:	bfb8      	it	lt
 8005d62:	3101      	addlt	r1, #1
 8005d64:	f7ff fed4 	bl	8005b10 <_Balloc>
 8005d68:	b930      	cbnz	r0, 8005d78 <__multiply+0x44>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <__multiply+0x144>)
 8005d6e:	4843      	ldr	r0, [pc, #268]	; (8005e7c <__multiply+0x148>)
 8005d70:	f240 115d 	movw	r1, #349	; 0x15d
 8005d74:	f000 fbb4 	bl	80064e0 <__assert_func>
 8005d78:	f100 0614 	add.w	r6, r0, #20
 8005d7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005d80:	4633      	mov	r3, r6
 8005d82:	2200      	movs	r2, #0
 8005d84:	4543      	cmp	r3, r8
 8005d86:	d31e      	bcc.n	8005dc6 <__multiply+0x92>
 8005d88:	f105 0c14 	add.w	ip, r5, #20
 8005d8c:	f104 0314 	add.w	r3, r4, #20
 8005d90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d98:	9202      	str	r2, [sp, #8]
 8005d9a:	ebac 0205 	sub.w	r2, ip, r5
 8005d9e:	3a15      	subs	r2, #21
 8005da0:	f022 0203 	bic.w	r2, r2, #3
 8005da4:	3204      	adds	r2, #4
 8005da6:	f105 0115 	add.w	r1, r5, #21
 8005daa:	458c      	cmp	ip, r1
 8005dac:	bf38      	it	cc
 8005dae:	2204      	movcc	r2, #4
 8005db0:	9201      	str	r2, [sp, #4]
 8005db2:	9a02      	ldr	r2, [sp, #8]
 8005db4:	9303      	str	r3, [sp, #12]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d808      	bhi.n	8005dcc <__multiply+0x98>
 8005dba:	2f00      	cmp	r7, #0
 8005dbc:	dc55      	bgt.n	8005e6a <__multiply+0x136>
 8005dbe:	6107      	str	r7, [r0, #16]
 8005dc0:	b005      	add	sp, #20
 8005dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc6:	f843 2b04 	str.w	r2, [r3], #4
 8005dca:	e7db      	b.n	8005d84 <__multiply+0x50>
 8005dcc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dd0:	f1ba 0f00 	cmp.w	sl, #0
 8005dd4:	d020      	beq.n	8005e18 <__multiply+0xe4>
 8005dd6:	f105 0e14 	add.w	lr, r5, #20
 8005dda:	46b1      	mov	r9, r6
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005de2:	f8d9 b000 	ldr.w	fp, [r9]
 8005de6:	b2a1      	uxth	r1, r4
 8005de8:	fa1f fb8b 	uxth.w	fp, fp
 8005dec:	fb0a b101 	mla	r1, sl, r1, fp
 8005df0:	4411      	add	r1, r2
 8005df2:	f8d9 2000 	ldr.w	r2, [r9]
 8005df6:	0c24      	lsrs	r4, r4, #16
 8005df8:	0c12      	lsrs	r2, r2, #16
 8005dfa:	fb0a 2404 	mla	r4, sl, r4, r2
 8005dfe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e02:	b289      	uxth	r1, r1
 8005e04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e08:	45f4      	cmp	ip, lr
 8005e0a:	f849 1b04 	str.w	r1, [r9], #4
 8005e0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005e12:	d8e4      	bhi.n	8005dde <__multiply+0xaa>
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	5072      	str	r2, [r6, r1]
 8005e18:	9a03      	ldr	r2, [sp, #12]
 8005e1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	f1b9 0f00 	cmp.w	r9, #0
 8005e24:	d01f      	beq.n	8005e66 <__multiply+0x132>
 8005e26:	6834      	ldr	r4, [r6, #0]
 8005e28:	f105 0114 	add.w	r1, r5, #20
 8005e2c:	46b6      	mov	lr, r6
 8005e2e:	f04f 0a00 	mov.w	sl, #0
 8005e32:	880a      	ldrh	r2, [r1, #0]
 8005e34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e38:	fb09 b202 	mla	r2, r9, r2, fp
 8005e3c:	4492      	add	sl, r2
 8005e3e:	b2a4      	uxth	r4, r4
 8005e40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e44:	f84e 4b04 	str.w	r4, [lr], #4
 8005e48:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e4c:	f8be 2000 	ldrh.w	r2, [lr]
 8005e50:	0c24      	lsrs	r4, r4, #16
 8005e52:	fb09 2404 	mla	r4, r9, r4, r2
 8005e56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005e5a:	458c      	cmp	ip, r1
 8005e5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e60:	d8e7      	bhi.n	8005e32 <__multiply+0xfe>
 8005e62:	9a01      	ldr	r2, [sp, #4]
 8005e64:	50b4      	str	r4, [r6, r2]
 8005e66:	3604      	adds	r6, #4
 8005e68:	e7a3      	b.n	8005db2 <__multiply+0x7e>
 8005e6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1a5      	bne.n	8005dbe <__multiply+0x8a>
 8005e72:	3f01      	subs	r7, #1
 8005e74:	e7a1      	b.n	8005dba <__multiply+0x86>
 8005e76:	bf00      	nop
 8005e78:	0800726b 	.word	0x0800726b
 8005e7c:	0800727c 	.word	0x0800727c

08005e80 <__pow5mult>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	4615      	mov	r5, r2
 8005e86:	f012 0203 	ands.w	r2, r2, #3
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	460f      	mov	r7, r1
 8005e8e:	d007      	beq.n	8005ea0 <__pow5mult+0x20>
 8005e90:	4c25      	ldr	r4, [pc, #148]	; (8005f28 <__pow5mult+0xa8>)
 8005e92:	3a01      	subs	r2, #1
 8005e94:	2300      	movs	r3, #0
 8005e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e9a:	f7ff fe9b 	bl	8005bd4 <__multadd>
 8005e9e:	4607      	mov	r7, r0
 8005ea0:	10ad      	asrs	r5, r5, #2
 8005ea2:	d03d      	beq.n	8005f20 <__pow5mult+0xa0>
 8005ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ea6:	b97c      	cbnz	r4, 8005ec8 <__pow5mult+0x48>
 8005ea8:	2010      	movs	r0, #16
 8005eaa:	f7fe fa3f 	bl	800432c <malloc>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8005eb2:	b928      	cbnz	r0, 8005ec0 <__pow5mult+0x40>
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <__pow5mult+0xac>)
 8005eb6:	481e      	ldr	r0, [pc, #120]	; (8005f30 <__pow5mult+0xb0>)
 8005eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ebc:	f000 fb10 	bl	80064e0 <__assert_func>
 8005ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ec4:	6004      	str	r4, [r0, #0]
 8005ec6:	60c4      	str	r4, [r0, #12]
 8005ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ed0:	b94c      	cbnz	r4, 8005ee6 <__pow5mult+0x66>
 8005ed2:	f240 2171 	movw	r1, #625	; 0x271
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7ff ff16 	bl	8005d08 <__i2b>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	6003      	str	r3, [r0, #0]
 8005ee6:	f04f 0900 	mov.w	r9, #0
 8005eea:	07eb      	lsls	r3, r5, #31
 8005eec:	d50a      	bpl.n	8005f04 <__pow5mult+0x84>
 8005eee:	4639      	mov	r1, r7
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ff1e 	bl	8005d34 <__multiply>
 8005ef8:	4639      	mov	r1, r7
 8005efa:	4680      	mov	r8, r0
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff fe47 	bl	8005b90 <_Bfree>
 8005f02:	4647      	mov	r7, r8
 8005f04:	106d      	asrs	r5, r5, #1
 8005f06:	d00b      	beq.n	8005f20 <__pow5mult+0xa0>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	b938      	cbnz	r0, 8005f1c <__pow5mult+0x9c>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4630      	mov	r0, r6
 8005f12:	f7ff ff0f 	bl	8005d34 <__multiply>
 8005f16:	6020      	str	r0, [r4, #0]
 8005f18:	f8c0 9000 	str.w	r9, [r0]
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	e7e4      	b.n	8005eea <__pow5mult+0x6a>
 8005f20:	4638      	mov	r0, r7
 8005f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f26:	bf00      	nop
 8005f28:	080073d0 	.word	0x080073d0
 8005f2c:	080071f5 	.word	0x080071f5
 8005f30:	0800727c 	.word	0x0800727c

08005f34 <__lshift>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	460c      	mov	r4, r1
 8005f3a:	6849      	ldr	r1, [r1, #4]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	4607      	mov	r7, r0
 8005f46:	4691      	mov	r9, r2
 8005f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f4c:	f108 0601 	add.w	r6, r8, #1
 8005f50:	42b3      	cmp	r3, r6
 8005f52:	db0b      	blt.n	8005f6c <__lshift+0x38>
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff fddb 	bl	8005b10 <_Balloc>
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b948      	cbnz	r0, 8005f72 <__lshift+0x3e>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <__lshift+0xd0>)
 8005f62:	4829      	ldr	r0, [pc, #164]	; (8006008 <__lshift+0xd4>)
 8005f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f68:	f000 faba 	bl	80064e0 <__assert_func>
 8005f6c:	3101      	adds	r1, #1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	e7ee      	b.n	8005f50 <__lshift+0x1c>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f100 0114 	add.w	r1, r0, #20
 8005f78:	f100 0210 	add.w	r2, r0, #16
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	4553      	cmp	r3, sl
 8005f80:	db33      	blt.n	8005fea <__lshift+0xb6>
 8005f82:	6920      	ldr	r0, [r4, #16]
 8005f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f88:	f104 0314 	add.w	r3, r4, #20
 8005f8c:	f019 091f 	ands.w	r9, r9, #31
 8005f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f98:	d02b      	beq.n	8005ff2 <__lshift+0xbe>
 8005f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f9e:	468a      	mov	sl, r1
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8005fa8:	4302      	orrs	r2, r0
 8005faa:	f84a 2b04 	str.w	r2, [sl], #4
 8005fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb2:	459c      	cmp	ip, r3
 8005fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fb8:	d8f3      	bhi.n	8005fa2 <__lshift+0x6e>
 8005fba:	ebac 0304 	sub.w	r3, ip, r4
 8005fbe:	3b15      	subs	r3, #21
 8005fc0:	f023 0303 	bic.w	r3, r3, #3
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	f104 0015 	add.w	r0, r4, #21
 8005fca:	4584      	cmp	ip, r0
 8005fcc:	bf38      	it	cc
 8005fce:	2304      	movcc	r3, #4
 8005fd0:	50ca      	str	r2, [r1, r3]
 8005fd2:	b10a      	cbz	r2, 8005fd8 <__lshift+0xa4>
 8005fd4:	f108 0602 	add.w	r6, r8, #2
 8005fd8:	3e01      	subs	r6, #1
 8005fda:	4638      	mov	r0, r7
 8005fdc:	612e      	str	r6, [r5, #16]
 8005fde:	4621      	mov	r1, r4
 8005fe0:	f7ff fdd6 	bl	8005b90 <_Bfree>
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fee:	3301      	adds	r3, #1
 8005ff0:	e7c5      	b.n	8005f7e <__lshift+0x4a>
 8005ff2:	3904      	subs	r1, #4
 8005ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ffc:	459c      	cmp	ip, r3
 8005ffe:	d8f9      	bhi.n	8005ff4 <__lshift+0xc0>
 8006000:	e7ea      	b.n	8005fd8 <__lshift+0xa4>
 8006002:	bf00      	nop
 8006004:	0800726b 	.word	0x0800726b
 8006008:	0800727c 	.word	0x0800727c

0800600c <__mcmp>:
 800600c:	b530      	push	{r4, r5, lr}
 800600e:	6902      	ldr	r2, [r0, #16]
 8006010:	690c      	ldr	r4, [r1, #16]
 8006012:	1b12      	subs	r2, r2, r4
 8006014:	d10e      	bne.n	8006034 <__mcmp+0x28>
 8006016:	f100 0314 	add.w	r3, r0, #20
 800601a:	3114      	adds	r1, #20
 800601c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800602c:	42a5      	cmp	r5, r4
 800602e:	d003      	beq.n	8006038 <__mcmp+0x2c>
 8006030:	d305      	bcc.n	800603e <__mcmp+0x32>
 8006032:	2201      	movs	r2, #1
 8006034:	4610      	mov	r0, r2
 8006036:	bd30      	pop	{r4, r5, pc}
 8006038:	4283      	cmp	r3, r0
 800603a:	d3f3      	bcc.n	8006024 <__mcmp+0x18>
 800603c:	e7fa      	b.n	8006034 <__mcmp+0x28>
 800603e:	f04f 32ff 	mov.w	r2, #4294967295
 8006042:	e7f7      	b.n	8006034 <__mcmp+0x28>

08006044 <__mdiff>:
 8006044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	460c      	mov	r4, r1
 800604a:	4606      	mov	r6, r0
 800604c:	4611      	mov	r1, r2
 800604e:	4620      	mov	r0, r4
 8006050:	4617      	mov	r7, r2
 8006052:	f7ff ffdb 	bl	800600c <__mcmp>
 8006056:	1e05      	subs	r5, r0, #0
 8006058:	d110      	bne.n	800607c <__mdiff+0x38>
 800605a:	4629      	mov	r1, r5
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff fd57 	bl	8005b10 <_Balloc>
 8006062:	b930      	cbnz	r0, 8006072 <__mdiff+0x2e>
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <__mdiff+0x108>)
 8006066:	4602      	mov	r2, r0
 8006068:	f240 2132 	movw	r1, #562	; 0x232
 800606c:	4838      	ldr	r0, [pc, #224]	; (8006150 <__mdiff+0x10c>)
 800606e:	f000 fa37 	bl	80064e0 <__assert_func>
 8006072:	2301      	movs	r3, #1
 8006074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607c:	bfa4      	itt	ge
 800607e:	463b      	movge	r3, r7
 8006080:	4627      	movge	r7, r4
 8006082:	4630      	mov	r0, r6
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	bfa6      	itte	ge
 8006088:	461c      	movge	r4, r3
 800608a:	2500      	movge	r5, #0
 800608c:	2501      	movlt	r5, #1
 800608e:	f7ff fd3f 	bl	8005b10 <_Balloc>
 8006092:	b920      	cbnz	r0, 800609e <__mdiff+0x5a>
 8006094:	4b2d      	ldr	r3, [pc, #180]	; (800614c <__mdiff+0x108>)
 8006096:	4602      	mov	r2, r0
 8006098:	f44f 7110 	mov.w	r1, #576	; 0x240
 800609c:	e7e6      	b.n	800606c <__mdiff+0x28>
 800609e:	693e      	ldr	r6, [r7, #16]
 80060a0:	60c5      	str	r5, [r0, #12]
 80060a2:	6925      	ldr	r5, [r4, #16]
 80060a4:	f107 0114 	add.w	r1, r7, #20
 80060a8:	f104 0914 	add.w	r9, r4, #20
 80060ac:	f100 0e14 	add.w	lr, r0, #20
 80060b0:	f107 0210 	add.w	r2, r7, #16
 80060b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80060b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80060bc:	46f2      	mov	sl, lr
 80060be:	2700      	movs	r7, #0
 80060c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80060c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060c8:	fa1f f883 	uxth.w	r8, r3
 80060cc:	fa17 f78b 	uxtah	r7, r7, fp
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	eba7 0808 	sub.w	r8, r7, r8
 80060d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80060de:	fa1f f888 	uxth.w	r8, r8
 80060e2:	141f      	asrs	r7, r3, #16
 80060e4:	454d      	cmp	r5, r9
 80060e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80060ea:	f84a 3b04 	str.w	r3, [sl], #4
 80060ee:	d8e7      	bhi.n	80060c0 <__mdiff+0x7c>
 80060f0:	1b2b      	subs	r3, r5, r4
 80060f2:	3b15      	subs	r3, #21
 80060f4:	f023 0303 	bic.w	r3, r3, #3
 80060f8:	3304      	adds	r3, #4
 80060fa:	3415      	adds	r4, #21
 80060fc:	42a5      	cmp	r5, r4
 80060fe:	bf38      	it	cc
 8006100:	2304      	movcc	r3, #4
 8006102:	4419      	add	r1, r3
 8006104:	4473      	add	r3, lr
 8006106:	469e      	mov	lr, r3
 8006108:	460d      	mov	r5, r1
 800610a:	4565      	cmp	r5, ip
 800610c:	d30e      	bcc.n	800612c <__mdiff+0xe8>
 800610e:	f10c 0203 	add.w	r2, ip, #3
 8006112:	1a52      	subs	r2, r2, r1
 8006114:	f022 0203 	bic.w	r2, r2, #3
 8006118:	3903      	subs	r1, #3
 800611a:	458c      	cmp	ip, r1
 800611c:	bf38      	it	cc
 800611e:	2200      	movcc	r2, #0
 8006120:	441a      	add	r2, r3
 8006122:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006126:	b17b      	cbz	r3, 8006148 <__mdiff+0x104>
 8006128:	6106      	str	r6, [r0, #16]
 800612a:	e7a5      	b.n	8006078 <__mdiff+0x34>
 800612c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006130:	fa17 f488 	uxtah	r4, r7, r8
 8006134:	1422      	asrs	r2, r4, #16
 8006136:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800613a:	b2a4      	uxth	r4, r4
 800613c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006140:	f84e 4b04 	str.w	r4, [lr], #4
 8006144:	1417      	asrs	r7, r2, #16
 8006146:	e7e0      	b.n	800610a <__mdiff+0xc6>
 8006148:	3e01      	subs	r6, #1
 800614a:	e7ea      	b.n	8006122 <__mdiff+0xde>
 800614c:	0800726b 	.word	0x0800726b
 8006150:	0800727c 	.word	0x0800727c

08006154 <__d2b>:
 8006154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4689      	mov	r9, r1
 800615a:	2101      	movs	r1, #1
 800615c:	ec57 6b10 	vmov	r6, r7, d0
 8006160:	4690      	mov	r8, r2
 8006162:	f7ff fcd5 	bl	8005b10 <_Balloc>
 8006166:	4604      	mov	r4, r0
 8006168:	b930      	cbnz	r0, 8006178 <__d2b+0x24>
 800616a:	4602      	mov	r2, r0
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <__d2b+0xb0>)
 800616e:	4826      	ldr	r0, [pc, #152]	; (8006208 <__d2b+0xb4>)
 8006170:	f240 310a 	movw	r1, #778	; 0x30a
 8006174:	f000 f9b4 	bl	80064e0 <__assert_func>
 8006178:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800617c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006180:	bb35      	cbnz	r5, 80061d0 <__d2b+0x7c>
 8006182:	2e00      	cmp	r6, #0
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	d028      	beq.n	80061da <__d2b+0x86>
 8006188:	4668      	mov	r0, sp
 800618a:	9600      	str	r6, [sp, #0]
 800618c:	f7ff fd8c 	bl	8005ca8 <__lo0bits>
 8006190:	9900      	ldr	r1, [sp, #0]
 8006192:	b300      	cbz	r0, 80061d6 <__d2b+0x82>
 8006194:	9a01      	ldr	r2, [sp, #4]
 8006196:	f1c0 0320 	rsb	r3, r0, #32
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	430b      	orrs	r3, r1
 80061a0:	40c2      	lsrs	r2, r0
 80061a2:	6163      	str	r3, [r4, #20]
 80061a4:	9201      	str	r2, [sp, #4]
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	61a3      	str	r3, [r4, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2202      	movne	r2, #2
 80061b0:	2201      	moveq	r2, #1
 80061b2:	6122      	str	r2, [r4, #16]
 80061b4:	b1d5      	cbz	r5, 80061ec <__d2b+0x98>
 80061b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061ba:	4405      	add	r5, r0
 80061bc:	f8c9 5000 	str.w	r5, [r9]
 80061c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061c4:	f8c8 0000 	str.w	r0, [r8]
 80061c8:	4620      	mov	r0, r4
 80061ca:	b003      	add	sp, #12
 80061cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d4:	e7d5      	b.n	8006182 <__d2b+0x2e>
 80061d6:	6161      	str	r1, [r4, #20]
 80061d8:	e7e5      	b.n	80061a6 <__d2b+0x52>
 80061da:	a801      	add	r0, sp, #4
 80061dc:	f7ff fd64 	bl	8005ca8 <__lo0bits>
 80061e0:	9b01      	ldr	r3, [sp, #4]
 80061e2:	6163      	str	r3, [r4, #20]
 80061e4:	2201      	movs	r2, #1
 80061e6:	6122      	str	r2, [r4, #16]
 80061e8:	3020      	adds	r0, #32
 80061ea:	e7e3      	b.n	80061b4 <__d2b+0x60>
 80061ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061f4:	f8c9 0000 	str.w	r0, [r9]
 80061f8:	6918      	ldr	r0, [r3, #16]
 80061fa:	f7ff fd35 	bl	8005c68 <__hi0bits>
 80061fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006202:	e7df      	b.n	80061c4 <__d2b+0x70>
 8006204:	0800726b 	.word	0x0800726b
 8006208:	0800727c 	.word	0x0800727c

0800620c <_calloc_r>:
 800620c:	b513      	push	{r0, r1, r4, lr}
 800620e:	434a      	muls	r2, r1
 8006210:	4611      	mov	r1, r2
 8006212:	9201      	str	r2, [sp, #4]
 8006214:	f7fe f900 	bl	8004418 <_malloc_r>
 8006218:	4604      	mov	r4, r0
 800621a:	b118      	cbz	r0, 8006224 <_calloc_r+0x18>
 800621c:	9a01      	ldr	r2, [sp, #4]
 800621e:	2100      	movs	r1, #0
 8006220:	f7fe f8a2 	bl	8004368 <memset>
 8006224:	4620      	mov	r0, r4
 8006226:	b002      	add	sp, #8
 8006228:	bd10      	pop	{r4, pc}

0800622a <__ssputs_r>:
 800622a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622e:	688e      	ldr	r6, [r1, #8]
 8006230:	429e      	cmp	r6, r3
 8006232:	4682      	mov	sl, r0
 8006234:	460c      	mov	r4, r1
 8006236:	4690      	mov	r8, r2
 8006238:	461f      	mov	r7, r3
 800623a:	d838      	bhi.n	80062ae <__ssputs_r+0x84>
 800623c:	898a      	ldrh	r2, [r1, #12]
 800623e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006242:	d032      	beq.n	80062aa <__ssputs_r+0x80>
 8006244:	6825      	ldr	r5, [r4, #0]
 8006246:	6909      	ldr	r1, [r1, #16]
 8006248:	eba5 0901 	sub.w	r9, r5, r1
 800624c:	6965      	ldr	r5, [r4, #20]
 800624e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006256:	3301      	adds	r3, #1
 8006258:	444b      	add	r3, r9
 800625a:	106d      	asrs	r5, r5, #1
 800625c:	429d      	cmp	r5, r3
 800625e:	bf38      	it	cc
 8006260:	461d      	movcc	r5, r3
 8006262:	0553      	lsls	r3, r2, #21
 8006264:	d531      	bpl.n	80062ca <__ssputs_r+0xa0>
 8006266:	4629      	mov	r1, r5
 8006268:	f7fe f8d6 	bl	8004418 <_malloc_r>
 800626c:	4606      	mov	r6, r0
 800626e:	b950      	cbnz	r0, 8006286 <__ssputs_r+0x5c>
 8006270:	230c      	movs	r3, #12
 8006272:	f8ca 3000 	str.w	r3, [sl]
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	f04f 30ff 	mov.w	r0, #4294967295
 8006282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	464a      	mov	r2, r9
 800628a:	f7fe f85f 	bl	800434c <memcpy>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	6126      	str	r6, [r4, #16]
 800629c:	6165      	str	r5, [r4, #20]
 800629e:	444e      	add	r6, r9
 80062a0:	eba5 0509 	sub.w	r5, r5, r9
 80062a4:	6026      	str	r6, [r4, #0]
 80062a6:	60a5      	str	r5, [r4, #8]
 80062a8:	463e      	mov	r6, r7
 80062aa:	42be      	cmp	r6, r7
 80062ac:	d900      	bls.n	80062b0 <__ssputs_r+0x86>
 80062ae:	463e      	mov	r6, r7
 80062b0:	4632      	mov	r2, r6
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	4641      	mov	r1, r8
 80062b6:	f000 f958 	bl	800656a <memmove>
 80062ba:	68a3      	ldr	r3, [r4, #8]
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	1b9b      	subs	r3, r3, r6
 80062c0:	4432      	add	r2, r6
 80062c2:	60a3      	str	r3, [r4, #8]
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	2000      	movs	r0, #0
 80062c8:	e7db      	b.n	8006282 <__ssputs_r+0x58>
 80062ca:	462a      	mov	r2, r5
 80062cc:	f000 f967 	bl	800659e <_realloc_r>
 80062d0:	4606      	mov	r6, r0
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d1e1      	bne.n	800629a <__ssputs_r+0x70>
 80062d6:	6921      	ldr	r1, [r4, #16]
 80062d8:	4650      	mov	r0, sl
 80062da:	f7fe f84d 	bl	8004378 <_free_r>
 80062de:	e7c7      	b.n	8006270 <__ssputs_r+0x46>

080062e0 <_svfiprintf_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4698      	mov	r8, r3
 80062e6:	898b      	ldrh	r3, [r1, #12]
 80062e8:	061b      	lsls	r3, r3, #24
 80062ea:	b09d      	sub	sp, #116	; 0x74
 80062ec:	4607      	mov	r7, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	d50e      	bpl.n	8006312 <_svfiprintf_r+0x32>
 80062f4:	690b      	ldr	r3, [r1, #16]
 80062f6:	b963      	cbnz	r3, 8006312 <_svfiprintf_r+0x32>
 80062f8:	2140      	movs	r1, #64	; 0x40
 80062fa:	f7fe f88d 	bl	8004418 <_malloc_r>
 80062fe:	6028      	str	r0, [r5, #0]
 8006300:	6128      	str	r0, [r5, #16]
 8006302:	b920      	cbnz	r0, 800630e <_svfiprintf_r+0x2e>
 8006304:	230c      	movs	r3, #12
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	e0d1      	b.n	80064b2 <_svfiprintf_r+0x1d2>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	616b      	str	r3, [r5, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	2320      	movs	r3, #32
 8006318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006320:	2330      	movs	r3, #48	; 0x30
 8006322:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064cc <_svfiprintf_r+0x1ec>
 8006326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800632a:	f04f 0901 	mov.w	r9, #1
 800632e:	4623      	mov	r3, r4
 8006330:	469a      	mov	sl, r3
 8006332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006336:	b10a      	cbz	r2, 800633c <_svfiprintf_r+0x5c>
 8006338:	2a25      	cmp	r2, #37	; 0x25
 800633a:	d1f9      	bne.n	8006330 <_svfiprintf_r+0x50>
 800633c:	ebba 0b04 	subs.w	fp, sl, r4
 8006340:	d00b      	beq.n	800635a <_svfiprintf_r+0x7a>
 8006342:	465b      	mov	r3, fp
 8006344:	4622      	mov	r2, r4
 8006346:	4629      	mov	r1, r5
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ff6e 	bl	800622a <__ssputs_r>
 800634e:	3001      	adds	r0, #1
 8006350:	f000 80aa 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006356:	445a      	add	r2, fp
 8006358:	9209      	str	r2, [sp, #36]	; 0x24
 800635a:	f89a 3000 	ldrb.w	r3, [sl]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80a2 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006364:	2300      	movs	r3, #0
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800636e:	f10a 0a01 	add.w	sl, sl, #1
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800637a:	931a      	str	r3, [sp, #104]	; 0x68
 800637c:	4654      	mov	r4, sl
 800637e:	2205      	movs	r2, #5
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	4851      	ldr	r0, [pc, #324]	; (80064cc <_svfiprintf_r+0x1ec>)
 8006386:	f7f9 ff2b 	bl	80001e0 <memchr>
 800638a:	9a04      	ldr	r2, [sp, #16]
 800638c:	b9d8      	cbnz	r0, 80063c6 <_svfiprintf_r+0xe6>
 800638e:	06d0      	lsls	r0, r2, #27
 8006390:	bf44      	itt	mi
 8006392:	2320      	movmi	r3, #32
 8006394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006398:	0711      	lsls	r1, r2, #28
 800639a:	bf44      	itt	mi
 800639c:	232b      	movmi	r3, #43	; 0x2b
 800639e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a2:	f89a 3000 	ldrb.w	r3, [sl]
 80063a6:	2b2a      	cmp	r3, #42	; 0x2a
 80063a8:	d015      	beq.n	80063d6 <_svfiprintf_r+0xf6>
 80063aa:	9a07      	ldr	r2, [sp, #28]
 80063ac:	4654      	mov	r4, sl
 80063ae:	2000      	movs	r0, #0
 80063b0:	f04f 0c0a 	mov.w	ip, #10
 80063b4:	4621      	mov	r1, r4
 80063b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ba:	3b30      	subs	r3, #48	; 0x30
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d94e      	bls.n	800645e <_svfiprintf_r+0x17e>
 80063c0:	b1b0      	cbz	r0, 80063f0 <_svfiprintf_r+0x110>
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	e014      	b.n	80063f0 <_svfiprintf_r+0x110>
 80063c6:	eba0 0308 	sub.w	r3, r0, r8
 80063ca:	fa09 f303 	lsl.w	r3, r9, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	46a2      	mov	sl, r4
 80063d4:	e7d2      	b.n	800637c <_svfiprintf_r+0x9c>
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	1d19      	adds	r1, r3, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	9103      	str	r1, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfbb      	ittet	lt
 80063e2:	425b      	neglt	r3, r3
 80063e4:	f042 0202 	orrlt.w	r2, r2, #2
 80063e8:	9307      	strge	r3, [sp, #28]
 80063ea:	9307      	strlt	r3, [sp, #28]
 80063ec:	bfb8      	it	lt
 80063ee:	9204      	strlt	r2, [sp, #16]
 80063f0:	7823      	ldrb	r3, [r4, #0]
 80063f2:	2b2e      	cmp	r3, #46	; 0x2e
 80063f4:	d10c      	bne.n	8006410 <_svfiprintf_r+0x130>
 80063f6:	7863      	ldrb	r3, [r4, #1]
 80063f8:	2b2a      	cmp	r3, #42	; 0x2a
 80063fa:	d135      	bne.n	8006468 <_svfiprintf_r+0x188>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	9203      	str	r2, [sp, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	bfb8      	it	lt
 8006408:	f04f 33ff 	movlt.w	r3, #4294967295
 800640c:	3402      	adds	r4, #2
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064dc <_svfiprintf_r+0x1fc>
 8006414:	7821      	ldrb	r1, [r4, #0]
 8006416:	2203      	movs	r2, #3
 8006418:	4650      	mov	r0, sl
 800641a:	f7f9 fee1 	bl	80001e0 <memchr>
 800641e:	b140      	cbz	r0, 8006432 <_svfiprintf_r+0x152>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	eba0 000a 	sub.w	r0, r0, sl
 8006426:	fa03 f000 	lsl.w	r0, r3, r0
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	4303      	orrs	r3, r0
 800642e:	3401      	adds	r4, #1
 8006430:	9304      	str	r3, [sp, #16]
 8006432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006436:	4826      	ldr	r0, [pc, #152]	; (80064d0 <_svfiprintf_r+0x1f0>)
 8006438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800643c:	2206      	movs	r2, #6
 800643e:	f7f9 fecf 	bl	80001e0 <memchr>
 8006442:	2800      	cmp	r0, #0
 8006444:	d038      	beq.n	80064b8 <_svfiprintf_r+0x1d8>
 8006446:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <_svfiprintf_r+0x1f4>)
 8006448:	bb1b      	cbnz	r3, 8006492 <_svfiprintf_r+0x1b2>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	3307      	adds	r3, #7
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	3308      	adds	r3, #8
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	4433      	add	r3, r6
 800645a:	9309      	str	r3, [sp, #36]	; 0x24
 800645c:	e767      	b.n	800632e <_svfiprintf_r+0x4e>
 800645e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006462:	460c      	mov	r4, r1
 8006464:	2001      	movs	r0, #1
 8006466:	e7a5      	b.n	80063b4 <_svfiprintf_r+0xd4>
 8006468:	2300      	movs	r3, #0
 800646a:	3401      	adds	r4, #1
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	4619      	mov	r1, r3
 8006470:	f04f 0c0a 	mov.w	ip, #10
 8006474:	4620      	mov	r0, r4
 8006476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800647a:	3a30      	subs	r2, #48	; 0x30
 800647c:	2a09      	cmp	r2, #9
 800647e:	d903      	bls.n	8006488 <_svfiprintf_r+0x1a8>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0c5      	beq.n	8006410 <_svfiprintf_r+0x130>
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	e7c3      	b.n	8006410 <_svfiprintf_r+0x130>
 8006488:	fb0c 2101 	mla	r1, ip, r1, r2
 800648c:	4604      	mov	r4, r0
 800648e:	2301      	movs	r3, #1
 8006490:	e7f0      	b.n	8006474 <_svfiprintf_r+0x194>
 8006492:	ab03      	add	r3, sp, #12
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	462a      	mov	r2, r5
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <_svfiprintf_r+0x1f8>)
 800649a:	a904      	add	r1, sp, #16
 800649c:	4638      	mov	r0, r7
 800649e:	f7fe f8b5 	bl	800460c <_printf_float>
 80064a2:	1c42      	adds	r2, r0, #1
 80064a4:	4606      	mov	r6, r0
 80064a6:	d1d6      	bne.n	8006456 <_svfiprintf_r+0x176>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	065b      	lsls	r3, r3, #25
 80064ac:	f53f af2c 	bmi.w	8006308 <_svfiprintf_r+0x28>
 80064b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b2:	b01d      	add	sp, #116	; 0x74
 80064b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b8:	ab03      	add	r3, sp, #12
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	462a      	mov	r2, r5
 80064be:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <_svfiprintf_r+0x1f8>)
 80064c0:	a904      	add	r1, sp, #16
 80064c2:	4638      	mov	r0, r7
 80064c4:	f7fe fb46 	bl	8004b54 <_printf_i>
 80064c8:	e7eb      	b.n	80064a2 <_svfiprintf_r+0x1c2>
 80064ca:	bf00      	nop
 80064cc:	080073dc 	.word	0x080073dc
 80064d0:	080073e6 	.word	0x080073e6
 80064d4:	0800460d 	.word	0x0800460d
 80064d8:	0800622b 	.word	0x0800622b
 80064dc:	080073e2 	.word	0x080073e2

080064e0 <__assert_func>:
 80064e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064e2:	4614      	mov	r4, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <__assert_func+0x2c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4605      	mov	r5, r0
 80064ec:	68d8      	ldr	r0, [r3, #12]
 80064ee:	b14c      	cbz	r4, 8006504 <__assert_func+0x24>
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <__assert_func+0x30>)
 80064f2:	9100      	str	r1, [sp, #0]
 80064f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <__assert_func+0x34>)
 80064fa:	462b      	mov	r3, r5
 80064fc:	f000 f80e 	bl	800651c <fiprintf>
 8006500:	f000 fa9a 	bl	8006a38 <abort>
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <__assert_func+0x38>)
 8006506:	461c      	mov	r4, r3
 8006508:	e7f3      	b.n	80064f2 <__assert_func+0x12>
 800650a:	bf00      	nop
 800650c:	2000000c 	.word	0x2000000c
 8006510:	080073ed 	.word	0x080073ed
 8006514:	080073fa 	.word	0x080073fa
 8006518:	08007428 	.word	0x08007428

0800651c <fiprintf>:
 800651c:	b40e      	push	{r1, r2, r3}
 800651e:	b503      	push	{r0, r1, lr}
 8006520:	4601      	mov	r1, r0
 8006522:	ab03      	add	r3, sp, #12
 8006524:	4805      	ldr	r0, [pc, #20]	; (800653c <fiprintf+0x20>)
 8006526:	f853 2b04 	ldr.w	r2, [r3], #4
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	f000 f885 	bl	800663c <_vfiprintf_r>
 8006532:	b002      	add	sp, #8
 8006534:	f85d eb04 	ldr.w	lr, [sp], #4
 8006538:	b003      	add	sp, #12
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c

08006540 <__retarget_lock_init_recursive>:
 8006540:	4770      	bx	lr

08006542 <__retarget_lock_acquire_recursive>:
 8006542:	4770      	bx	lr

08006544 <__retarget_lock_release_recursive>:
 8006544:	4770      	bx	lr

08006546 <__ascii_mbtowc>:
 8006546:	b082      	sub	sp, #8
 8006548:	b901      	cbnz	r1, 800654c <__ascii_mbtowc+0x6>
 800654a:	a901      	add	r1, sp, #4
 800654c:	b142      	cbz	r2, 8006560 <__ascii_mbtowc+0x1a>
 800654e:	b14b      	cbz	r3, 8006564 <__ascii_mbtowc+0x1e>
 8006550:	7813      	ldrb	r3, [r2, #0]
 8006552:	600b      	str	r3, [r1, #0]
 8006554:	7812      	ldrb	r2, [r2, #0]
 8006556:	1e10      	subs	r0, r2, #0
 8006558:	bf18      	it	ne
 800655a:	2001      	movne	r0, #1
 800655c:	b002      	add	sp, #8
 800655e:	4770      	bx	lr
 8006560:	4610      	mov	r0, r2
 8006562:	e7fb      	b.n	800655c <__ascii_mbtowc+0x16>
 8006564:	f06f 0001 	mvn.w	r0, #1
 8006568:	e7f8      	b.n	800655c <__ascii_mbtowc+0x16>

0800656a <memmove>:
 800656a:	4288      	cmp	r0, r1
 800656c:	b510      	push	{r4, lr}
 800656e:	eb01 0402 	add.w	r4, r1, r2
 8006572:	d902      	bls.n	800657a <memmove+0x10>
 8006574:	4284      	cmp	r4, r0
 8006576:	4623      	mov	r3, r4
 8006578:	d807      	bhi.n	800658a <memmove+0x20>
 800657a:	1e43      	subs	r3, r0, #1
 800657c:	42a1      	cmp	r1, r4
 800657e:	d008      	beq.n	8006592 <memmove+0x28>
 8006580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006584:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006588:	e7f8      	b.n	800657c <memmove+0x12>
 800658a:	4402      	add	r2, r0
 800658c:	4601      	mov	r1, r0
 800658e:	428a      	cmp	r2, r1
 8006590:	d100      	bne.n	8006594 <memmove+0x2a>
 8006592:	bd10      	pop	{r4, pc}
 8006594:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006598:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800659c:	e7f7      	b.n	800658e <memmove+0x24>

0800659e <_realloc_r>:
 800659e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a0:	4607      	mov	r7, r0
 80065a2:	4614      	mov	r4, r2
 80065a4:	460e      	mov	r6, r1
 80065a6:	b921      	cbnz	r1, 80065b2 <_realloc_r+0x14>
 80065a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065ac:	4611      	mov	r1, r2
 80065ae:	f7fd bf33 	b.w	8004418 <_malloc_r>
 80065b2:	b922      	cbnz	r2, 80065be <_realloc_r+0x20>
 80065b4:	f7fd fee0 	bl	8004378 <_free_r>
 80065b8:	4625      	mov	r5, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065be:	f000 fc5f 	bl	8006e80 <_malloc_usable_size_r>
 80065c2:	42a0      	cmp	r0, r4
 80065c4:	d20f      	bcs.n	80065e6 <_realloc_r+0x48>
 80065c6:	4621      	mov	r1, r4
 80065c8:	4638      	mov	r0, r7
 80065ca:	f7fd ff25 	bl	8004418 <_malloc_r>
 80065ce:	4605      	mov	r5, r0
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d0f2      	beq.n	80065ba <_realloc_r+0x1c>
 80065d4:	4631      	mov	r1, r6
 80065d6:	4622      	mov	r2, r4
 80065d8:	f7fd feb8 	bl	800434c <memcpy>
 80065dc:	4631      	mov	r1, r6
 80065de:	4638      	mov	r0, r7
 80065e0:	f7fd feca 	bl	8004378 <_free_r>
 80065e4:	e7e9      	b.n	80065ba <_realloc_r+0x1c>
 80065e6:	4635      	mov	r5, r6
 80065e8:	e7e7      	b.n	80065ba <_realloc_r+0x1c>

080065ea <__sfputc_r>:
 80065ea:	6893      	ldr	r3, [r2, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	b410      	push	{r4}
 80065f2:	6093      	str	r3, [r2, #8]
 80065f4:	da08      	bge.n	8006608 <__sfputc_r+0x1e>
 80065f6:	6994      	ldr	r4, [r2, #24]
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	db01      	blt.n	8006600 <__sfputc_r+0x16>
 80065fc:	290a      	cmp	r1, #10
 80065fe:	d103      	bne.n	8006608 <__sfputc_r+0x1e>
 8006600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006604:	f000 b94a 	b.w	800689c <__swbuf_r>
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	1c58      	adds	r0, r3, #1
 800660c:	6010      	str	r0, [r2, #0]
 800660e:	7019      	strb	r1, [r3, #0]
 8006610:	4608      	mov	r0, r1
 8006612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006616:	4770      	bx	lr

08006618 <__sfputs_r>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	4606      	mov	r6, r0
 800661c:	460f      	mov	r7, r1
 800661e:	4614      	mov	r4, r2
 8006620:	18d5      	adds	r5, r2, r3
 8006622:	42ac      	cmp	r4, r5
 8006624:	d101      	bne.n	800662a <__sfputs_r+0x12>
 8006626:	2000      	movs	r0, #0
 8006628:	e007      	b.n	800663a <__sfputs_r+0x22>
 800662a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662e:	463a      	mov	r2, r7
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff ffda 	bl	80065ea <__sfputc_r>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	d1f3      	bne.n	8006622 <__sfputs_r+0xa>
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800663c <_vfiprintf_r>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	460d      	mov	r5, r1
 8006642:	b09d      	sub	sp, #116	; 0x74
 8006644:	4614      	mov	r4, r2
 8006646:	4698      	mov	r8, r3
 8006648:	4606      	mov	r6, r0
 800664a:	b118      	cbz	r0, 8006654 <_vfiprintf_r+0x18>
 800664c:	6983      	ldr	r3, [r0, #24]
 800664e:	b90b      	cbnz	r3, 8006654 <_vfiprintf_r+0x18>
 8006650:	f000 fb14 	bl	8006c7c <__sinit>
 8006654:	4b89      	ldr	r3, [pc, #548]	; (800687c <_vfiprintf_r+0x240>)
 8006656:	429d      	cmp	r5, r3
 8006658:	d11b      	bne.n	8006692 <_vfiprintf_r+0x56>
 800665a:	6875      	ldr	r5, [r6, #4]
 800665c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d405      	bmi.n	800666e <_vfiprintf_r+0x32>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	059a      	lsls	r2, r3, #22
 8006666:	d402      	bmi.n	800666e <_vfiprintf_r+0x32>
 8006668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800666a:	f7ff ff6a 	bl	8006542 <__retarget_lock_acquire_recursive>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	071b      	lsls	r3, r3, #28
 8006672:	d501      	bpl.n	8006678 <_vfiprintf_r+0x3c>
 8006674:	692b      	ldr	r3, [r5, #16]
 8006676:	b9eb      	cbnz	r3, 80066b4 <_vfiprintf_r+0x78>
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f96e 	bl	800695c <__swsetup_r>
 8006680:	b1c0      	cbz	r0, 80066b4 <_vfiprintf_r+0x78>
 8006682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006684:	07dc      	lsls	r4, r3, #31
 8006686:	d50e      	bpl.n	80066a6 <_vfiprintf_r+0x6a>
 8006688:	f04f 30ff 	mov.w	r0, #4294967295
 800668c:	b01d      	add	sp, #116	; 0x74
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006692:	4b7b      	ldr	r3, [pc, #492]	; (8006880 <_vfiprintf_r+0x244>)
 8006694:	429d      	cmp	r5, r3
 8006696:	d101      	bne.n	800669c <_vfiprintf_r+0x60>
 8006698:	68b5      	ldr	r5, [r6, #8]
 800669a:	e7df      	b.n	800665c <_vfiprintf_r+0x20>
 800669c:	4b79      	ldr	r3, [pc, #484]	; (8006884 <_vfiprintf_r+0x248>)
 800669e:	429d      	cmp	r5, r3
 80066a0:	bf08      	it	eq
 80066a2:	68f5      	ldreq	r5, [r6, #12]
 80066a4:	e7da      	b.n	800665c <_vfiprintf_r+0x20>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	0598      	lsls	r0, r3, #22
 80066aa:	d4ed      	bmi.n	8006688 <_vfiprintf_r+0x4c>
 80066ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ae:	f7ff ff49 	bl	8006544 <__retarget_lock_release_recursive>
 80066b2:	e7e9      	b.n	8006688 <_vfiprintf_r+0x4c>
 80066b4:	2300      	movs	r3, #0
 80066b6:	9309      	str	r3, [sp, #36]	; 0x24
 80066b8:	2320      	movs	r3, #32
 80066ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066be:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c2:	2330      	movs	r3, #48	; 0x30
 80066c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006888 <_vfiprintf_r+0x24c>
 80066c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066cc:	f04f 0901 	mov.w	r9, #1
 80066d0:	4623      	mov	r3, r4
 80066d2:	469a      	mov	sl, r3
 80066d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d8:	b10a      	cbz	r2, 80066de <_vfiprintf_r+0xa2>
 80066da:	2a25      	cmp	r2, #37	; 0x25
 80066dc:	d1f9      	bne.n	80066d2 <_vfiprintf_r+0x96>
 80066de:	ebba 0b04 	subs.w	fp, sl, r4
 80066e2:	d00b      	beq.n	80066fc <_vfiprintf_r+0xc0>
 80066e4:	465b      	mov	r3, fp
 80066e6:	4622      	mov	r2, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	4630      	mov	r0, r6
 80066ec:	f7ff ff94 	bl	8006618 <__sfputs_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	f000 80aa 	beq.w	800684a <_vfiprintf_r+0x20e>
 80066f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f8:	445a      	add	r2, fp
 80066fa:	9209      	str	r2, [sp, #36]	; 0x24
 80066fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80a2 	beq.w	800684a <_vfiprintf_r+0x20e>
 8006706:	2300      	movs	r3, #0
 8006708:	f04f 32ff 	mov.w	r2, #4294967295
 800670c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006710:	f10a 0a01 	add.w	sl, sl, #1
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800671c:	931a      	str	r3, [sp, #104]	; 0x68
 800671e:	4654      	mov	r4, sl
 8006720:	2205      	movs	r2, #5
 8006722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006726:	4858      	ldr	r0, [pc, #352]	; (8006888 <_vfiprintf_r+0x24c>)
 8006728:	f7f9 fd5a 	bl	80001e0 <memchr>
 800672c:	9a04      	ldr	r2, [sp, #16]
 800672e:	b9d8      	cbnz	r0, 8006768 <_vfiprintf_r+0x12c>
 8006730:	06d1      	lsls	r1, r2, #27
 8006732:	bf44      	itt	mi
 8006734:	2320      	movmi	r3, #32
 8006736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800673a:	0713      	lsls	r3, r2, #28
 800673c:	bf44      	itt	mi
 800673e:	232b      	movmi	r3, #43	; 0x2b
 8006740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006744:	f89a 3000 	ldrb.w	r3, [sl]
 8006748:	2b2a      	cmp	r3, #42	; 0x2a
 800674a:	d015      	beq.n	8006778 <_vfiprintf_r+0x13c>
 800674c:	9a07      	ldr	r2, [sp, #28]
 800674e:	4654      	mov	r4, sl
 8006750:	2000      	movs	r0, #0
 8006752:	f04f 0c0a 	mov.w	ip, #10
 8006756:	4621      	mov	r1, r4
 8006758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675c:	3b30      	subs	r3, #48	; 0x30
 800675e:	2b09      	cmp	r3, #9
 8006760:	d94e      	bls.n	8006800 <_vfiprintf_r+0x1c4>
 8006762:	b1b0      	cbz	r0, 8006792 <_vfiprintf_r+0x156>
 8006764:	9207      	str	r2, [sp, #28]
 8006766:	e014      	b.n	8006792 <_vfiprintf_r+0x156>
 8006768:	eba0 0308 	sub.w	r3, r0, r8
 800676c:	fa09 f303 	lsl.w	r3, r9, r3
 8006770:	4313      	orrs	r3, r2
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	46a2      	mov	sl, r4
 8006776:	e7d2      	b.n	800671e <_vfiprintf_r+0xe2>
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	1d19      	adds	r1, r3, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	9103      	str	r1, [sp, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	bfbb      	ittet	lt
 8006784:	425b      	neglt	r3, r3
 8006786:	f042 0202 	orrlt.w	r2, r2, #2
 800678a:	9307      	strge	r3, [sp, #28]
 800678c:	9307      	strlt	r3, [sp, #28]
 800678e:	bfb8      	it	lt
 8006790:	9204      	strlt	r2, [sp, #16]
 8006792:	7823      	ldrb	r3, [r4, #0]
 8006794:	2b2e      	cmp	r3, #46	; 0x2e
 8006796:	d10c      	bne.n	80067b2 <_vfiprintf_r+0x176>
 8006798:	7863      	ldrb	r3, [r4, #1]
 800679a:	2b2a      	cmp	r3, #42	; 0x2a
 800679c:	d135      	bne.n	800680a <_vfiprintf_r+0x1ce>
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	1d1a      	adds	r2, r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	9203      	str	r2, [sp, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bfb8      	it	lt
 80067aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ae:	3402      	adds	r4, #2
 80067b0:	9305      	str	r3, [sp, #20]
 80067b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006898 <_vfiprintf_r+0x25c>
 80067b6:	7821      	ldrb	r1, [r4, #0]
 80067b8:	2203      	movs	r2, #3
 80067ba:	4650      	mov	r0, sl
 80067bc:	f7f9 fd10 	bl	80001e0 <memchr>
 80067c0:	b140      	cbz	r0, 80067d4 <_vfiprintf_r+0x198>
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	eba0 000a 	sub.w	r0, r0, sl
 80067c8:	fa03 f000 	lsl.w	r0, r3, r0
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	4303      	orrs	r3, r0
 80067d0:	3401      	adds	r4, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d8:	482c      	ldr	r0, [pc, #176]	; (800688c <_vfiprintf_r+0x250>)
 80067da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067de:	2206      	movs	r2, #6
 80067e0:	f7f9 fcfe 	bl	80001e0 <memchr>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d03f      	beq.n	8006868 <_vfiprintf_r+0x22c>
 80067e8:	4b29      	ldr	r3, [pc, #164]	; (8006890 <_vfiprintf_r+0x254>)
 80067ea:	bb1b      	cbnz	r3, 8006834 <_vfiprintf_r+0x1f8>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	3307      	adds	r3, #7
 80067f0:	f023 0307 	bic.w	r3, r3, #7
 80067f4:	3308      	adds	r3, #8
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fa:	443b      	add	r3, r7
 80067fc:	9309      	str	r3, [sp, #36]	; 0x24
 80067fe:	e767      	b.n	80066d0 <_vfiprintf_r+0x94>
 8006800:	fb0c 3202 	mla	r2, ip, r2, r3
 8006804:	460c      	mov	r4, r1
 8006806:	2001      	movs	r0, #1
 8006808:	e7a5      	b.n	8006756 <_vfiprintf_r+0x11a>
 800680a:	2300      	movs	r3, #0
 800680c:	3401      	adds	r4, #1
 800680e:	9305      	str	r3, [sp, #20]
 8006810:	4619      	mov	r1, r3
 8006812:	f04f 0c0a 	mov.w	ip, #10
 8006816:	4620      	mov	r0, r4
 8006818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681c:	3a30      	subs	r2, #48	; 0x30
 800681e:	2a09      	cmp	r2, #9
 8006820:	d903      	bls.n	800682a <_vfiprintf_r+0x1ee>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0c5      	beq.n	80067b2 <_vfiprintf_r+0x176>
 8006826:	9105      	str	r1, [sp, #20]
 8006828:	e7c3      	b.n	80067b2 <_vfiprintf_r+0x176>
 800682a:	fb0c 2101 	mla	r1, ip, r1, r2
 800682e:	4604      	mov	r4, r0
 8006830:	2301      	movs	r3, #1
 8006832:	e7f0      	b.n	8006816 <_vfiprintf_r+0x1da>
 8006834:	ab03      	add	r3, sp, #12
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	462a      	mov	r2, r5
 800683a:	4b16      	ldr	r3, [pc, #88]	; (8006894 <_vfiprintf_r+0x258>)
 800683c:	a904      	add	r1, sp, #16
 800683e:	4630      	mov	r0, r6
 8006840:	f7fd fee4 	bl	800460c <_printf_float>
 8006844:	4607      	mov	r7, r0
 8006846:	1c78      	adds	r0, r7, #1
 8006848:	d1d6      	bne.n	80067f8 <_vfiprintf_r+0x1bc>
 800684a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800684c:	07d9      	lsls	r1, r3, #31
 800684e:	d405      	bmi.n	800685c <_vfiprintf_r+0x220>
 8006850:	89ab      	ldrh	r3, [r5, #12]
 8006852:	059a      	lsls	r2, r3, #22
 8006854:	d402      	bmi.n	800685c <_vfiprintf_r+0x220>
 8006856:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006858:	f7ff fe74 	bl	8006544 <__retarget_lock_release_recursive>
 800685c:	89ab      	ldrh	r3, [r5, #12]
 800685e:	065b      	lsls	r3, r3, #25
 8006860:	f53f af12 	bmi.w	8006688 <_vfiprintf_r+0x4c>
 8006864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006866:	e711      	b.n	800668c <_vfiprintf_r+0x50>
 8006868:	ab03      	add	r3, sp, #12
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	462a      	mov	r2, r5
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <_vfiprintf_r+0x258>)
 8006870:	a904      	add	r1, sp, #16
 8006872:	4630      	mov	r0, r6
 8006874:	f7fe f96e 	bl	8004b54 <_printf_i>
 8006878:	e7e4      	b.n	8006844 <_vfiprintf_r+0x208>
 800687a:	bf00      	nop
 800687c:	08007554 	.word	0x08007554
 8006880:	08007574 	.word	0x08007574
 8006884:	08007534 	.word	0x08007534
 8006888:	080073dc 	.word	0x080073dc
 800688c:	080073e6 	.word	0x080073e6
 8006890:	0800460d 	.word	0x0800460d
 8006894:	08006619 	.word	0x08006619
 8006898:	080073e2 	.word	0x080073e2

0800689c <__swbuf_r>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	460e      	mov	r6, r1
 80068a0:	4614      	mov	r4, r2
 80068a2:	4605      	mov	r5, r0
 80068a4:	b118      	cbz	r0, 80068ae <__swbuf_r+0x12>
 80068a6:	6983      	ldr	r3, [r0, #24]
 80068a8:	b90b      	cbnz	r3, 80068ae <__swbuf_r+0x12>
 80068aa:	f000 f9e7 	bl	8006c7c <__sinit>
 80068ae:	4b21      	ldr	r3, [pc, #132]	; (8006934 <__swbuf_r+0x98>)
 80068b0:	429c      	cmp	r4, r3
 80068b2:	d12b      	bne.n	800690c <__swbuf_r+0x70>
 80068b4:	686c      	ldr	r4, [r5, #4]
 80068b6:	69a3      	ldr	r3, [r4, #24]
 80068b8:	60a3      	str	r3, [r4, #8]
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	071a      	lsls	r2, r3, #28
 80068be:	d52f      	bpl.n	8006920 <__swbuf_r+0x84>
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	b36b      	cbz	r3, 8006920 <__swbuf_r+0x84>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	6820      	ldr	r0, [r4, #0]
 80068c8:	1ac0      	subs	r0, r0, r3
 80068ca:	6963      	ldr	r3, [r4, #20]
 80068cc:	b2f6      	uxtb	r6, r6
 80068ce:	4283      	cmp	r3, r0
 80068d0:	4637      	mov	r7, r6
 80068d2:	dc04      	bgt.n	80068de <__swbuf_r+0x42>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f93c 	bl	8006b54 <_fflush_r>
 80068dc:	bb30      	cbnz	r0, 800692c <__swbuf_r+0x90>
 80068de:	68a3      	ldr	r3, [r4, #8]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	60a3      	str	r3, [r4, #8]
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	701e      	strb	r6, [r3, #0]
 80068ec:	6963      	ldr	r3, [r4, #20]
 80068ee:	3001      	adds	r0, #1
 80068f0:	4283      	cmp	r3, r0
 80068f2:	d004      	beq.n	80068fe <__swbuf_r+0x62>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	07db      	lsls	r3, r3, #31
 80068f8:	d506      	bpl.n	8006908 <__swbuf_r+0x6c>
 80068fa:	2e0a      	cmp	r6, #10
 80068fc:	d104      	bne.n	8006908 <__swbuf_r+0x6c>
 80068fe:	4621      	mov	r1, r4
 8006900:	4628      	mov	r0, r5
 8006902:	f000 f927 	bl	8006b54 <_fflush_r>
 8006906:	b988      	cbnz	r0, 800692c <__swbuf_r+0x90>
 8006908:	4638      	mov	r0, r7
 800690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <__swbuf_r+0x9c>)
 800690e:	429c      	cmp	r4, r3
 8006910:	d101      	bne.n	8006916 <__swbuf_r+0x7a>
 8006912:	68ac      	ldr	r4, [r5, #8]
 8006914:	e7cf      	b.n	80068b6 <__swbuf_r+0x1a>
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <__swbuf_r+0xa0>)
 8006918:	429c      	cmp	r4, r3
 800691a:	bf08      	it	eq
 800691c:	68ec      	ldreq	r4, [r5, #12]
 800691e:	e7ca      	b.n	80068b6 <__swbuf_r+0x1a>
 8006920:	4621      	mov	r1, r4
 8006922:	4628      	mov	r0, r5
 8006924:	f000 f81a 	bl	800695c <__swsetup_r>
 8006928:	2800      	cmp	r0, #0
 800692a:	d0cb      	beq.n	80068c4 <__swbuf_r+0x28>
 800692c:	f04f 37ff 	mov.w	r7, #4294967295
 8006930:	e7ea      	b.n	8006908 <__swbuf_r+0x6c>
 8006932:	bf00      	nop
 8006934:	08007554 	.word	0x08007554
 8006938:	08007574 	.word	0x08007574
 800693c:	08007534 	.word	0x08007534

08006940 <__ascii_wctomb>:
 8006940:	b149      	cbz	r1, 8006956 <__ascii_wctomb+0x16>
 8006942:	2aff      	cmp	r2, #255	; 0xff
 8006944:	bf85      	ittet	hi
 8006946:	238a      	movhi	r3, #138	; 0x8a
 8006948:	6003      	strhi	r3, [r0, #0]
 800694a:	700a      	strbls	r2, [r1, #0]
 800694c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006950:	bf98      	it	ls
 8006952:	2001      	movls	r0, #1
 8006954:	4770      	bx	lr
 8006956:	4608      	mov	r0, r1
 8006958:	4770      	bx	lr
	...

0800695c <__swsetup_r>:
 800695c:	4b32      	ldr	r3, [pc, #200]	; (8006a28 <__swsetup_r+0xcc>)
 800695e:	b570      	push	{r4, r5, r6, lr}
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	4606      	mov	r6, r0
 8006964:	460c      	mov	r4, r1
 8006966:	b125      	cbz	r5, 8006972 <__swsetup_r+0x16>
 8006968:	69ab      	ldr	r3, [r5, #24]
 800696a:	b913      	cbnz	r3, 8006972 <__swsetup_r+0x16>
 800696c:	4628      	mov	r0, r5
 800696e:	f000 f985 	bl	8006c7c <__sinit>
 8006972:	4b2e      	ldr	r3, [pc, #184]	; (8006a2c <__swsetup_r+0xd0>)
 8006974:	429c      	cmp	r4, r3
 8006976:	d10f      	bne.n	8006998 <__swsetup_r+0x3c>
 8006978:	686c      	ldr	r4, [r5, #4]
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006980:	0719      	lsls	r1, r3, #28
 8006982:	d42c      	bmi.n	80069de <__swsetup_r+0x82>
 8006984:	06dd      	lsls	r5, r3, #27
 8006986:	d411      	bmi.n	80069ac <__swsetup_r+0x50>
 8006988:	2309      	movs	r3, #9
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	f04f 30ff 	mov.w	r0, #4294967295
 8006996:	e03e      	b.n	8006a16 <__swsetup_r+0xba>
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <__swsetup_r+0xd4>)
 800699a:	429c      	cmp	r4, r3
 800699c:	d101      	bne.n	80069a2 <__swsetup_r+0x46>
 800699e:	68ac      	ldr	r4, [r5, #8]
 80069a0:	e7eb      	b.n	800697a <__swsetup_r+0x1e>
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <__swsetup_r+0xd8>)
 80069a4:	429c      	cmp	r4, r3
 80069a6:	bf08      	it	eq
 80069a8:	68ec      	ldreq	r4, [r5, #12]
 80069aa:	e7e6      	b.n	800697a <__swsetup_r+0x1e>
 80069ac:	0758      	lsls	r0, r3, #29
 80069ae:	d512      	bpl.n	80069d6 <__swsetup_r+0x7a>
 80069b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069b2:	b141      	cbz	r1, 80069c6 <__swsetup_r+0x6a>
 80069b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069b8:	4299      	cmp	r1, r3
 80069ba:	d002      	beq.n	80069c2 <__swsetup_r+0x66>
 80069bc:	4630      	mov	r0, r6
 80069be:	f7fd fcdb 	bl	8004378 <_free_r>
 80069c2:	2300      	movs	r3, #0
 80069c4:	6363      	str	r3, [r4, #52]	; 0x34
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	2300      	movs	r3, #0
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f043 0308 	orr.w	r3, r3, #8
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	b94b      	cbnz	r3, 80069f6 <__swsetup_r+0x9a>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ec:	d003      	beq.n	80069f6 <__swsetup_r+0x9a>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4630      	mov	r0, r6
 80069f2:	f000 fa05 	bl	8006e00 <__smakebuf_r>
 80069f6:	89a0      	ldrh	r0, [r4, #12]
 80069f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069fc:	f010 0301 	ands.w	r3, r0, #1
 8006a00:	d00a      	beq.n	8006a18 <__swsetup_r+0xbc>
 8006a02:	2300      	movs	r3, #0
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	6963      	ldr	r3, [r4, #20]
 8006a08:	425b      	negs	r3, r3
 8006a0a:	61a3      	str	r3, [r4, #24]
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	b943      	cbnz	r3, 8006a22 <__swsetup_r+0xc6>
 8006a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a14:	d1ba      	bne.n	800698c <__swsetup_r+0x30>
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	0781      	lsls	r1, r0, #30
 8006a1a:	bf58      	it	pl
 8006a1c:	6963      	ldrpl	r3, [r4, #20]
 8006a1e:	60a3      	str	r3, [r4, #8]
 8006a20:	e7f4      	b.n	8006a0c <__swsetup_r+0xb0>
 8006a22:	2000      	movs	r0, #0
 8006a24:	e7f7      	b.n	8006a16 <__swsetup_r+0xba>
 8006a26:	bf00      	nop
 8006a28:	2000000c 	.word	0x2000000c
 8006a2c:	08007554 	.word	0x08007554
 8006a30:	08007574 	.word	0x08007574
 8006a34:	08007534 	.word	0x08007534

08006a38 <abort>:
 8006a38:	b508      	push	{r3, lr}
 8006a3a:	2006      	movs	r0, #6
 8006a3c:	f000 fa50 	bl	8006ee0 <raise>
 8006a40:	2001      	movs	r0, #1
 8006a42:	f7fa fd27 	bl	8001494 <_exit>
	...

08006a48 <__sflush_r>:
 8006a48:	898a      	ldrh	r2, [r1, #12]
 8006a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4e:	4605      	mov	r5, r0
 8006a50:	0710      	lsls	r0, r2, #28
 8006a52:	460c      	mov	r4, r1
 8006a54:	d458      	bmi.n	8006b08 <__sflush_r+0xc0>
 8006a56:	684b      	ldr	r3, [r1, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc05      	bgt.n	8006a68 <__sflush_r+0x20>
 8006a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dc02      	bgt.n	8006a68 <__sflush_r+0x20>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d0f9      	beq.n	8006a62 <__sflush_r+0x1a>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a74:	682f      	ldr	r7, [r5, #0]
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	d032      	beq.n	8006ae0 <__sflush_r+0x98>
 8006a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	075a      	lsls	r2, r3, #29
 8006a80:	d505      	bpl.n	8006a8e <__sflush_r+0x46>
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	1ac0      	subs	r0, r0, r3
 8006a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a88:	b10b      	cbz	r3, 8006a8e <__sflush_r+0x46>
 8006a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a8c:	1ac0      	subs	r0, r0, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4602      	mov	r2, r0
 8006a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a94:	6a21      	ldr	r1, [r4, #32]
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b0      	blx	r6
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	d106      	bne.n	8006aae <__sflush_r+0x66>
 8006aa0:	6829      	ldr	r1, [r5, #0]
 8006aa2:	291d      	cmp	r1, #29
 8006aa4:	d82c      	bhi.n	8006b00 <__sflush_r+0xb8>
 8006aa6:	4a2a      	ldr	r2, [pc, #168]	; (8006b50 <__sflush_r+0x108>)
 8006aa8:	40ca      	lsrs	r2, r1
 8006aaa:	07d6      	lsls	r6, r2, #31
 8006aac:	d528      	bpl.n	8006b00 <__sflush_r+0xb8>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	6062      	str	r2, [r4, #4]
 8006ab2:	04d9      	lsls	r1, r3, #19
 8006ab4:	6922      	ldr	r2, [r4, #16]
 8006ab6:	6022      	str	r2, [r4, #0]
 8006ab8:	d504      	bpl.n	8006ac4 <__sflush_r+0x7c>
 8006aba:	1c42      	adds	r2, r0, #1
 8006abc:	d101      	bne.n	8006ac2 <__sflush_r+0x7a>
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	b903      	cbnz	r3, 8006ac4 <__sflush_r+0x7c>
 8006ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ac6:	602f      	str	r7, [r5, #0]
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	d0ca      	beq.n	8006a62 <__sflush_r+0x1a>
 8006acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d002      	beq.n	8006ada <__sflush_r+0x92>
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f7fd fc4f 	bl	8004378 <_free_r>
 8006ada:	2000      	movs	r0, #0
 8006adc:	6360      	str	r0, [r4, #52]	; 0x34
 8006ade:	e7c1      	b.n	8006a64 <__sflush_r+0x1c>
 8006ae0:	6a21      	ldr	r1, [r4, #32]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b0      	blx	r6
 8006ae8:	1c41      	adds	r1, r0, #1
 8006aea:	d1c7      	bne.n	8006a7c <__sflush_r+0x34>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0c4      	beq.n	8006a7c <__sflush_r+0x34>
 8006af2:	2b1d      	cmp	r3, #29
 8006af4:	d001      	beq.n	8006afa <__sflush_r+0xb2>
 8006af6:	2b16      	cmp	r3, #22
 8006af8:	d101      	bne.n	8006afe <__sflush_r+0xb6>
 8006afa:	602f      	str	r7, [r5, #0]
 8006afc:	e7b1      	b.n	8006a62 <__sflush_r+0x1a>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	e7ad      	b.n	8006a64 <__sflush_r+0x1c>
 8006b08:	690f      	ldr	r7, [r1, #16]
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	d0a9      	beq.n	8006a62 <__sflush_r+0x1a>
 8006b0e:	0793      	lsls	r3, r2, #30
 8006b10:	680e      	ldr	r6, [r1, #0]
 8006b12:	bf08      	it	eq
 8006b14:	694b      	ldreq	r3, [r1, #20]
 8006b16:	600f      	str	r7, [r1, #0]
 8006b18:	bf18      	it	ne
 8006b1a:	2300      	movne	r3, #0
 8006b1c:	eba6 0807 	sub.w	r8, r6, r7
 8006b20:	608b      	str	r3, [r1, #8]
 8006b22:	f1b8 0f00 	cmp.w	r8, #0
 8006b26:	dd9c      	ble.n	8006a62 <__sflush_r+0x1a>
 8006b28:	6a21      	ldr	r1, [r4, #32]
 8006b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b2c:	4643      	mov	r3, r8
 8006b2e:	463a      	mov	r2, r7
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b0      	blx	r6
 8006b34:	2800      	cmp	r0, #0
 8006b36:	dc06      	bgt.n	8006b46 <__sflush_r+0xfe>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	e78e      	b.n	8006a64 <__sflush_r+0x1c>
 8006b46:	4407      	add	r7, r0
 8006b48:	eba8 0800 	sub.w	r8, r8, r0
 8006b4c:	e7e9      	b.n	8006b22 <__sflush_r+0xda>
 8006b4e:	bf00      	nop
 8006b50:	20400001 	.word	0x20400001

08006b54 <_fflush_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	690b      	ldr	r3, [r1, #16]
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b913      	cbnz	r3, 8006b64 <_fflush_r+0x10>
 8006b5e:	2500      	movs	r5, #0
 8006b60:	4628      	mov	r0, r5
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	b118      	cbz	r0, 8006b6e <_fflush_r+0x1a>
 8006b66:	6983      	ldr	r3, [r0, #24]
 8006b68:	b90b      	cbnz	r3, 8006b6e <_fflush_r+0x1a>
 8006b6a:	f000 f887 	bl	8006c7c <__sinit>
 8006b6e:	4b14      	ldr	r3, [pc, #80]	; (8006bc0 <_fflush_r+0x6c>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d11b      	bne.n	8006bac <_fflush_r+0x58>
 8006b74:	686c      	ldr	r4, [r5, #4]
 8006b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ef      	beq.n	8006b5e <_fflush_r+0xa>
 8006b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b80:	07d0      	lsls	r0, r2, #31
 8006b82:	d404      	bmi.n	8006b8e <_fflush_r+0x3a>
 8006b84:	0599      	lsls	r1, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_fflush_r+0x3a>
 8006b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8a:	f7ff fcda 	bl	8006542 <__retarget_lock_acquire_recursive>
 8006b8e:	4628      	mov	r0, r5
 8006b90:	4621      	mov	r1, r4
 8006b92:	f7ff ff59 	bl	8006a48 <__sflush_r>
 8006b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b98:	07da      	lsls	r2, r3, #31
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	d4e0      	bmi.n	8006b60 <_fflush_r+0xc>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	059b      	lsls	r3, r3, #22
 8006ba2:	d4dd      	bmi.n	8006b60 <_fflush_r+0xc>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba6:	f7ff fccd 	bl	8006544 <__retarget_lock_release_recursive>
 8006baa:	e7d9      	b.n	8006b60 <_fflush_r+0xc>
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <_fflush_r+0x70>)
 8006bae:	429c      	cmp	r4, r3
 8006bb0:	d101      	bne.n	8006bb6 <_fflush_r+0x62>
 8006bb2:	68ac      	ldr	r4, [r5, #8]
 8006bb4:	e7df      	b.n	8006b76 <_fflush_r+0x22>
 8006bb6:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <_fflush_r+0x74>)
 8006bb8:	429c      	cmp	r4, r3
 8006bba:	bf08      	it	eq
 8006bbc:	68ec      	ldreq	r4, [r5, #12]
 8006bbe:	e7da      	b.n	8006b76 <_fflush_r+0x22>
 8006bc0:	08007554 	.word	0x08007554
 8006bc4:	08007574 	.word	0x08007574
 8006bc8:	08007534 	.word	0x08007534

08006bcc <std>:
 8006bcc:	2300      	movs	r3, #0
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bda:	6083      	str	r3, [r0, #8]
 8006bdc:	8181      	strh	r1, [r0, #12]
 8006bde:	6643      	str	r3, [r0, #100]	; 0x64
 8006be0:	81c2      	strh	r2, [r0, #14]
 8006be2:	6183      	str	r3, [r0, #24]
 8006be4:	4619      	mov	r1, r3
 8006be6:	2208      	movs	r2, #8
 8006be8:	305c      	adds	r0, #92	; 0x5c
 8006bea:	f7fd fbbd 	bl	8004368 <memset>
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <std+0x38>)
 8006bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <std+0x3c>)
 8006bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <std+0x40>)
 8006bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <std+0x44>)
 8006bfc:	6224      	str	r4, [r4, #32]
 8006bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8006c00:	bd10      	pop	{r4, pc}
 8006c02:	bf00      	nop
 8006c04:	08006f19 	.word	0x08006f19
 8006c08:	08006f3b 	.word	0x08006f3b
 8006c0c:	08006f73 	.word	0x08006f73
 8006c10:	08006f97 	.word	0x08006f97

08006c14 <_cleanup_r>:
 8006c14:	4901      	ldr	r1, [pc, #4]	; (8006c1c <_cleanup_r+0x8>)
 8006c16:	f000 b8af 	b.w	8006d78 <_fwalk_reent>
 8006c1a:	bf00      	nop
 8006c1c:	08006b55 	.word	0x08006b55

08006c20 <__sfmoreglue>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	1e4a      	subs	r2, r1, #1
 8006c24:	2568      	movs	r5, #104	; 0x68
 8006c26:	4355      	muls	r5, r2
 8006c28:	460e      	mov	r6, r1
 8006c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c2e:	f7fd fbf3 	bl	8004418 <_malloc_r>
 8006c32:	4604      	mov	r4, r0
 8006c34:	b140      	cbz	r0, 8006c48 <__sfmoreglue+0x28>
 8006c36:	2100      	movs	r1, #0
 8006c38:	e9c0 1600 	strd	r1, r6, [r0]
 8006c3c:	300c      	adds	r0, #12
 8006c3e:	60a0      	str	r0, [r4, #8]
 8006c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c44:	f7fd fb90 	bl	8004368 <memset>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}

08006c4c <__sfp_lock_acquire>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__sfp_lock_acquire+0x8>)
 8006c4e:	f7ff bc78 	b.w	8006542 <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	20000470 	.word	0x20000470

08006c58 <__sfp_lock_release>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__sfp_lock_release+0x8>)
 8006c5a:	f7ff bc73 	b.w	8006544 <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	20000470 	.word	0x20000470

08006c64 <__sinit_lock_acquire>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sinit_lock_acquire+0x8>)
 8006c66:	f7ff bc6c 	b.w	8006542 <__retarget_lock_acquire_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	2000046b 	.word	0x2000046b

08006c70 <__sinit_lock_release>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__sinit_lock_release+0x8>)
 8006c72:	f7ff bc67 	b.w	8006544 <__retarget_lock_release_recursive>
 8006c76:	bf00      	nop
 8006c78:	2000046b 	.word	0x2000046b

08006c7c <__sinit>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4604      	mov	r4, r0
 8006c80:	f7ff fff0 	bl	8006c64 <__sinit_lock_acquire>
 8006c84:	69a3      	ldr	r3, [r4, #24]
 8006c86:	b11b      	cbz	r3, 8006c90 <__sinit+0x14>
 8006c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8c:	f7ff bff0 	b.w	8006c70 <__sinit_lock_release>
 8006c90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c94:	6523      	str	r3, [r4, #80]	; 0x50
 8006c96:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <__sinit+0x68>)
 8006c98:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <__sinit+0x6c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c9e:	42a3      	cmp	r3, r4
 8006ca0:	bf04      	itt	eq
 8006ca2:	2301      	moveq	r3, #1
 8006ca4:	61a3      	streq	r3, [r4, #24]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 f820 	bl	8006cec <__sfp>
 8006cac:	6060      	str	r0, [r4, #4]
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f81c 	bl	8006cec <__sfp>
 8006cb4:	60a0      	str	r0, [r4, #8]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 f818 	bl	8006cec <__sfp>
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	60e0      	str	r0, [r4, #12]
 8006cc0:	2104      	movs	r1, #4
 8006cc2:	6860      	ldr	r0, [r4, #4]
 8006cc4:	f7ff ff82 	bl	8006bcc <std>
 8006cc8:	68a0      	ldr	r0, [r4, #8]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	2109      	movs	r1, #9
 8006cce:	f7ff ff7d 	bl	8006bcc <std>
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	2112      	movs	r1, #18
 8006cd8:	f7ff ff78 	bl	8006bcc <std>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	61a3      	str	r3, [r4, #24]
 8006ce0:	e7d2      	b.n	8006c88 <__sinit+0xc>
 8006ce2:	bf00      	nop
 8006ce4:	080071b0 	.word	0x080071b0
 8006ce8:	08006c15 	.word	0x08006c15

08006cec <__sfp>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	4607      	mov	r7, r0
 8006cf0:	f7ff ffac 	bl	8006c4c <__sfp_lock_acquire>
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <__sfp+0x84>)
 8006cf6:	681e      	ldr	r6, [r3, #0]
 8006cf8:	69b3      	ldr	r3, [r6, #24]
 8006cfa:	b913      	cbnz	r3, 8006d02 <__sfp+0x16>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7ff ffbd 	bl	8006c7c <__sinit>
 8006d02:	3648      	adds	r6, #72	; 0x48
 8006d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	d503      	bpl.n	8006d14 <__sfp+0x28>
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	b30b      	cbz	r3, 8006d54 <__sfp+0x68>
 8006d10:	6836      	ldr	r6, [r6, #0]
 8006d12:	e7f7      	b.n	8006d04 <__sfp+0x18>
 8006d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d18:	b9d5      	cbnz	r5, 8006d50 <__sfp+0x64>
 8006d1a:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <__sfp+0x88>)
 8006d1c:	60e3      	str	r3, [r4, #12]
 8006d1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d22:	6665      	str	r5, [r4, #100]	; 0x64
 8006d24:	f7ff fc0c 	bl	8006540 <__retarget_lock_init_recursive>
 8006d28:	f7ff ff96 	bl	8006c58 <__sfp_lock_release>
 8006d2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d34:	6025      	str	r5, [r4, #0]
 8006d36:	61a5      	str	r5, [r4, #24]
 8006d38:	2208      	movs	r2, #8
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d40:	f7fd fb12 	bl	8004368 <memset>
 8006d44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d50:	3468      	adds	r4, #104	; 0x68
 8006d52:	e7d9      	b.n	8006d08 <__sfp+0x1c>
 8006d54:	2104      	movs	r1, #4
 8006d56:	4638      	mov	r0, r7
 8006d58:	f7ff ff62 	bl	8006c20 <__sfmoreglue>
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	6030      	str	r0, [r6, #0]
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d1d5      	bne.n	8006d10 <__sfp+0x24>
 8006d64:	f7ff ff78 	bl	8006c58 <__sfp_lock_release>
 8006d68:	230c      	movs	r3, #12
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	e7ee      	b.n	8006d4c <__sfp+0x60>
 8006d6e:	bf00      	nop
 8006d70:	080071b0 	.word	0x080071b0
 8006d74:	ffff0001 	.word	0xffff0001

08006d78 <_fwalk_reent>:
 8006d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	4688      	mov	r8, r1
 8006d80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d84:	2700      	movs	r7, #0
 8006d86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006d8e:	d505      	bpl.n	8006d9c <_fwalk_reent+0x24>
 8006d90:	6824      	ldr	r4, [r4, #0]
 8006d92:	2c00      	cmp	r4, #0
 8006d94:	d1f7      	bne.n	8006d86 <_fwalk_reent+0xe>
 8006d96:	4638      	mov	r0, r7
 8006d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d9c:	89ab      	ldrh	r3, [r5, #12]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d907      	bls.n	8006db2 <_fwalk_reent+0x3a>
 8006da2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006da6:	3301      	adds	r3, #1
 8006da8:	d003      	beq.n	8006db2 <_fwalk_reent+0x3a>
 8006daa:	4629      	mov	r1, r5
 8006dac:	4630      	mov	r0, r6
 8006dae:	47c0      	blx	r8
 8006db0:	4307      	orrs	r7, r0
 8006db2:	3568      	adds	r5, #104	; 0x68
 8006db4:	e7e9      	b.n	8006d8a <_fwalk_reent+0x12>

08006db6 <__swhatbuf_r>:
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	460e      	mov	r6, r1
 8006dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	b096      	sub	sp, #88	; 0x58
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	da07      	bge.n	8006dd8 <__swhatbuf_r+0x22>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	89b3      	ldrh	r3, [r6, #12]
 8006dce:	061a      	lsls	r2, r3, #24
 8006dd0:	d410      	bmi.n	8006df4 <__swhatbuf_r+0x3e>
 8006dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd6:	e00e      	b.n	8006df6 <__swhatbuf_r+0x40>
 8006dd8:	466a      	mov	r2, sp
 8006dda:	f000 f903 	bl	8006fe4 <_fstat_r>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	dbf2      	blt.n	8006dc8 <__swhatbuf_r+0x12>
 8006de2:	9a01      	ldr	r2, [sp, #4]
 8006de4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006de8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dec:	425a      	negs	r2, r3
 8006dee:	415a      	adcs	r2, r3
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	e7ee      	b.n	8006dd2 <__swhatbuf_r+0x1c>
 8006df4:	2340      	movs	r3, #64	; 0x40
 8006df6:	2000      	movs	r0, #0
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	b016      	add	sp, #88	; 0x58
 8006dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e00 <__smakebuf_r>:
 8006e00:	898b      	ldrh	r3, [r1, #12]
 8006e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e04:	079d      	lsls	r5, r3, #30
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	d507      	bpl.n	8006e1c <__smakebuf_r+0x1c>
 8006e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	2301      	movs	r3, #1
 8006e16:	6163      	str	r3, [r4, #20]
 8006e18:	b002      	add	sp, #8
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	ab01      	add	r3, sp, #4
 8006e1e:	466a      	mov	r2, sp
 8006e20:	f7ff ffc9 	bl	8006db6 <__swhatbuf_r>
 8006e24:	9900      	ldr	r1, [sp, #0]
 8006e26:	4605      	mov	r5, r0
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7fd faf5 	bl	8004418 <_malloc_r>
 8006e2e:	b948      	cbnz	r0, 8006e44 <__smakebuf_r+0x44>
 8006e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e34:	059a      	lsls	r2, r3, #22
 8006e36:	d4ef      	bmi.n	8006e18 <__smakebuf_r+0x18>
 8006e38:	f023 0303 	bic.w	r3, r3, #3
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	e7e3      	b.n	8006e0c <__smakebuf_r+0xc>
 8006e44:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <__smakebuf_r+0x7c>)
 8006e46:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	6020      	str	r0, [r4, #0]
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	9b00      	ldr	r3, [sp, #0]
 8006e54:	6163      	str	r3, [r4, #20]
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	6120      	str	r0, [r4, #16]
 8006e5a:	b15b      	cbz	r3, 8006e74 <__smakebuf_r+0x74>
 8006e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e60:	4630      	mov	r0, r6
 8006e62:	f000 f8d1 	bl	8007008 <_isatty_r>
 8006e66:	b128      	cbz	r0, 8006e74 <__smakebuf_r+0x74>
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	89a0      	ldrh	r0, [r4, #12]
 8006e76:	4305      	orrs	r5, r0
 8006e78:	81a5      	strh	r5, [r4, #12]
 8006e7a:	e7cd      	b.n	8006e18 <__smakebuf_r+0x18>
 8006e7c:	08006c15 	.word	0x08006c15

08006e80 <_malloc_usable_size_r>:
 8006e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e84:	1f18      	subs	r0, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfbc      	itt	lt
 8006e8a:	580b      	ldrlt	r3, [r1, r0]
 8006e8c:	18c0      	addlt	r0, r0, r3
 8006e8e:	4770      	bx	lr

08006e90 <_raise_r>:
 8006e90:	291f      	cmp	r1, #31
 8006e92:	b538      	push	{r3, r4, r5, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	d904      	bls.n	8006ea4 <_raise_r+0x14>
 8006e9a:	2316      	movs	r3, #22
 8006e9c:	6003      	str	r3, [r0, #0]
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ea6:	b112      	cbz	r2, 8006eae <_raise_r+0x1e>
 8006ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eac:	b94b      	cbnz	r3, 8006ec2 <_raise_r+0x32>
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 f830 	bl	8006f14 <_getpid_r>
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	4620      	mov	r0, r4
 8006eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ebe:	f000 b817 	b.w	8006ef0 <_kill_r>
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d00a      	beq.n	8006edc <_raise_r+0x4c>
 8006ec6:	1c59      	adds	r1, r3, #1
 8006ec8:	d103      	bne.n	8006ed2 <_raise_r+0x42>
 8006eca:	2316      	movs	r3, #22
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	2001      	movs	r0, #1
 8006ed0:	e7e7      	b.n	8006ea2 <_raise_r+0x12>
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ed8:	4628      	mov	r0, r5
 8006eda:	4798      	blx	r3
 8006edc:	2000      	movs	r0, #0
 8006ede:	e7e0      	b.n	8006ea2 <_raise_r+0x12>

08006ee0 <raise>:
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <raise+0xc>)
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f7ff bfd3 	b.w	8006e90 <_raise_r>
 8006eea:	bf00      	nop
 8006eec:	2000000c 	.word	0x2000000c

08006ef0 <_kill_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d07      	ldr	r5, [pc, #28]	; (8006f10 <_kill_r+0x20>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	f7fa fab9 	bl	8001474 <_kill>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d102      	bne.n	8006f0c <_kill_r+0x1c>
 8006f06:	682b      	ldr	r3, [r5, #0]
 8006f08:	b103      	cbz	r3, 8006f0c <_kill_r+0x1c>
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000464 	.word	0x20000464

08006f14 <_getpid_r>:
 8006f14:	f7fa baa6 	b.w	8001464 <_getpid>

08006f18 <__sread>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	f000 f894 	bl	800704c <_read_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	bfab      	itete	ge
 8006f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f2c:	181b      	addge	r3, r3, r0
 8006f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f32:	bfac      	ite	ge
 8006f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f36:	81a3      	strhlt	r3, [r4, #12]
 8006f38:	bd10      	pop	{r4, pc}

08006f3a <__swrite>:
 8006f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	461f      	mov	r7, r3
 8006f40:	898b      	ldrh	r3, [r1, #12]
 8006f42:	05db      	lsls	r3, r3, #23
 8006f44:	4605      	mov	r5, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4616      	mov	r6, r2
 8006f4a:	d505      	bpl.n	8006f58 <__swrite+0x1e>
 8006f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f50:	2302      	movs	r3, #2
 8006f52:	2200      	movs	r2, #0
 8006f54:	f000 f868 	bl	8007028 <_lseek_r>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	4628      	mov	r0, r5
 8006f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6e:	f000 b817 	b.w	8006fa0 <_write_r>

08006f72 <__sseek>:
 8006f72:	b510      	push	{r4, lr}
 8006f74:	460c      	mov	r4, r1
 8006f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7a:	f000 f855 	bl	8007028 <_lseek_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	bf15      	itete	ne
 8006f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f8e:	81a3      	strheq	r3, [r4, #12]
 8006f90:	bf18      	it	ne
 8006f92:	81a3      	strhne	r3, [r4, #12]
 8006f94:	bd10      	pop	{r4, pc}

08006f96 <__sclose>:
 8006f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9a:	f000 b813 	b.w	8006fc4 <_close_r>
	...

08006fa0 <_write_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d07      	ldr	r5, [pc, #28]	; (8006fc0 <_write_r+0x20>)
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	4608      	mov	r0, r1
 8006fa8:	4611      	mov	r1, r2
 8006faa:	2200      	movs	r2, #0
 8006fac:	602a      	str	r2, [r5, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f7fa fa97 	bl	80014e2 <_write>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_write_r+0x1e>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_write_r+0x1e>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20000464 	.word	0x20000464

08006fc4 <_close_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	; (8006fe0 <_close_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fa faa3 	bl	800151a <_close>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_close_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_close_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20000464 	.word	0x20000464

08006fe4 <_fstat_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	; (8007004 <_fstat_r+0x20>)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	f7fa fa9e 	bl	8001532 <_fstat>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d102      	bne.n	8007000 <_fstat_r+0x1c>
 8006ffa:	682b      	ldr	r3, [r5, #0]
 8006ffc:	b103      	cbz	r3, 8007000 <_fstat_r+0x1c>
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20000464 	.word	0x20000464

08007008 <_isatty_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	; (8007024 <_isatty_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fa fa9d 	bl	8001552 <_isatty>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_isatty_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_isatty_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20000464 	.word	0x20000464

08007028 <_lseek_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	; (8007048 <_lseek_r+0x20>)
 800702c:	4604      	mov	r4, r0
 800702e:	4608      	mov	r0, r1
 8007030:	4611      	mov	r1, r2
 8007032:	2200      	movs	r2, #0
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7fa fa96 	bl	8001568 <_lseek>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_lseek_r+0x1e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_lseek_r+0x1e>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000464 	.word	0x20000464

0800704c <_read_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4d07      	ldr	r5, [pc, #28]	; (800706c <_read_r+0x20>)
 8007050:	4604      	mov	r4, r0
 8007052:	4608      	mov	r0, r1
 8007054:	4611      	mov	r1, r2
 8007056:	2200      	movs	r2, #0
 8007058:	602a      	str	r2, [r5, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f7fa fa24 	bl	80014a8 <_read>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_read_r+0x1e>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_read_r+0x1e>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000464 	.word	0x20000464

08007070 <_init>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr

0800707c <_fini>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr
