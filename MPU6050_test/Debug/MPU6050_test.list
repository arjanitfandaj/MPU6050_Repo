
MPU6050_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006838  08006838  00016838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006c54  08006c54  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c54  08006c54  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000011c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6d3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfd  00000000  00000000  0002e8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ac9  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5ee  00000000  00000000  00034501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc550  00000000  00000000  00041aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fe03f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038c8  00000000  00000000  000fe094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800681c 	.word	0x0800681c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800681c 	.word	0x0800681c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fb31 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f823 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f8eb 	bl	8000d90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f8b9 	bl	8000d30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bbe:	f000 f877 	bl	8000cb0 <MX_I2C1_Init>
//
//  MPU6050_write(&MPU6050_t, FIFO_EN, &config, 1);
//
//  MPU6050_read(&MPU6050_t, FIFO_EN, &data, 1);

  	 uint8_t data = 0x07;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	71bb      	strb	r3, [r7, #6]

//  	MPU6050_write(&MPU6050_t, SMPLRT_DIV, &data, 1);
//
//  	  MPU6050_read(&MPU6050_t, SMPLRT_DIV, &config, 1);

  	 HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 50);
 8000bc6:	2332      	movs	r3, #50	; 0x32
 8000bc8:	9302      	str	r3, [sp, #8]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	2219      	movs	r2, #25
 8000bd6:	21d0      	movs	r1, #208	; 0xd0
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <main+0x50>)
 8000bda:	f000 fe81 	bl	80018e0 <HAL_I2C_Mem_Write>

  	 HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, (SMPLRT_DIV << 1) | 1, 1, &config, 1, 50);
 8000bde:	2332      	movs	r3, #50	; 0x32
 8000be0:	9302      	str	r3, [sp, #8]
 8000be2:	2301      	movs	r3, #1
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2301      	movs	r3, #1
 8000bec:	2233      	movs	r2, #51	; 0x33
 8000bee:	2168      	movs	r1, #104	; 0x68
 8000bf0:	4801      	ldr	r0, [pc, #4]	; (8000bf8 <main+0x50>)
 8000bf2:	f000 ff89 	bl	8001b08 <HAL_I2C_Mem_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <main+0x4e>
 8000bf8:	20000210 	.word	0x20000210

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b096      	sub	sp, #88	; 0x58
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c06:	2228      	movs	r2, #40	; 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 f942 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c32:	2302      	movs	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c36:	2301      	movs	r3, #1
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c42:	2300      	movs	r3, #0
 8000c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c46:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fb37 	bl	80022c4 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000c5c:	f000 f8fe 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fa29 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c88:	f000 f8e8 	bl	8000e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fc52 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ca2:	f000 f8db 	bl	8000e5c <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3758      	adds	r7, #88	; 0x58
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_I2C1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x7c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cec:	f000 fd68 	bl	80017c0 <HAL_I2C_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cf6:	f000 f8b1 	bl	8000e5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cfe:	f001 fa49 	bl	8002194 <HAL_I2CEx_ConfigAnalogFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d08:	f000 f8a8 	bl	8000e5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000d10:	f001 fa8b 	bl	800222a <HAL_I2CEx_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 f89f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000210 	.word	0x20000210
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	2000090e 	.word	0x2000090e

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <MX_USART2_UART_Init+0x5c>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d74:	f002 fd1a 	bl	80037ac <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7e:	f000 f86d 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000025c 	.word	0x2000025c
 8000d8c:	40004400 	.word	0x40004400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000dc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	6153      	str	r3, [r2, #20]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_GPIO_Init+0xc4>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2120      	movs	r1, #32
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fcbf 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e2a:	f000 fb3f 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e2e:	2320      	movs	r3, #32
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f000 fb30 	bl	80014ac <HAL_GPIO_Init>

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000800 	.word	0x48000800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_MspInit+0x44>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_MspInit+0x44>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x44>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f000 fad0 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_I2C_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d128      	bne.n	8000f24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efc:	2304      	movs	r3, #4
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HAL_I2C_MspInit+0x84>)
 8000f08:	f000 fad0 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f16:	61d3      	str	r3, [r2, #28]
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fa80 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40021000 	.word	0x40021000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001008:	f000 f94a 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_kill>:

int _kill(int pid, int sig)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800102a:	f002 fef3 	bl	8003e14 <__errno>
 800102e:	4603      	mov	r3, r0
 8001030:	2216      	movs	r2, #22
 8001032:	601a      	str	r2, [r3, #0]
	return -1;
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_exit>:

void _exit (int status)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffe7 	bl	8001020 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001052:	e7fe      	b.n	8001052 <_exit+0x12>

08001054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001066:	f3af 8000 	nop.w
 800106a:	4601      	mov	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
	}

return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e009      	b.n	80010b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf1      	blt.n	80010a0 <_write+0x12>
	}
	return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:

int _close(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ee:	605a      	str	r2, [r3, #4]
	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_isatty>:

int _isatty(int file)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	return 1;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
	return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f002 fe58 	bl	8003e14 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20003000 	.word	0x20003000
 8001190:	00000400 	.word	0x00000400
 8001194:	200001f8 	.word	0x200001f8
 8001198:	200002f8 	.word	0x200002f8

0800119c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0b      	ldr	r4, [pc, #44]	; (800120c <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ea:	f7ff ffd7 	bl	800119c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f002 fe17 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff fcd9 	bl	8000ba8 <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001204:	08006c5c 	.word	0x08006c5c
  ldr r2, =_sbss
 8001208:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800120c:	200002f8 	.word	0x200002f8

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x28>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x28>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f90d 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fe1a 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f917 	bl	8001492 <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f8ed 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	200002e4 	.word	0x200002e4

080012c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200002e4 	.word	0x200002e4

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff47 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff5c 	bl	8001328 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffb0 	bl	8001400 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e14e      	b.n	800175a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8140 	beq.w	8001754 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d005      	beq.n	80014ec <HAL_GPIO_Init+0x40>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f003 0201 	and.w	r2, r3, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d017      	beq.n	800158a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d123      	bne.n	80015de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0203 	and.w	r2, r3, #3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 809a 	beq.w	8001754 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x2cc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a54      	ldr	r2, [pc, #336]	; (8001778 <HAL_GPIO_Init+0x2cc>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b52      	ldr	r3, [pc, #328]	; (8001778 <HAL_GPIO_Init+0x2cc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001638:	4a50      	ldr	r2, [pc, #320]	; (800177c <HAL_GPIO_Init+0x2d0>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001662:	d013      	beq.n	800168c <HAL_GPIO_Init+0x1e0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a46      	ldr	r2, [pc, #280]	; (8001780 <HAL_GPIO_Init+0x2d4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00d      	beq.n	8001688 <HAL_GPIO_Init+0x1dc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a45      	ldr	r2, [pc, #276]	; (8001784 <HAL_GPIO_Init+0x2d8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d007      	beq.n	8001684 <HAL_GPIO_Init+0x1d8>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a44      	ldr	r2, [pc, #272]	; (8001788 <HAL_GPIO_Init+0x2dc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_GPIO_Init+0x1d4>
 800167c:	2303      	movs	r3, #3
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1e2>
 8001680:	2305      	movs	r3, #5
 8001682:	e004      	b.n	800168e <HAL_GPIO_Init+0x1e2>
 8001684:	2302      	movs	r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x1e2>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_GPIO_Init+0x1e2>
 800168c:	2300      	movs	r3, #0
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	f002 0203 	and.w	r2, r2, #3
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	4093      	lsls	r3, r2
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169e:	4937      	ldr	r1, [pc, #220]	; (800177c <HAL_GPIO_Init+0x2d0>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_GPIO_Init+0x2e0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016d0:	4a2e      	ldr	r2, [pc, #184]	; (800178c <HAL_GPIO_Init+0x2e0>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_GPIO_Init+0x2e0>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016fa:	4a24      	ldr	r2, [pc, #144]	; (800178c <HAL_GPIO_Init+0x2e0>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_GPIO_Init+0x2e0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <HAL_GPIO_Init+0x2e0>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_GPIO_Init+0x2e0>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_GPIO_Init+0x2e0>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f aea9 	bne.w	80014bc <HAL_GPIO_Init+0x10>
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800
 8001788:	48000c00 	.word	0x48000c00
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e081      	b.n	80018d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fb62 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001810:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001820:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	e006      	b.n	8001848 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d104      	bne.n	800185a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001858:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800187c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69d9      	ldr	r1, [r3, #28]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	817b      	strh	r3, [r7, #10]
 80018f2:	460b      	mov	r3, r1
 80018f4:	813b      	strh	r3, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b20      	cmp	r3, #32
 8001904:	f040 80f9 	bne.w	8001afa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_I2C_Mem_Write+0x34>
 800190e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0ed      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_I2C_Mem_Write+0x4e>
 800192a:	2302      	movs	r3, #2
 800192c:	e0e6      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001936:	f7ff fcc7 	bl	80012c8 <HAL_GetTick>
 800193a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2319      	movs	r3, #25
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fac3 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0d1      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2221      	movs	r2, #33	; 0x21
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001980:	88f8      	ldrh	r0, [r7, #6]
 8001982:	893a      	ldrh	r2, [r7, #8]
 8001984:	8979      	ldrh	r1, [r7, #10]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4603      	mov	r3, r0
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f9d3 	bl	8001d3c <I2C_RequestMemoryWrite>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0a9      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d90e      	bls.n	80019d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	8979      	ldrh	r1, [r7, #10]
 80019c0:	2300      	movs	r3, #0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fbb5 	bl	8002138 <I2C_TransferConfig>
 80019ce:	e00f      	b.n	80019f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	8979      	ldrh	r1, [r7, #10]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fba4 	bl	8002138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 faad 	bl	8001f54 <I2C_WaitOnTXISFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07b      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d034      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x1c8>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d130      	bne.n	8001aa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fa3f 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04d      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d90e      	bls.n	8001a88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fb59 	bl	8002138 <I2C_TransferConfig>
 8001a86:	e00f      	b.n	8001aa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fb48 	bl	8002138 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d19e      	bne.n	80019f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fa8c 	bl	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01a      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2220      	movs	r2, #32
 8001acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_I2C_Mem_Write+0x224>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	fe00e800 	.word	0xfe00e800

08001b08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	817b      	strh	r3, [r7, #10]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	813b      	strh	r3, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	f040 80fd 	bne.w	8001d2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_I2C_Mem_Read+0x34>
 8001b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0f1      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Mem_Read+0x4e>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0ea      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b5e:	f7ff fbb3 	bl	80012c8 <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2319      	movs	r3, #25
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f9af 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0d5      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2222      	movs	r2, #34	; 0x22
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ba8:	88f8      	ldrh	r0, [r7, #6]
 8001baa:	893a      	ldrh	r2, [r7, #8]
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f913 	bl	8001de4 <I2C_RequestMemoryRead>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0ad      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d90e      	bls.n	8001bf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	8979      	ldrh	r1, [r7, #10]
 8001be8:	4b52      	ldr	r3, [pc, #328]	; (8001d34 <HAL_I2C_Mem_Read+0x22c>)
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 faa1 	bl	8002138 <I2C_TransferConfig>
 8001bf6:	e00f      	b.n	8001c18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	8979      	ldrh	r1, [r7, #10]
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_I2C_Mem_Read+0x22c>)
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fa90 	bl	8002138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2104      	movs	r1, #4
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f956 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e07c      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d034      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x1d0>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d130      	bne.n	8001cd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f927 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e04d      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2bff      	cmp	r3, #255	; 0xff
 8001c98:	d90e      	bls.n	8001cb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	22ff      	movs	r2, #255	; 0xff
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	8979      	ldrh	r1, [r7, #10]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fa41 	bl	8002138 <I2C_TransferConfig>
 8001cb6:	e00f      	b.n	8001cd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	8979      	ldrh	r1, [r7, #10]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fa30 	bl	8002138 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d19a      	bne.n	8001c18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f974 	bl	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e01a      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_I2C_Mem_Read+0x230>)
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	80002400 	.word	0x80002400
 8001d38:	fe00e800 	.word	0xfe00e800

08001d3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	8979      	ldrh	r1, [r7, #10]
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <I2C_RequestMemoryWrite+0xa4>)
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f9e7 	bl	8002138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	69b9      	ldr	r1, [r7, #24]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f8f0 	bl	8001f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e02c      	b.n	8001dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d8e:	e015      	b.n	8001dbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	69b9      	ldr	r1, [r7, #24]
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f8d6 	bl	8001f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e012      	b.n	8001dd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f884 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	80002000 	.word	0x80002000

08001de4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	8979      	ldrh	r1, [r7, #10]
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <I2C_RequestMemoryRead+0xa4>)
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f994 	bl	8002138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f89d 	bl	8001f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e02c      	b.n	8001e7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e2a:	893b      	ldrh	r3, [r7, #8]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
 8001e34:	e015      	b.n	8001e62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e36:	893b      	ldrh	r3, [r7, #8]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f883 	bl	8001f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e012      	b.n	8001e7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e58:	893b      	ldrh	r3, [r7, #8]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f831 	bl	8001ed4 <I2C_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	80002000 	.word	0x80002000

08001e8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d103      	bne.n	8001eaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d007      	beq.n	8001ec8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	619a      	str	r2, [r3, #24]
  }
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee4:	e022      	b.n	8001f2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d01e      	beq.n	8001f2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eee:	f7ff f9eb 	bl	80012c8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d302      	bcc.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d113      	bne.n	8001f2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e00f      	b.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d0cd      	beq.n	8001ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f60:	e02c      	b.n	8001fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f870 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e02a      	b.n	8001fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d01e      	beq.n	8001fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7ff f9a3 	bl	80012c8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d113      	bne.n	8001fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e007      	b.n	8001fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d1cb      	bne.n	8001f62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe0:	e028      	b.n	8002034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f830 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e026      	b.n	8002044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff f967 	bl	80012c8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d113      	bne.n	8002034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b20      	cmp	r3, #32
 8002040:	d1cf      	bne.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b10      	cmp	r3, #16
 8002064:	d161      	bne.n	800212a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002074:	d02b      	beq.n	80020ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002084:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002086:	e022      	b.n	80020ce <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d01e      	beq.n	80020ce <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002090:	f7ff f91a 	bl	80012c8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d302      	bcc.n	80020a6 <I2C_IsAcknowledgeFailed+0x5a>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d113      	bne.n	80020ce <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e02e      	b.n	800212c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d1d5      	bne.n	8002088 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2210      	movs	r2, #16
 80020e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2220      	movs	r2, #32
 80020ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff fecd 	bl	8001e8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <I2C_IsAcknowledgeFailed+0xe8>)
 80020fe:	400b      	ands	r3, r1
 8002100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	fe00e800 	.word	0xfe00e800

08002138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	817b      	strh	r3, [r7, #10]
 8002146:	4613      	mov	r3, r2
 8002148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	0d5b      	lsrs	r3, r3, #21
 8002154:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <I2C_TransferConfig+0x58>)
 800215a:	430b      	orrs	r3, r1
 800215c:	43db      	mvns	r3, r3
 800215e:	ea02 0103 	and.w	r1, r2, r3
 8002162:	897b      	ldrh	r3, [r7, #10]
 8002164:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002168:	7a7b      	ldrb	r3, [r7, #9]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	431a      	orrs	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	03ff63ff 	.word	0x03ff63ff

08002194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d138      	bne.n	800221c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e032      	b.n	800221e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e000      	b.n	800221e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800221c:	2302      	movs	r3, #2
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	d139      	bne.n	80022b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800224a:	2302      	movs	r3, #2
 800224c:	e033      	b.n	80022b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2224      	movs	r2, #36	; 0x24
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800227c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f000 bef4 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 816a 	beq.w	80025c2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ee:	4bb3      	ldr	r3, [pc, #716]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d00c      	beq.n	8002314 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022fa:	4bb0      	ldr	r3, [pc, #704]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d159      	bne.n	80023ba <HAL_RCC_OscConfig+0xf6>
 8002306:	4bad      	ldr	r3, [pc, #692]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d152      	bne.n	80023ba <HAL_RCC_OscConfig+0xf6>
 8002314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002318:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002328:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <HAL_RCC_OscConfig+0x82>
 8002340:	4b9e      	ldr	r3, [pc, #632]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0xae>
 8002346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800235a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002362:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800236e:	4b93      	ldr	r3, [pc, #588]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002376:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800237a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002386:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 810c 	beq.w	80025c0 <HAL_RCC_OscConfig+0x2fc>
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8106 	bne.w	80025c0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f000 be86 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x110>
 80023c6:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7c      	ldr	r2, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e030      	b.n	8002436 <HAL_RCC_OscConfig+0x172>
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x134>
 80023de:	4b77      	ldr	r3, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a76      	ldr	r2, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b74      	ldr	r3, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a73      	ldr	r2, [pc, #460]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01e      	b.n	8002436 <HAL_RCC_OscConfig+0x172>
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x15a>
 8002404:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6c      	ldr	r2, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 800240a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x172>
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a63      	ldr	r2, [pc, #396]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002436:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	495d      	ldr	r1, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d059      	beq.n	8002508 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe ff38 	bl	80012c8 <HAL_GetTick>
 8002458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245e:	f7fe ff33 	bl	80012c8 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d902      	bls.n	8002474 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	f000 be29 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002478:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002488:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1e2>
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x20e>
 80024a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024be:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024c2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024e6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0ab      	beq.n	800245e <HAL_RCC_OscConfig+0x19a>
 8002506:	e05c      	b.n	80025c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fede 	bl	80012c8 <HAL_GetTick>
 800250c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002512:	f7fe fed9 	bl	80012c8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d902      	bls.n	8002528 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	f000 bdcf 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800253c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_RCC_OscConfig+0x296>
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x2c2>
 800255a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800256e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002572:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002576:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCC_OscConfig+0x2f8>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800258a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800258e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002592:	fa92 f2a2 	rbit	r2, r2
 8002596:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800259a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800259e:	fab2 f282 	clz	r2, r2
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f042 0220 	orr.w	r2, r2, #32
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f002 021f 	and.w	r2, r2, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f202 	lsl.w	r2, r1, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ab      	bne.n	8002512 <HAL_RCC_OscConfig+0x24e>
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_OscConfig+0x2fe>
 80025bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 816f 	beq.w	80028b0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025d2:	4bd0      	ldr	r3, [pc, #832]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025de:	4bcd      	ldr	r3, [pc, #820]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d16c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x400>
 80025ea:	4bca      	ldr	r3, [pc, #808]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d166      	bne.n	80026c4 <HAL_RCC_OscConfig+0x400>
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002608:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x362>
 8002620:	4bbc      	ldr	r3, [pc, #752]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e013      	b.n	800264e <HAL_RCC_OscConfig+0x38a>
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800263e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800264a:	4bb2      	ldr	r3, [pc, #712]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2202      	movs	r2, #2
 8002650:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002654:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002658:	fa92 f2a2 	rbit	r2, r2
 800265c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002660:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_RCC_OscConfig+0x3cc>
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d002      	beq.n	8002690 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f000 bd1b 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	21f8      	movs	r1, #248	; 0xf8
 80026a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026a8:	fa91 f1a1 	rbit	r1, r1
 80026ac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026b0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026b4:	fab1 f181 	clz	r1, r1
 80026b8:	b2c9      	uxtb	r1, r1
 80026ba:	408b      	lsls	r3, r1
 80026bc:	4995      	ldr	r1, [pc, #596]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e0f5      	b.n	80028b0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8085 	beq.w	80027da <HAL_RCC_OscConfig+0x516>
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	461a      	mov	r2, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fde4 	bl	80012c8 <HAL_GetTick>
 8002700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe fddf 	bl	80012c8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d902      	bls.n	800271c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	f000 bcd5 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800272e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0x488>
 8002746:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x4b0>
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002764:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002770:	4b68      	ldr	r3, [pc, #416]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800277a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002786:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0af      	beq.n	8002706 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	21f8      	movs	r1, #248	; 0xf8
 80027b6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027be:	fa91 f1a1 	rbit	r1, r1
 80027c2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80027c6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80027ca:	fab1 f181 	clz	r1, r1
 80027ce:	b2c9      	uxtb	r1, r1
 80027d0:	408b      	lsls	r3, r1
 80027d2:	4950      	ldr	r1, [pc, #320]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e06a      	b.n	80028b0 <HAL_RCC_OscConfig+0x5ec>
 80027da:	2301      	movs	r3, #1
 80027dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	461a      	mov	r2, r3
 8002802:	2300      	movs	r3, #0
 8002804:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe fd5f 	bl	80012c8 <HAL_GetTick>
 800280a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe fd5a 	bl	80012c8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d902      	bls.n	8002826 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	f000 bc50 	b.w	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x592>
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e013      	b.n	800287e <HAL_RCC_OscConfig+0x5ba>
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800286e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_RCC_OscConfig+0x650>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2202      	movs	r2, #2
 8002880:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002884:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002890:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f002 021f 	and.w	r2, r2, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1af      	bne.n	8002810 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80da 	beq.w	8002a74 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d069      	beq.n	800299e <HAL_RCC_OscConfig+0x6da>
 80028ca:	2301      	movs	r3, #1
 80028cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x654>)
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	2301      	movs	r3, #1
 80028f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fce8 	bl	80012c8 <HAL_GetTick>
 80028f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fc:	e00e      	b.n	800291c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fe:	f7fe fce3 	bl	80012c8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d906      	bls.n	800291c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e3d9      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	10908120 	.word	0x10908120
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800292e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002932:	2202      	movs	r2, #2
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800294a:	2202      	movs	r2, #2
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800295c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4ba5      	ldr	r3, [pc, #660]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002962:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002966:	2102      	movs	r1, #2
 8002968:	6019      	str	r1, [r3, #0]
 800296a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f1a3 	rbit	r1, r3
 8002974:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002978:	6019      	str	r1, [r3, #0]
  return result;
 800297a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0b0      	beq.n	80028fe <HAL_RCC_OscConfig+0x63a>
 800299c:	e06a      	b.n	8002a74 <HAL_RCC_OscConfig+0x7b0>
 800299e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b8c      	ldr	r3, [pc, #560]	; (8002bf8 <HAL_RCC_OscConfig+0x934>)
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	461a      	mov	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe fc7a 	bl	80012c8 <HAL_GetTick>
 80029d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	e009      	b.n	80029ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029da:	f7fe fc75 	bl	80012c8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e36b      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 80029ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a22:	2202      	movs	r2, #2
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fa93 f2a3 	rbit	r2, r3
 8002a30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a3e:	2102      	movs	r1, #2
 8002a40:	6019      	str	r1, [r3, #0]
 8002a42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f1a3 	rbit	r1, r3
 8002a4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a50:	6019      	str	r1, [r3, #0]
  return result;
 8002a52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1b2      	bne.n	80029da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8158 	beq.w	8002d34 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a56      	ldr	r2, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	61d3      	str	r3, [r2, #28]
 8002aa2:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f107 0308 	add.w	r3, r7, #8
 8002ab4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <HAL_RCC_OscConfig+0x938>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11a      	bne.n	8002afe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_RCC_OscConfig+0x938>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	; (8002bfc <HAL_RCC_OscConfig+0x938>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fbf8 	bl	80012c8 <HAL_GetTick>
 8002ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e009      	b.n	8002af2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe fbf3 	bl	80012c8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e2e9      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCC_OscConfig+0x938>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ef      	beq.n	8002ade <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x852>
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	e02f      	b.n	8002b76 <HAL_RCC_OscConfig+0x8b2>
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x876>
 8002b20:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	e01d      	b.n	8002b76 <HAL_RCC_OscConfig+0x8b2>
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x89a>
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x8b2>
 8002b5e:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d06b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe fba2 	bl	80012c8 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fb9d 	bl	80012c8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e291      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002ba2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bd0:	601a      	str	r2, [r3, #0]
  return result;
 8002bd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d109      	bne.n	8002c00 <HAL_RCC_OscConfig+0x93c>
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <HAL_RCC_OscConfig+0x930>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	e014      	b.n	8002c1c <HAL_RCC_OscConfig+0x958>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	10908120 	.word	0x10908120
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c04:	2202      	movs	r2, #2
 8002c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4bbb      	ldr	r3, [pc, #748]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c20:	2102      	movs	r1, #2
 8002c22:	6011      	str	r1, [r2, #0]
 8002c24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	fa92 f1a2 	rbit	r1, r2
 8002c2e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c32:	6011      	str	r1, [r2, #0]
  return result;
 8002c34:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	fab2 f282 	clz	r2, r2
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f002 021f 	and.w	r2, r2, #31
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d099      	beq.n	8002b8a <HAL_RCC_OscConfig+0x8c6>
 8002c56:	e063      	b.n	8002d20 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fb36 	bl	80012c8 <HAL_GetTick>
 8002c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fb31 	bl	80012c8 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e225      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002c7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c7e:	2202      	movs	r2, #2
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c96:	2202      	movs	r2, #2
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ca8:	601a      	str	r2, [r3, #0]
  return result;
 8002caa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0xa06>
 8002cc4:	4b90      	ldr	r3, [pc, #576]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	e00d      	b.n	8002ce6 <HAL_RCC_OscConfig+0xa22>
 8002cca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cea:	2102      	movs	r1, #2
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	fa92 f1a2 	rbit	r1, r2
 8002cf8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cfc:	6011      	str	r1, [r2, #0]
  return result;
 8002cfe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1a0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a76      	ldr	r2, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 81c2 	beq.w	80030c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d40:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	f000 819c 	beq.w	8003086 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f040 8114 	bne.w	8002f82 <HAL_RCC_OscConfig+0xcbe>
 8002d5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d72:	601a      	str	r2, [r3, #0]
  return result;
 8002d74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fa9a 	bl	80012c8 <HAL_GetTick>
 8002d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	e009      	b.n	8002dae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fa95 	bl	80012c8 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e18b      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc6:	601a      	str	r2, [r3, #0]
  return result;
 8002dc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_OscConfig+0xb24>
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e01b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb5c>
 8002de8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fa93 f2a3 	rbit	r2, r3
 8002dfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e28:	6011      	str	r1, [r2, #0]
 8002e2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	fa92 f1a2 	rbit	r1, r2
 8002e34:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e38:	6011      	str	r1, [r2, #0]
  return result;
 8002e3a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	fab2 f282 	clz	r2, r2
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f042 0220 	orr.w	r2, r2, #32
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f002 021f 	and.w	r2, r2, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d19e      	bne.n	8002d9a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	4925      	ldr	r1, [pc, #148]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e90:	601a      	str	r2, [r3, #0]
  return result;
 8002e92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e96:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ea2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2301      	movs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe fa0b 	bl	80012c8 <HAL_GetTick>
 8002eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb6:	e009      	b.n	8002ecc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fa06 	bl	80012c8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0fc      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ee4:	601a      	str	r2, [r3, #0]
  return result;
 8002ee6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0xc48>
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <HAL_RCC_OscConfig+0xc44>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	e01e      	b.n	8002f44 <HAL_RCC_OscConfig+0xc80>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f2a3 	rbit	r2, r3
 8002f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0xe0c>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	fa92 f1a2 	rbit	r1, r2
 8002f58:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f5c:	6011      	str	r1, [r2, #0]
  return result;
 8002f5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f042 0220 	orr.w	r2, r2, #32
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d09b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xbf4>
 8002f80:	e0a0      	b.n	80030c4 <HAL_RCC_OscConfig+0xe00>
 8002f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	601a      	str	r2, [r3, #0]
  return result;
 8002f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f986 	bl	80012c8 <HAL_GetTick>
 8002fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	e009      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fe f981 	bl	80012c8 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e077      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
 8002fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f2a3 	rbit	r2, r3
 8002fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fee:	601a      	str	r2, [r3, #0]
  return result;
 8002ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0xd4c>
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_OscConfig+0xe0c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e01b      	b.n	8003048 <HAL_RCC_OscConfig+0xd84>
 8003010:	f107 0320 	add.w	r3, r7, #32
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f107 0320 	add.w	r3, r7, #32
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f107 0318 	add.w	r3, r7, #24
 800302e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCC_OscConfig+0xe0c>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f107 0210 	add.w	r2, r7, #16
 800304c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	f107 0210 	add.w	r2, r7, #16
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	fa92 f1a2 	rbit	r1, r2
 800305c:	f107 020c 	add.w	r2, r7, #12
 8003060:	6011      	str	r1, [r2, #0]
  return result;
 8003062:	f107 020c 	add.w	r2, r7, #12
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0220 	orr.w	r2, r2, #32
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d19e      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xcfe>
 8003084:	e01e      	b.n	80030c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e018      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_OscConfig+0xe0c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800309c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b09e      	sub	sp, #120	; 0x78
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e162      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b90      	ldr	r3, [pc, #576]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	498b      	ldr	r1, [pc, #556]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b89      	ldr	r3, [pc, #548]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e14a      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b82      	ldr	r3, [pc, #520]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	497f      	ldr	r1, [pc, #508]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80dc 	beq.w	8003300 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d13c      	bne.n	80031ca <HAL_RCC_ClockConfig+0xf6>
 8003150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003154:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800315e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_RCC_ClockConfig+0xa6>
 8003174:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e00f      	b.n	800319a <HAL_RCC_ClockConfig+0xc6>
 800317a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	667b      	str	r3, [r7, #100]	; 0x64
 8003188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800318c:	663b      	str	r3, [r7, #96]	; 0x60
 800318e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800319e:	65ba      	str	r2, [r7, #88]	; 0x58
 80031a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a2:	fa92 f2a2 	rbit	r2, r2
 80031a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d17b      	bne.n	80032be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0f3      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d13c      	bne.n	800324c <HAL_RCC_ClockConfig+0x178>
 80031d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d102      	bne.n	80031fc <HAL_RCC_ClockConfig+0x128>
 80031f6:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	e00f      	b.n	800321c <HAL_RCC_ClockConfig+0x148>
 80031fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003200:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
 800320a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
 8003210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003218:	4b46      	ldr	r3, [pc, #280]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003220:	63ba      	str	r2, [r7, #56]	; 0x38
 8003222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800322a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f042 0220 	orr.w	r2, r2, #32
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f002 021f 	and.w	r2, r2, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13a      	bne.n	80032be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0b2      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
 800324c:	2302      	movs	r3, #2
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d102      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1a0>
 800326e:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e00d      	b.n	8003290 <HAL_RCC_ClockConfig+0x1bc>
 8003274:	2302      	movs	r3, #2
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	2302      	movs	r3, #2
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2202      	movs	r2, #2
 8003292:	61ba      	str	r2, [r7, #24]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	fa92 f2a2 	rbit	r2, r2
 800329a:	617a      	str	r2, [r7, #20]
  return result;
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f042 0220 	orr.w	r2, r2, #32
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e079      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	491a      	ldr	r1, [pc, #104]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fd fffa 	bl	80012c8 <HAL_GetTick>
 80032d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fd fff6 	bl	80012c8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e061      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_RCC_ClockConfig+0x260>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d214      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_RCC_ClockConfig+0x25c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e040      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2de>
 8003330:	40022000 	.word	0x40022000
 8003334:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCC_ClockConfig+0x2e8>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	491a      	ldr	r1, [pc, #104]	; (80033bc <HAL_RCC_ClockConfig+0x2e8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x2e8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4912      	ldr	r1, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x2e8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003376:	f000 f829 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800337a:	4601      	mov	r1, r0
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_RCC_ClockConfig+0x2e8>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003384:	22f0      	movs	r2, #240	; 0xf0
 8003386:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	fa92 f2a2 	rbit	r2, r2
 800338e:	60fa      	str	r2, [r7, #12]
  return result;
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	fab2 f282 	clz	r2, r2
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	40d3      	lsrs	r3, r2
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x2ec>)
 800339c:	5cd3      	ldrb	r3, [r2, r3]
 800339e:	fa21 f303 	lsr.w	r3, r1, r3
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_RCC_ClockConfig+0x2f0>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_ClockConfig+0x2f4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd ff48 	bl	8001240 <HAL_InitTick>
  
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3778      	adds	r7, #120	; 0x78
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08006838 	.word	0x08006838
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b08b      	sub	sp, #44	; 0x2c
 80033d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x30>
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x36>
 80033fa:	e03c      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033fe:	623b      	str	r3, [r7, #32]
      break;
 8003400:	e03c      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003408:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800340c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	fa92 f2a2 	rbit	r2, r2
 8003414:	607a      	str	r2, [r7, #4]
  return result;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	fab2 f282 	clz	r2, r2
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	40d3      	lsrs	r3, r2
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003426:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	220f      	movs	r2, #15
 8003430:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	fa92 f2a2 	rbit	r2, r2
 8003438:	60fa      	str	r2, [r7, #12]
  return result;
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	fab2 f282 	clz	r2, r2
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	40d3      	lsrs	r3, r2
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	fbb2 f2f3 	udiv	r2, r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e004      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4a0c      	ldr	r2, [pc, #48]	; (800349c <HAL_RCC_GetSysClockFreq+0xd0>)
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	623b      	str	r3, [r7, #32]
      break;
 8003474:	e002      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003478:	623b      	str	r3, [r7, #32]
      break;
 800347a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347c:	6a3b      	ldr	r3, [r7, #32]
}
 800347e:	4618      	mov	r0, r3
 8003480:	372c      	adds	r7, #44	; 0x2c
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	007a1200 	.word	0x007a1200
 8003494:	08006850 	.word	0x08006850
 8003498:	08006860 	.word	0x08006860
 800349c:	003d0900 	.word	0x003d0900

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000000 	.word	0x20000000

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034be:	f7ff ffef 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034c2:	4601      	mov	r1, r0
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	fa92 f2a2 	rbit	r2, r2
 80034d8:	603a      	str	r2, [r7, #0]
  return result;
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	fab2 f282 	clz	r2, r2
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	40d3      	lsrs	r3, r2
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08006848 	.word	0x08006848

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003502:	f7ff ffcd 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 8003506:	4601      	mov	r1, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003510:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003514:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	603a      	str	r2, [r7, #0]
  return result;
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	40d3      	lsrs	r3, r2
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_RCC_GetPCLK2Freq+0x40>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
 800352c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	08006848 	.word	0x08006848

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b092      	sub	sp, #72	; 0x48
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80cd 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003564:	4b8e      	ldr	r3, [pc, #568]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10e      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	4a8a      	ldr	r2, [pc, #552]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	61d3      	str	r3, [r2, #28]
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b85      	ldr	r3, [pc, #532]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a81      	ldr	r2, [pc, #516]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fd fe8f 	bl	80012c8 <HAL_GetTick>
 80035aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fd fe8b 	bl	80012c8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0ea      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b78      	ldr	r3, [pc, #480]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035cc:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d07d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d076      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ea:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	461a      	mov	r2, r3
 8003614:	2301      	movs	r3, #1
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2300      	movs	r3, #0
 800363a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d045      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fd fe3c 	bl	80012c8 <HAL_GetTick>
 8003650:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	e00a      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fe38 	bl	80012c8 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e095      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800366a:	2302      	movs	r3, #2
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	2302      	movs	r3, #2
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	61fb      	str	r3, [r7, #28]
  return result;
 8003682:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d102      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	e007      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800369e:	2302      	movs	r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2202      	movs	r2, #2
 80036b0:	613a      	str	r2, [r7, #16]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	fa92 f2a2 	rbit	r2, r2
 80036b8:	60fa      	str	r2, [r7, #12]
  return result;
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	fab2 f282 	clz	r2, r2
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f002 021f 	and.w	r2, r2, #31
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f202 	lsl.w	r2, r1, r2
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0bd      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	492e      	ldr	r1, [pc, #184]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f2:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003718:	4313      	orrs	r3, r2
 800371a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f023 0210 	bic.w	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	491a      	ldr	r1, [pc, #104]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003736:	4313      	orrs	r3, r2
 8003738:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	4913      	ldr	r1, [pc, #76]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	4313      	orrs	r3, r2
 8003756:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	490b      	ldr	r1, [pc, #44]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	4313      	orrs	r3, r2
 8003774:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	4313      	orrs	r3, r2
 8003792:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3748      	adds	r7, #72	; 0x48
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	10908100 	.word	0x10908100

080037ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e040      	b.n	8003840 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fbb2 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	; 0x24
 80037d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f82c 	bl	8003848 <UART_SetConfig>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e022      	b.n	8003840 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f956 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f9dd 	bl	8003bf8 <UART_CheckIdleState>
 800383e:	4603      	mov	r3, r0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <UART_SetConfig+0x254>)
 8003874:	4013      	ands	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	430b      	orrs	r3, r1
 800387e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a78      	ldr	r2, [pc, #480]	; (8003aa0 <UART_SetConfig+0x258>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d120      	bne.n	8003906 <UART_SetConfig+0xbe>
 80038c4:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <UART_SetConfig+0x25c>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d817      	bhi.n	8003900 <UART_SetConfig+0xb8>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <UART_SetConfig+0x90>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038f5 	.word	0x080038f5
 80038e0:	080038fb 	.word	0x080038fb
 80038e4:	080038ef 	.word	0x080038ef
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e01d      	b.n	800392a <UART_SetConfig+0xe2>
 80038ee:	2302      	movs	r3, #2
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e01a      	b.n	800392a <UART_SetConfig+0xe2>
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e017      	b.n	800392a <UART_SetConfig+0xe2>
 80038fa:	2308      	movs	r3, #8
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e014      	b.n	800392a <UART_SetConfig+0xe2>
 8003900:	2310      	movs	r3, #16
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e011      	b.n	800392a <UART_SetConfig+0xe2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <UART_SetConfig+0x260>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d102      	bne.n	8003916 <UART_SetConfig+0xce>
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e009      	b.n	800392a <UART_SetConfig+0xe2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a64      	ldr	r2, [pc, #400]	; (8003aac <UART_SetConfig+0x264>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d102      	bne.n	8003926 <UART_SetConfig+0xde>
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e001      	b.n	800392a <UART_SetConfig+0xe2>
 8003926:	2310      	movs	r3, #16
 8003928:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003932:	d15b      	bne.n	80039ec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003934:	7ffb      	ldrb	r3, [r7, #31]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d827      	bhi.n	800398a <UART_SetConfig+0x142>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0xf8>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003965 	.word	0x08003965
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398b 	.word	0x0800398b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800398b 	.word	0x0800398b
 8003958:	0800398b 	.word	0x0800398b
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003964:	f7ff fda8 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8003968:	61b8      	str	r0, [r7, #24]
        break;
 800396a:	e013      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fdc6 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 8003970:	61b8      	str	r0, [r7, #24]
        break;
 8003972:	e00f      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <UART_SetConfig+0x268>)
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e00c      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff fd27 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800397e:	61b8      	str	r0, [r7, #24]
        break;
 8003980:	e008      	b.n	8003994 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	61bb      	str	r3, [r7, #24]
        break;
 8003988:	e004      	b.n	8003994 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	77bb      	strb	r3, [r7, #30]
        break;
 8003992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d074      	beq.n	8003a84 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	005a      	lsls	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d916      	bls.n	80039e6 <UART_SetConfig+0x19e>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d212      	bcs.n	80039e6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	4313      	orrs	r3, r2
 80039da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	89fa      	ldrh	r2, [r7, #14]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e04e      	b.n	8003a84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77bb      	strb	r3, [r7, #30]
 80039ea:	e04b      	b.n	8003a84 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d827      	bhi.n	8003a42 <UART_SetConfig+0x1fa>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x1b0>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7ff fd4c 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8003a20:	61b8      	str	r0, [r7, #24]
        break;
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7ff fd6a 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <UART_SetConfig+0x268>)
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7ff fccb 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8003a36:	61b8      	str	r0, [r7, #24]
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e004      	b.n	8003a4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	085a      	lsrs	r2, r3, #1
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d908      	bls.n	8003a80 <UART_SetConfig+0x238>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d204      	bcs.n	8003a80 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	e001      	b.n	8003a84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	efff69f3 	.word	0xefff69f3
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fd fb5e 	bl	80012c8 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10e      	bne.n	8003c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f82d 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e023      	b.n	8003c82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d10e      	bne.n	8003c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f817 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00d      	b.n	8003c82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b09c      	sub	sp, #112	; 0x70
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9a:	e0a5      	b.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	f000 80a1 	beq.w	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fd fb0f 	bl	80012c8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8003cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13e      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e6      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	663b      	str	r3, [r7, #96]	; 0x60
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e5      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e067      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d04f      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d56:	d147      	bne.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	613b      	str	r3, [r7, #16]
   return(result);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003db4:	623a      	str	r2, [r7, #32]
 8003db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	69f9      	ldr	r1, [r7, #28]
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e010      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	f43f af4a 	beq.w	8003c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3770      	adds	r7, #112	; 0x70
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <__errno>:
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <__errno+0x8>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4d0d      	ldr	r5, [pc, #52]	; (8003e58 <__libc_init_array+0x38>)
 8003e24:	4c0d      	ldr	r4, [pc, #52]	; (8003e5c <__libc_init_array+0x3c>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	4d0b      	ldr	r5, [pc, #44]	; (8003e60 <__libc_init_array+0x40>)
 8003e32:	4c0c      	ldr	r4, [pc, #48]	; (8003e64 <__libc_init_array+0x44>)
 8003e34:	f002 fcf2 	bl	800681c <_init>
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	08006c54 	.word	0x08006c54
 8003e5c:	08006c54 	.word	0x08006c54
 8003e60:	08006c54 	.word	0x08006c54
 8003e64:	08006c58 	.word	0x08006c58

08003e68 <malloc>:
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <malloc+0xc>)
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f000 b869 	b.w	8003f44 <_malloc_r>
 8003e72:	bf00      	nop
 8003e74:	2000000c 	.word	0x2000000c

08003e78 <memcpy>:
 8003e78:	440a      	add	r2, r1
 8003e7a:	4291      	cmp	r1, r2
 8003e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e80:	d100      	bne.n	8003e84 <memcpy+0xc>
 8003e82:	4770      	bx	lr
 8003e84:	b510      	push	{r4, lr}
 8003e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e8e:	4291      	cmp	r1, r2
 8003e90:	d1f9      	bne.n	8003e86 <memcpy+0xe>
 8003e92:	bd10      	pop	{r4, pc}

08003e94 <memset>:
 8003e94:	4402      	add	r2, r0
 8003e96:	4603      	mov	r3, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <_free_r>:
 8003ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	d048      	beq.n	8003f3c <_free_r+0x98>
 8003eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eae:	9001      	str	r0, [sp, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8003eb6:	bfb8      	it	lt
 8003eb8:	18e4      	addlt	r4, r4, r3
 8003eba:	f001 fb95 	bl	80055e8 <__malloc_lock>
 8003ebe:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <_free_r+0x9c>)
 8003ec0:	9801      	ldr	r0, [sp, #4]
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	b933      	cbnz	r3, 8003ed6 <_free_r+0x32>
 8003ec8:	6063      	str	r3, [r4, #4]
 8003eca:	6014      	str	r4, [r2, #0]
 8003ecc:	b003      	add	sp, #12
 8003ece:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ed2:	f001 bb8f 	b.w	80055f4 <__malloc_unlock>
 8003ed6:	42a3      	cmp	r3, r4
 8003ed8:	d90b      	bls.n	8003ef2 <_free_r+0x4e>
 8003eda:	6821      	ldr	r1, [r4, #0]
 8003edc:	1862      	adds	r2, r4, r1
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	bf04      	itt	eq
 8003ee2:	681a      	ldreq	r2, [r3, #0]
 8003ee4:	685b      	ldreq	r3, [r3, #4]
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	bf04      	itt	eq
 8003eea:	1852      	addeq	r2, r2, r1
 8003eec:	6022      	streq	r2, [r4, #0]
 8003eee:	602c      	str	r4, [r5, #0]
 8003ef0:	e7ec      	b.n	8003ecc <_free_r+0x28>
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	b10b      	cbz	r3, 8003efc <_free_r+0x58>
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	d9fa      	bls.n	8003ef2 <_free_r+0x4e>
 8003efc:	6811      	ldr	r1, [r2, #0]
 8003efe:	1855      	adds	r5, r2, r1
 8003f00:	42a5      	cmp	r5, r4
 8003f02:	d10b      	bne.n	8003f1c <_free_r+0x78>
 8003f04:	6824      	ldr	r4, [r4, #0]
 8003f06:	4421      	add	r1, r4
 8003f08:	1854      	adds	r4, r2, r1
 8003f0a:	42a3      	cmp	r3, r4
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	d1dd      	bne.n	8003ecc <_free_r+0x28>
 8003f10:	681c      	ldr	r4, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	6053      	str	r3, [r2, #4]
 8003f16:	4421      	add	r1, r4
 8003f18:	6011      	str	r1, [r2, #0]
 8003f1a:	e7d7      	b.n	8003ecc <_free_r+0x28>
 8003f1c:	d902      	bls.n	8003f24 <_free_r+0x80>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	6003      	str	r3, [r0, #0]
 8003f22:	e7d3      	b.n	8003ecc <_free_r+0x28>
 8003f24:	6825      	ldr	r5, [r4, #0]
 8003f26:	1961      	adds	r1, r4, r5
 8003f28:	428b      	cmp	r3, r1
 8003f2a:	bf04      	itt	eq
 8003f2c:	6819      	ldreq	r1, [r3, #0]
 8003f2e:	685b      	ldreq	r3, [r3, #4]
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	bf04      	itt	eq
 8003f34:	1949      	addeq	r1, r1, r5
 8003f36:	6021      	streq	r1, [r4, #0]
 8003f38:	6054      	str	r4, [r2, #4]
 8003f3a:	e7c7      	b.n	8003ecc <_free_r+0x28>
 8003f3c:	b003      	add	sp, #12
 8003f3e:	bd30      	pop	{r4, r5, pc}
 8003f40:	200001fc 	.word	0x200001fc

08003f44 <_malloc_r>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	1ccd      	adds	r5, r1, #3
 8003f48:	f025 0503 	bic.w	r5, r5, #3
 8003f4c:	3508      	adds	r5, #8
 8003f4e:	2d0c      	cmp	r5, #12
 8003f50:	bf38      	it	cc
 8003f52:	250c      	movcc	r5, #12
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	4606      	mov	r6, r0
 8003f58:	db01      	blt.n	8003f5e <_malloc_r+0x1a>
 8003f5a:	42a9      	cmp	r1, r5
 8003f5c:	d903      	bls.n	8003f66 <_malloc_r+0x22>
 8003f5e:	230c      	movs	r3, #12
 8003f60:	6033      	str	r3, [r6, #0]
 8003f62:	2000      	movs	r0, #0
 8003f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f66:	f001 fb3f 	bl	80055e8 <__malloc_lock>
 8003f6a:	4921      	ldr	r1, [pc, #132]	; (8003ff0 <_malloc_r+0xac>)
 8003f6c:	680a      	ldr	r2, [r1, #0]
 8003f6e:	4614      	mov	r4, r2
 8003f70:	b99c      	cbnz	r4, 8003f9a <_malloc_r+0x56>
 8003f72:	4f20      	ldr	r7, [pc, #128]	; (8003ff4 <_malloc_r+0xb0>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	b923      	cbnz	r3, 8003f82 <_malloc_r+0x3e>
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 fca6 	bl	80048cc <_sbrk_r>
 8003f80:	6038      	str	r0, [r7, #0]
 8003f82:	4629      	mov	r1, r5
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 fca1 	bl	80048cc <_sbrk_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	d123      	bne.n	8003fd6 <_malloc_r+0x92>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	4630      	mov	r0, r6
 8003f94:	f001 fb2e 	bl	80055f4 <__malloc_unlock>
 8003f98:	e7e3      	b.n	8003f62 <_malloc_r+0x1e>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	1b5b      	subs	r3, r3, r5
 8003f9e:	d417      	bmi.n	8003fd0 <_malloc_r+0x8c>
 8003fa0:	2b0b      	cmp	r3, #11
 8003fa2:	d903      	bls.n	8003fac <_malloc_r+0x68>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	441c      	add	r4, r3
 8003fa8:	6025      	str	r5, [r4, #0]
 8003faa:	e004      	b.n	8003fb6 <_malloc_r+0x72>
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	42a2      	cmp	r2, r4
 8003fb0:	bf0c      	ite	eq
 8003fb2:	600b      	streq	r3, [r1, #0]
 8003fb4:	6053      	strne	r3, [r2, #4]
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f001 fb1c 	bl	80055f4 <__malloc_unlock>
 8003fbc:	f104 000b 	add.w	r0, r4, #11
 8003fc0:	1d23      	adds	r3, r4, #4
 8003fc2:	f020 0007 	bic.w	r0, r0, #7
 8003fc6:	1ac2      	subs	r2, r0, r3
 8003fc8:	d0cc      	beq.n	8003f64 <_malloc_r+0x20>
 8003fca:	1a1b      	subs	r3, r3, r0
 8003fcc:	50a3      	str	r3, [r4, r2]
 8003fce:	e7c9      	b.n	8003f64 <_malloc_r+0x20>
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	6864      	ldr	r4, [r4, #4]
 8003fd4:	e7cc      	b.n	8003f70 <_malloc_r+0x2c>
 8003fd6:	1cc4      	adds	r4, r0, #3
 8003fd8:	f024 0403 	bic.w	r4, r4, #3
 8003fdc:	42a0      	cmp	r0, r4
 8003fde:	d0e3      	beq.n	8003fa8 <_malloc_r+0x64>
 8003fe0:	1a21      	subs	r1, r4, r0
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f000 fc72 	bl	80048cc <_sbrk_r>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d1dd      	bne.n	8003fa8 <_malloc_r+0x64>
 8003fec:	e7cf      	b.n	8003f8e <_malloc_r+0x4a>
 8003fee:	bf00      	nop
 8003ff0:	200001fc 	.word	0x200001fc
 8003ff4:	20000200 	.word	0x20000200

08003ff8 <__cvt>:
 8003ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	ec55 4b10 	vmov	r4, r5, d0
 8004000:	2d00      	cmp	r5, #0
 8004002:	460e      	mov	r6, r1
 8004004:	4619      	mov	r1, r3
 8004006:	462b      	mov	r3, r5
 8004008:	bfbb      	ittet	lt
 800400a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800400e:	461d      	movlt	r5, r3
 8004010:	2300      	movge	r3, #0
 8004012:	232d      	movlt	r3, #45	; 0x2d
 8004014:	700b      	strb	r3, [r1, #0]
 8004016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800401c:	4691      	mov	r9, r2
 800401e:	f023 0820 	bic.w	r8, r3, #32
 8004022:	bfbc      	itt	lt
 8004024:	4622      	movlt	r2, r4
 8004026:	4614      	movlt	r4, r2
 8004028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800402c:	d005      	beq.n	800403a <__cvt+0x42>
 800402e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004032:	d100      	bne.n	8004036 <__cvt+0x3e>
 8004034:	3601      	adds	r6, #1
 8004036:	2102      	movs	r1, #2
 8004038:	e000      	b.n	800403c <__cvt+0x44>
 800403a:	2103      	movs	r1, #3
 800403c:	ab03      	add	r3, sp, #12
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	ab02      	add	r3, sp, #8
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	ec45 4b10 	vmov	d0, r4, r5
 8004048:	4653      	mov	r3, sl
 800404a:	4632      	mov	r2, r6
 800404c:	f000 fcdc 	bl	8004a08 <_dtoa_r>
 8004050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004054:	4607      	mov	r7, r0
 8004056:	d102      	bne.n	800405e <__cvt+0x66>
 8004058:	f019 0f01 	tst.w	r9, #1
 800405c:	d022      	beq.n	80040a4 <__cvt+0xac>
 800405e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004062:	eb07 0906 	add.w	r9, r7, r6
 8004066:	d110      	bne.n	800408a <__cvt+0x92>
 8004068:	783b      	ldrb	r3, [r7, #0]
 800406a:	2b30      	cmp	r3, #48	; 0x30
 800406c:	d10a      	bne.n	8004084 <__cvt+0x8c>
 800406e:	2200      	movs	r2, #0
 8004070:	2300      	movs	r3, #0
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
 8004076:	f7fc fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800407a:	b918      	cbnz	r0, 8004084 <__cvt+0x8c>
 800407c:	f1c6 0601 	rsb	r6, r6, #1
 8004080:	f8ca 6000 	str.w	r6, [sl]
 8004084:	f8da 3000 	ldr.w	r3, [sl]
 8004088:	4499      	add	r9, r3
 800408a:	2200      	movs	r2, #0
 800408c:	2300      	movs	r3, #0
 800408e:	4620      	mov	r0, r4
 8004090:	4629      	mov	r1, r5
 8004092:	f7fc fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8004096:	b108      	cbz	r0, 800409c <__cvt+0xa4>
 8004098:	f8cd 900c 	str.w	r9, [sp, #12]
 800409c:	2230      	movs	r2, #48	; 0x30
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	454b      	cmp	r3, r9
 80040a2:	d307      	bcc.n	80040b4 <__cvt+0xbc>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040a8:	1bdb      	subs	r3, r3, r7
 80040aa:	4638      	mov	r0, r7
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	b004      	add	sp, #16
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	1c59      	adds	r1, r3, #1
 80040b6:	9103      	str	r1, [sp, #12]
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e7f0      	b.n	800409e <__cvt+0xa6>

080040bc <__exponent>:
 80040bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040be:	4603      	mov	r3, r0
 80040c0:	2900      	cmp	r1, #0
 80040c2:	bfb8      	it	lt
 80040c4:	4249      	neglt	r1, r1
 80040c6:	f803 2b02 	strb.w	r2, [r3], #2
 80040ca:	bfb4      	ite	lt
 80040cc:	222d      	movlt	r2, #45	; 0x2d
 80040ce:	222b      	movge	r2, #43	; 0x2b
 80040d0:	2909      	cmp	r1, #9
 80040d2:	7042      	strb	r2, [r0, #1]
 80040d4:	dd2a      	ble.n	800412c <__exponent+0x70>
 80040d6:	f10d 0407 	add.w	r4, sp, #7
 80040da:	46a4      	mov	ip, r4
 80040dc:	270a      	movs	r7, #10
 80040de:	46a6      	mov	lr, r4
 80040e0:	460a      	mov	r2, r1
 80040e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80040e6:	fb07 1516 	mls	r5, r7, r6, r1
 80040ea:	3530      	adds	r5, #48	; 0x30
 80040ec:	2a63      	cmp	r2, #99	; 0x63
 80040ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80040f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040f6:	4631      	mov	r1, r6
 80040f8:	dcf1      	bgt.n	80040de <__exponent+0x22>
 80040fa:	3130      	adds	r1, #48	; 0x30
 80040fc:	f1ae 0502 	sub.w	r5, lr, #2
 8004100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004104:	1c44      	adds	r4, r0, #1
 8004106:	4629      	mov	r1, r5
 8004108:	4561      	cmp	r1, ip
 800410a:	d30a      	bcc.n	8004122 <__exponent+0x66>
 800410c:	f10d 0209 	add.w	r2, sp, #9
 8004110:	eba2 020e 	sub.w	r2, r2, lr
 8004114:	4565      	cmp	r5, ip
 8004116:	bf88      	it	hi
 8004118:	2200      	movhi	r2, #0
 800411a:	4413      	add	r3, r2
 800411c:	1a18      	subs	r0, r3, r0
 800411e:	b003      	add	sp, #12
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800412a:	e7ed      	b.n	8004108 <__exponent+0x4c>
 800412c:	2330      	movs	r3, #48	; 0x30
 800412e:	3130      	adds	r1, #48	; 0x30
 8004130:	7083      	strb	r3, [r0, #2]
 8004132:	70c1      	strb	r1, [r0, #3]
 8004134:	1d03      	adds	r3, r0, #4
 8004136:	e7f1      	b.n	800411c <__exponent+0x60>

08004138 <_printf_float>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	ed2d 8b02 	vpush	{d8}
 8004140:	b08d      	sub	sp, #52	; 0x34
 8004142:	460c      	mov	r4, r1
 8004144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004148:	4616      	mov	r6, r2
 800414a:	461f      	mov	r7, r3
 800414c:	4605      	mov	r5, r0
 800414e:	f001 fa47 	bl	80055e0 <_localeconv_r>
 8004152:	f8d0 a000 	ldr.w	sl, [r0]
 8004156:	4650      	mov	r0, sl
 8004158:	f7fc f83a 	bl	80001d0 <strlen>
 800415c:	2300      	movs	r3, #0
 800415e:	930a      	str	r3, [sp, #40]	; 0x28
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	f8d8 3000 	ldr.w	r3, [r8]
 8004168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800416c:	3307      	adds	r3, #7
 800416e:	f023 0307 	bic.w	r3, r3, #7
 8004172:	f103 0208 	add.w	r2, r3, #8
 8004176:	f8c8 2000 	str.w	r2, [r8]
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800418a:	9307      	str	r3, [sp, #28]
 800418c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004190:	ee08 0a10 	vmov	s16, r0
 8004194:	4b9f      	ldr	r3, [pc, #636]	; (8004414 <_printf_float+0x2dc>)
 8004196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800419a:	f04f 32ff 	mov.w	r2, #4294967295
 800419e:	f7fc fcc5 	bl	8000b2c <__aeabi_dcmpun>
 80041a2:	bb88      	cbnz	r0, 8004208 <_printf_float+0xd0>
 80041a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a8:	4b9a      	ldr	r3, [pc, #616]	; (8004414 <_printf_float+0x2dc>)
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	f7fc fc9f 	bl	8000af0 <__aeabi_dcmple>
 80041b2:	bb48      	cbnz	r0, 8004208 <_printf_float+0xd0>
 80041b4:	2200      	movs	r2, #0
 80041b6:	2300      	movs	r3, #0
 80041b8:	4640      	mov	r0, r8
 80041ba:	4649      	mov	r1, r9
 80041bc:	f7fc fc8e 	bl	8000adc <__aeabi_dcmplt>
 80041c0:	b110      	cbz	r0, 80041c8 <_printf_float+0x90>
 80041c2:	232d      	movs	r3, #45	; 0x2d
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c8:	4b93      	ldr	r3, [pc, #588]	; (8004418 <_printf_float+0x2e0>)
 80041ca:	4894      	ldr	r0, [pc, #592]	; (800441c <_printf_float+0x2e4>)
 80041cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80041d0:	bf94      	ite	ls
 80041d2:	4698      	movls	r8, r3
 80041d4:	4680      	movhi	r8, r0
 80041d6:	2303      	movs	r3, #3
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	9b05      	ldr	r3, [sp, #20]
 80041dc:	f023 0204 	bic.w	r2, r3, #4
 80041e0:	6022      	str	r2, [r4, #0]
 80041e2:	f04f 0900 	mov.w	r9, #0
 80041e6:	9700      	str	r7, [sp, #0]
 80041e8:	4633      	mov	r3, r6
 80041ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80041ec:	4621      	mov	r1, r4
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 f9d8 	bl	80045a4 <_printf_common>
 80041f4:	3001      	adds	r0, #1
 80041f6:	f040 8090 	bne.w	800431a <_printf_float+0x1e2>
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	b00d      	add	sp, #52	; 0x34
 8004200:	ecbd 8b02 	vpop	{d8}
 8004204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	4640      	mov	r0, r8
 800420e:	4649      	mov	r1, r9
 8004210:	f7fc fc8c 	bl	8000b2c <__aeabi_dcmpun>
 8004214:	b140      	cbz	r0, 8004228 <_printf_float+0xf0>
 8004216:	464b      	mov	r3, r9
 8004218:	2b00      	cmp	r3, #0
 800421a:	bfbc      	itt	lt
 800421c:	232d      	movlt	r3, #45	; 0x2d
 800421e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004222:	487f      	ldr	r0, [pc, #508]	; (8004420 <_printf_float+0x2e8>)
 8004224:	4b7f      	ldr	r3, [pc, #508]	; (8004424 <_printf_float+0x2ec>)
 8004226:	e7d1      	b.n	80041cc <_printf_float+0x94>
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800422e:	9206      	str	r2, [sp, #24]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	d13f      	bne.n	80042b4 <_printf_float+0x17c>
 8004234:	2306      	movs	r3, #6
 8004236:	6063      	str	r3, [r4, #4]
 8004238:	9b05      	ldr	r3, [sp, #20]
 800423a:	6861      	ldr	r1, [r4, #4]
 800423c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004240:	2300      	movs	r3, #0
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	ab0a      	add	r3, sp, #40	; 0x28
 8004246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800424a:	ab09      	add	r3, sp, #36	; 0x24
 800424c:	ec49 8b10 	vmov	d0, r8, r9
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6022      	str	r2, [r4, #0]
 8004254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004258:	4628      	mov	r0, r5
 800425a:	f7ff fecd 	bl	8003ff8 <__cvt>
 800425e:	9b06      	ldr	r3, [sp, #24]
 8004260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004262:	2b47      	cmp	r3, #71	; 0x47
 8004264:	4680      	mov	r8, r0
 8004266:	d108      	bne.n	800427a <_printf_float+0x142>
 8004268:	1cc8      	adds	r0, r1, #3
 800426a:	db02      	blt.n	8004272 <_printf_float+0x13a>
 800426c:	6863      	ldr	r3, [r4, #4]
 800426e:	4299      	cmp	r1, r3
 8004270:	dd41      	ble.n	80042f6 <_printf_float+0x1be>
 8004272:	f1ab 0b02 	sub.w	fp, fp, #2
 8004276:	fa5f fb8b 	uxtb.w	fp, fp
 800427a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800427e:	d820      	bhi.n	80042c2 <_printf_float+0x18a>
 8004280:	3901      	subs	r1, #1
 8004282:	465a      	mov	r2, fp
 8004284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004288:	9109      	str	r1, [sp, #36]	; 0x24
 800428a:	f7ff ff17 	bl	80040bc <__exponent>
 800428e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004290:	1813      	adds	r3, r2, r0
 8004292:	2a01      	cmp	r2, #1
 8004294:	4681      	mov	r9, r0
 8004296:	6123      	str	r3, [r4, #16]
 8004298:	dc02      	bgt.n	80042a0 <_printf_float+0x168>
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	07d2      	lsls	r2, r2, #31
 800429e:	d501      	bpl.n	80042a4 <_printf_float+0x16c>
 80042a0:	3301      	adds	r3, #1
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d09c      	beq.n	80041e6 <_printf_float+0xae>
 80042ac:	232d      	movs	r3, #45	; 0x2d
 80042ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b2:	e798      	b.n	80041e6 <_printf_float+0xae>
 80042b4:	9a06      	ldr	r2, [sp, #24]
 80042b6:	2a47      	cmp	r2, #71	; 0x47
 80042b8:	d1be      	bne.n	8004238 <_printf_float+0x100>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1bc      	bne.n	8004238 <_printf_float+0x100>
 80042be:	2301      	movs	r3, #1
 80042c0:	e7b9      	b.n	8004236 <_printf_float+0xfe>
 80042c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80042c6:	d118      	bne.n	80042fa <_printf_float+0x1c2>
 80042c8:	2900      	cmp	r1, #0
 80042ca:	6863      	ldr	r3, [r4, #4]
 80042cc:	dd0b      	ble.n	80042e6 <_printf_float+0x1ae>
 80042ce:	6121      	str	r1, [r4, #16]
 80042d0:	b913      	cbnz	r3, 80042d8 <_printf_float+0x1a0>
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	07d0      	lsls	r0, r2, #31
 80042d6:	d502      	bpl.n	80042de <_printf_float+0x1a6>
 80042d8:	3301      	adds	r3, #1
 80042da:	440b      	add	r3, r1
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	65a1      	str	r1, [r4, #88]	; 0x58
 80042e0:	f04f 0900 	mov.w	r9, #0
 80042e4:	e7de      	b.n	80042a4 <_printf_float+0x16c>
 80042e6:	b913      	cbnz	r3, 80042ee <_printf_float+0x1b6>
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	07d2      	lsls	r2, r2, #31
 80042ec:	d501      	bpl.n	80042f2 <_printf_float+0x1ba>
 80042ee:	3302      	adds	r3, #2
 80042f0:	e7f4      	b.n	80042dc <_printf_float+0x1a4>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e7f2      	b.n	80042dc <_printf_float+0x1a4>
 80042f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80042fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fc:	4299      	cmp	r1, r3
 80042fe:	db05      	blt.n	800430c <_printf_float+0x1d4>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	6121      	str	r1, [r4, #16]
 8004304:	07d8      	lsls	r0, r3, #31
 8004306:	d5ea      	bpl.n	80042de <_printf_float+0x1a6>
 8004308:	1c4b      	adds	r3, r1, #1
 800430a:	e7e7      	b.n	80042dc <_printf_float+0x1a4>
 800430c:	2900      	cmp	r1, #0
 800430e:	bfd4      	ite	le
 8004310:	f1c1 0202 	rsble	r2, r1, #2
 8004314:	2201      	movgt	r2, #1
 8004316:	4413      	add	r3, r2
 8004318:	e7e0      	b.n	80042dc <_printf_float+0x1a4>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	055a      	lsls	r2, r3, #21
 800431e:	d407      	bmi.n	8004330 <_printf_float+0x1f8>
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	4642      	mov	r2, r8
 8004324:	4631      	mov	r1, r6
 8004326:	4628      	mov	r0, r5
 8004328:	47b8      	blx	r7
 800432a:	3001      	adds	r0, #1
 800432c:	d12c      	bne.n	8004388 <_printf_float+0x250>
 800432e:	e764      	b.n	80041fa <_printf_float+0xc2>
 8004330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004334:	f240 80e0 	bls.w	80044f8 <_printf_float+0x3c0>
 8004338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800433c:	2200      	movs	r2, #0
 800433e:	2300      	movs	r3, #0
 8004340:	f7fc fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004344:	2800      	cmp	r0, #0
 8004346:	d034      	beq.n	80043b2 <_printf_float+0x27a>
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <_printf_float+0x2f0>)
 800434a:	2301      	movs	r3, #1
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	f43f af51 	beq.w	80041fa <_printf_float+0xc2>
 8004358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800435c:	429a      	cmp	r2, r3
 800435e:	db02      	blt.n	8004366 <_printf_float+0x22e>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07d8      	lsls	r0, r3, #31
 8004364:	d510      	bpl.n	8004388 <_printf_float+0x250>
 8004366:	ee18 3a10 	vmov	r3, s16
 800436a:	4652      	mov	r2, sl
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af41 	beq.w	80041fa <_printf_float+0xc2>
 8004378:	f04f 0800 	mov.w	r8, #0
 800437c:	f104 091a 	add.w	r9, r4, #26
 8004380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	4543      	cmp	r3, r8
 8004386:	dc09      	bgt.n	800439c <_printf_float+0x264>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	079b      	lsls	r3, r3, #30
 800438c:	f100 8105 	bmi.w	800459a <_printf_float+0x462>
 8004390:	68e0      	ldr	r0, [r4, #12]
 8004392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004394:	4298      	cmp	r0, r3
 8004396:	bfb8      	it	lt
 8004398:	4618      	movlt	r0, r3
 800439a:	e730      	b.n	80041fe <_printf_float+0xc6>
 800439c:	2301      	movs	r3, #1
 800439e:	464a      	mov	r2, r9
 80043a0:	4631      	mov	r1, r6
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f af27 	beq.w	80041fa <_printf_float+0xc2>
 80043ac:	f108 0801 	add.w	r8, r8, #1
 80043b0:	e7e6      	b.n	8004380 <_printf_float+0x248>
 80043b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dc39      	bgt.n	800442c <_printf_float+0x2f4>
 80043b8:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <_printf_float+0x2f0>)
 80043ba:	2301      	movs	r3, #1
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f af19 	beq.w	80041fa <_printf_float+0xc2>
 80043c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d102      	bne.n	80043d6 <_printf_float+0x29e>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	07d9      	lsls	r1, r3, #31
 80043d4:	d5d8      	bpl.n	8004388 <_printf_float+0x250>
 80043d6:	ee18 3a10 	vmov	r3, s16
 80043da:	4652      	mov	r2, sl
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af09 	beq.w	80041fa <_printf_float+0xc2>
 80043e8:	f04f 0900 	mov.w	r9, #0
 80043ec:	f104 0a1a 	add.w	sl, r4, #26
 80043f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f2:	425b      	negs	r3, r3
 80043f4:	454b      	cmp	r3, r9
 80043f6:	dc01      	bgt.n	80043fc <_printf_float+0x2c4>
 80043f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043fa:	e792      	b.n	8004322 <_printf_float+0x1ea>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4652      	mov	r2, sl
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f aef7 	beq.w	80041fa <_printf_float+0xc2>
 800440c:	f109 0901 	add.w	r9, r9, #1
 8004410:	e7ee      	b.n	80043f0 <_printf_float+0x2b8>
 8004412:	bf00      	nop
 8004414:	7fefffff 	.word	0x7fefffff
 8004418:	08006874 	.word	0x08006874
 800441c:	08006878 	.word	0x08006878
 8004420:	08006880 	.word	0x08006880
 8004424:	0800687c 	.word	0x0800687c
 8004428:	08006884 	.word	0x08006884
 800442c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800442e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004430:	429a      	cmp	r2, r3
 8004432:	bfa8      	it	ge
 8004434:	461a      	movge	r2, r3
 8004436:	2a00      	cmp	r2, #0
 8004438:	4691      	mov	r9, r2
 800443a:	dc37      	bgt.n	80044ac <_printf_float+0x374>
 800443c:	f04f 0b00 	mov.w	fp, #0
 8004440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004444:	f104 021a 	add.w	r2, r4, #26
 8004448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	eba3 0309 	sub.w	r3, r3, r9
 8004450:	455b      	cmp	r3, fp
 8004452:	dc33      	bgt.n	80044bc <_printf_float+0x384>
 8004454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004458:	429a      	cmp	r2, r3
 800445a:	db3b      	blt.n	80044d4 <_printf_float+0x39c>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	07da      	lsls	r2, r3, #31
 8004460:	d438      	bmi.n	80044d4 <_printf_float+0x39c>
 8004462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004464:	9b05      	ldr	r3, [sp, #20]
 8004466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	eba2 0901 	sub.w	r9, r2, r1
 800446e:	4599      	cmp	r9, r3
 8004470:	bfa8      	it	ge
 8004472:	4699      	movge	r9, r3
 8004474:	f1b9 0f00 	cmp.w	r9, #0
 8004478:	dc35      	bgt.n	80044e6 <_printf_float+0x3ae>
 800447a:	f04f 0800 	mov.w	r8, #0
 800447e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004482:	f104 0a1a 	add.w	sl, r4, #26
 8004486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	eba3 0309 	sub.w	r3, r3, r9
 8004490:	4543      	cmp	r3, r8
 8004492:	f77f af79 	ble.w	8004388 <_printf_float+0x250>
 8004496:	2301      	movs	r3, #1
 8004498:	4652      	mov	r2, sl
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	f43f aeaa 	beq.w	80041fa <_printf_float+0xc2>
 80044a6:	f108 0801 	add.w	r8, r8, #1
 80044aa:	e7ec      	b.n	8004486 <_printf_float+0x34e>
 80044ac:	4613      	mov	r3, r2
 80044ae:	4631      	mov	r1, r6
 80044b0:	4642      	mov	r2, r8
 80044b2:	4628      	mov	r0, r5
 80044b4:	47b8      	blx	r7
 80044b6:	3001      	adds	r0, #1
 80044b8:	d1c0      	bne.n	800443c <_printf_float+0x304>
 80044ba:	e69e      	b.n	80041fa <_printf_float+0xc2>
 80044bc:	2301      	movs	r3, #1
 80044be:	4631      	mov	r1, r6
 80044c0:	4628      	mov	r0, r5
 80044c2:	9205      	str	r2, [sp, #20]
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	f43f ae97 	beq.w	80041fa <_printf_float+0xc2>
 80044cc:	9a05      	ldr	r2, [sp, #20]
 80044ce:	f10b 0b01 	add.w	fp, fp, #1
 80044d2:	e7b9      	b.n	8004448 <_printf_float+0x310>
 80044d4:	ee18 3a10 	vmov	r3, s16
 80044d8:	4652      	mov	r2, sl
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	47b8      	blx	r7
 80044e0:	3001      	adds	r0, #1
 80044e2:	d1be      	bne.n	8004462 <_printf_float+0x32a>
 80044e4:	e689      	b.n	80041fa <_printf_float+0xc2>
 80044e6:	9a05      	ldr	r2, [sp, #20]
 80044e8:	464b      	mov	r3, r9
 80044ea:	4442      	add	r2, r8
 80044ec:	4631      	mov	r1, r6
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b8      	blx	r7
 80044f2:	3001      	adds	r0, #1
 80044f4:	d1c1      	bne.n	800447a <_printf_float+0x342>
 80044f6:	e680      	b.n	80041fa <_printf_float+0xc2>
 80044f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044fa:	2a01      	cmp	r2, #1
 80044fc:	dc01      	bgt.n	8004502 <_printf_float+0x3ca>
 80044fe:	07db      	lsls	r3, r3, #31
 8004500:	d538      	bpl.n	8004574 <_printf_float+0x43c>
 8004502:	2301      	movs	r3, #1
 8004504:	4642      	mov	r2, r8
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f ae74 	beq.w	80041fa <_printf_float+0xc2>
 8004512:	ee18 3a10 	vmov	r3, s16
 8004516:	4652      	mov	r2, sl
 8004518:	4631      	mov	r1, r6
 800451a:	4628      	mov	r0, r5
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f ae6b 	beq.w	80041fa <_printf_float+0xc2>
 8004524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004528:	2200      	movs	r2, #0
 800452a:	2300      	movs	r3, #0
 800452c:	f7fc facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004530:	b9d8      	cbnz	r0, 800456a <_printf_float+0x432>
 8004532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004534:	f108 0201 	add.w	r2, r8, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	d10e      	bne.n	8004562 <_printf_float+0x42a>
 8004544:	e659      	b.n	80041fa <_printf_float+0xc2>
 8004546:	2301      	movs	r3, #1
 8004548:	4652      	mov	r2, sl
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae52 	beq.w	80041fa <_printf_float+0xc2>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	4543      	cmp	r3, r8
 8004560:	dcf1      	bgt.n	8004546 <_printf_float+0x40e>
 8004562:	464b      	mov	r3, r9
 8004564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004568:	e6dc      	b.n	8004324 <_printf_float+0x1ec>
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	f104 0a1a 	add.w	sl, r4, #26
 8004572:	e7f2      	b.n	800455a <_printf_float+0x422>
 8004574:	2301      	movs	r3, #1
 8004576:	4642      	mov	r2, r8
 8004578:	e7df      	b.n	800453a <_printf_float+0x402>
 800457a:	2301      	movs	r3, #1
 800457c:	464a      	mov	r2, r9
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	f43f ae38 	beq.w	80041fa <_printf_float+0xc2>
 800458a:	f108 0801 	add.w	r8, r8, #1
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004592:	1a5b      	subs	r3, r3, r1
 8004594:	4543      	cmp	r3, r8
 8004596:	dcf0      	bgt.n	800457a <_printf_float+0x442>
 8004598:	e6fa      	b.n	8004390 <_printf_float+0x258>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	f104 0919 	add.w	r9, r4, #25
 80045a2:	e7f4      	b.n	800458e <_printf_float+0x456>

080045a4 <_printf_common>:
 80045a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	4616      	mov	r6, r2
 80045aa:	4699      	mov	r9, r3
 80045ac:	688a      	ldr	r2, [r1, #8]
 80045ae:	690b      	ldr	r3, [r1, #16]
 80045b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bfb8      	it	lt
 80045b8:	4613      	movlt	r3, r2
 80045ba:	6033      	str	r3, [r6, #0]
 80045bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045c0:	4607      	mov	r7, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	b10a      	cbz	r2, 80045ca <_printf_common+0x26>
 80045c6:	3301      	adds	r3, #1
 80045c8:	6033      	str	r3, [r6, #0]
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	0699      	lsls	r1, r3, #26
 80045ce:	bf42      	ittt	mi
 80045d0:	6833      	ldrmi	r3, [r6, #0]
 80045d2:	3302      	addmi	r3, #2
 80045d4:	6033      	strmi	r3, [r6, #0]
 80045d6:	6825      	ldr	r5, [r4, #0]
 80045d8:	f015 0506 	ands.w	r5, r5, #6
 80045dc:	d106      	bne.n	80045ec <_printf_common+0x48>
 80045de:	f104 0a19 	add.w	sl, r4, #25
 80045e2:	68e3      	ldr	r3, [r4, #12]
 80045e4:	6832      	ldr	r2, [r6, #0]
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	dc26      	bgt.n	800463a <_printf_common+0x96>
 80045ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045f0:	1e13      	subs	r3, r2, #0
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	bf18      	it	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	0692      	lsls	r2, r2, #26
 80045fa:	d42b      	bmi.n	8004654 <_printf_common+0xb0>
 80045fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	47c0      	blx	r8
 8004606:	3001      	adds	r0, #1
 8004608:	d01e      	beq.n	8004648 <_printf_common+0xa4>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	68e5      	ldr	r5, [r4, #12]
 800460e:	6832      	ldr	r2, [r6, #0]
 8004610:	f003 0306 	and.w	r3, r3, #6
 8004614:	2b04      	cmp	r3, #4
 8004616:	bf08      	it	eq
 8004618:	1aad      	subeq	r5, r5, r2
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	bf0c      	ite	eq
 8004620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004624:	2500      	movne	r5, #0
 8004626:	4293      	cmp	r3, r2
 8004628:	bfc4      	itt	gt
 800462a:	1a9b      	subgt	r3, r3, r2
 800462c:	18ed      	addgt	r5, r5, r3
 800462e:	2600      	movs	r6, #0
 8004630:	341a      	adds	r4, #26
 8004632:	42b5      	cmp	r5, r6
 8004634:	d11a      	bne.n	800466c <_printf_common+0xc8>
 8004636:	2000      	movs	r0, #0
 8004638:	e008      	b.n	800464c <_printf_common+0xa8>
 800463a:	2301      	movs	r3, #1
 800463c:	4652      	mov	r2, sl
 800463e:	4649      	mov	r1, r9
 8004640:	4638      	mov	r0, r7
 8004642:	47c0      	blx	r8
 8004644:	3001      	adds	r0, #1
 8004646:	d103      	bne.n	8004650 <_printf_common+0xac>
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004650:	3501      	adds	r5, #1
 8004652:	e7c6      	b.n	80045e2 <_printf_common+0x3e>
 8004654:	18e1      	adds	r1, r4, r3
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	2030      	movs	r0, #48	; 0x30
 800465a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800465e:	4422      	add	r2, r4
 8004660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004668:	3302      	adds	r3, #2
 800466a:	e7c7      	b.n	80045fc <_printf_common+0x58>
 800466c:	2301      	movs	r3, #1
 800466e:	4622      	mov	r2, r4
 8004670:	4649      	mov	r1, r9
 8004672:	4638      	mov	r0, r7
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d0e6      	beq.n	8004648 <_printf_common+0xa4>
 800467a:	3601      	adds	r6, #1
 800467c:	e7d9      	b.n	8004632 <_printf_common+0x8e>
	...

08004680 <_printf_i>:
 8004680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	460c      	mov	r4, r1
 8004686:	4691      	mov	r9, r2
 8004688:	7e27      	ldrb	r7, [r4, #24]
 800468a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800468c:	2f78      	cmp	r7, #120	; 0x78
 800468e:	4680      	mov	r8, r0
 8004690:	469a      	mov	sl, r3
 8004692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004696:	d807      	bhi.n	80046a8 <_printf_i+0x28>
 8004698:	2f62      	cmp	r7, #98	; 0x62
 800469a:	d80a      	bhi.n	80046b2 <_printf_i+0x32>
 800469c:	2f00      	cmp	r7, #0
 800469e:	f000 80d8 	beq.w	8004852 <_printf_i+0x1d2>
 80046a2:	2f58      	cmp	r7, #88	; 0x58
 80046a4:	f000 80a3 	beq.w	80047ee <_printf_i+0x16e>
 80046a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046b0:	e03a      	b.n	8004728 <_printf_i+0xa8>
 80046b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046b6:	2b15      	cmp	r3, #21
 80046b8:	d8f6      	bhi.n	80046a8 <_printf_i+0x28>
 80046ba:	a001      	add	r0, pc, #4	; (adr r0, 80046c0 <_printf_i+0x40>)
 80046bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046c0:	08004719 	.word	0x08004719
 80046c4:	0800472d 	.word	0x0800472d
 80046c8:	080046a9 	.word	0x080046a9
 80046cc:	080046a9 	.word	0x080046a9
 80046d0:	080046a9 	.word	0x080046a9
 80046d4:	080046a9 	.word	0x080046a9
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	080046a9 	.word	0x080046a9
 80046e0:	080046a9 	.word	0x080046a9
 80046e4:	080046a9 	.word	0x080046a9
 80046e8:	080046a9 	.word	0x080046a9
 80046ec:	08004839 	.word	0x08004839
 80046f0:	0800475d 	.word	0x0800475d
 80046f4:	0800481b 	.word	0x0800481b
 80046f8:	080046a9 	.word	0x080046a9
 80046fc:	080046a9 	.word	0x080046a9
 8004700:	0800485b 	.word	0x0800485b
 8004704:	080046a9 	.word	0x080046a9
 8004708:	0800475d 	.word	0x0800475d
 800470c:	080046a9 	.word	0x080046a9
 8004710:	080046a9 	.word	0x080046a9
 8004714:	08004823 	.word	0x08004823
 8004718:	680b      	ldr	r3, [r1, #0]
 800471a:	1d1a      	adds	r2, r3, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	600a      	str	r2, [r1, #0]
 8004720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004728:	2301      	movs	r3, #1
 800472a:	e0a3      	b.n	8004874 <_printf_i+0x1f4>
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	6808      	ldr	r0, [r1, #0]
 8004730:	062e      	lsls	r6, r5, #24
 8004732:	f100 0304 	add.w	r3, r0, #4
 8004736:	d50a      	bpl.n	800474e <_printf_i+0xce>
 8004738:	6805      	ldr	r5, [r0, #0]
 800473a:	600b      	str	r3, [r1, #0]
 800473c:	2d00      	cmp	r5, #0
 800473e:	da03      	bge.n	8004748 <_printf_i+0xc8>
 8004740:	232d      	movs	r3, #45	; 0x2d
 8004742:	426d      	negs	r5, r5
 8004744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004748:	485e      	ldr	r0, [pc, #376]	; (80048c4 <_printf_i+0x244>)
 800474a:	230a      	movs	r3, #10
 800474c:	e019      	b.n	8004782 <_printf_i+0x102>
 800474e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004752:	6805      	ldr	r5, [r0, #0]
 8004754:	600b      	str	r3, [r1, #0]
 8004756:	bf18      	it	ne
 8004758:	b22d      	sxthne	r5, r5
 800475a:	e7ef      	b.n	800473c <_printf_i+0xbc>
 800475c:	680b      	ldr	r3, [r1, #0]
 800475e:	6825      	ldr	r5, [r4, #0]
 8004760:	1d18      	adds	r0, r3, #4
 8004762:	6008      	str	r0, [r1, #0]
 8004764:	0628      	lsls	r0, r5, #24
 8004766:	d501      	bpl.n	800476c <_printf_i+0xec>
 8004768:	681d      	ldr	r5, [r3, #0]
 800476a:	e002      	b.n	8004772 <_printf_i+0xf2>
 800476c:	0669      	lsls	r1, r5, #25
 800476e:	d5fb      	bpl.n	8004768 <_printf_i+0xe8>
 8004770:	881d      	ldrh	r5, [r3, #0]
 8004772:	4854      	ldr	r0, [pc, #336]	; (80048c4 <_printf_i+0x244>)
 8004774:	2f6f      	cmp	r7, #111	; 0x6f
 8004776:	bf0c      	ite	eq
 8004778:	2308      	moveq	r3, #8
 800477a:	230a      	movne	r3, #10
 800477c:	2100      	movs	r1, #0
 800477e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004782:	6866      	ldr	r6, [r4, #4]
 8004784:	60a6      	str	r6, [r4, #8]
 8004786:	2e00      	cmp	r6, #0
 8004788:	bfa2      	ittt	ge
 800478a:	6821      	ldrge	r1, [r4, #0]
 800478c:	f021 0104 	bicge.w	r1, r1, #4
 8004790:	6021      	strge	r1, [r4, #0]
 8004792:	b90d      	cbnz	r5, 8004798 <_printf_i+0x118>
 8004794:	2e00      	cmp	r6, #0
 8004796:	d04d      	beq.n	8004834 <_printf_i+0x1b4>
 8004798:	4616      	mov	r6, r2
 800479a:	fbb5 f1f3 	udiv	r1, r5, r3
 800479e:	fb03 5711 	mls	r7, r3, r1, r5
 80047a2:	5dc7      	ldrb	r7, [r0, r7]
 80047a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047a8:	462f      	mov	r7, r5
 80047aa:	42bb      	cmp	r3, r7
 80047ac:	460d      	mov	r5, r1
 80047ae:	d9f4      	bls.n	800479a <_printf_i+0x11a>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d10b      	bne.n	80047cc <_printf_i+0x14c>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	07df      	lsls	r7, r3, #31
 80047b8:	d508      	bpl.n	80047cc <_printf_i+0x14c>
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	6861      	ldr	r1, [r4, #4]
 80047be:	4299      	cmp	r1, r3
 80047c0:	bfde      	ittt	le
 80047c2:	2330      	movle	r3, #48	; 0x30
 80047c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047cc:	1b92      	subs	r2, r2, r6
 80047ce:	6122      	str	r2, [r4, #16]
 80047d0:	f8cd a000 	str.w	sl, [sp]
 80047d4:	464b      	mov	r3, r9
 80047d6:	aa03      	add	r2, sp, #12
 80047d8:	4621      	mov	r1, r4
 80047da:	4640      	mov	r0, r8
 80047dc:	f7ff fee2 	bl	80045a4 <_printf_common>
 80047e0:	3001      	adds	r0, #1
 80047e2:	d14c      	bne.n	800487e <_printf_i+0x1fe>
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	b004      	add	sp, #16
 80047ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ee:	4835      	ldr	r0, [pc, #212]	; (80048c4 <_printf_i+0x244>)
 80047f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	680e      	ldr	r6, [r1, #0]
 80047f8:	061f      	lsls	r7, r3, #24
 80047fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80047fe:	600e      	str	r6, [r1, #0]
 8004800:	d514      	bpl.n	800482c <_printf_i+0x1ac>
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	bf44      	itt	mi
 8004806:	f043 0320 	orrmi.w	r3, r3, #32
 800480a:	6023      	strmi	r3, [r4, #0]
 800480c:	b91d      	cbnz	r5, 8004816 <_printf_i+0x196>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	f023 0320 	bic.w	r3, r3, #32
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	2310      	movs	r3, #16
 8004818:	e7b0      	b.n	800477c <_printf_i+0xfc>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f043 0320 	orr.w	r3, r3, #32
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	2378      	movs	r3, #120	; 0x78
 8004824:	4828      	ldr	r0, [pc, #160]	; (80048c8 <_printf_i+0x248>)
 8004826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800482a:	e7e3      	b.n	80047f4 <_printf_i+0x174>
 800482c:	065e      	lsls	r6, r3, #25
 800482e:	bf48      	it	mi
 8004830:	b2ad      	uxthmi	r5, r5
 8004832:	e7e6      	b.n	8004802 <_printf_i+0x182>
 8004834:	4616      	mov	r6, r2
 8004836:	e7bb      	b.n	80047b0 <_printf_i+0x130>
 8004838:	680b      	ldr	r3, [r1, #0]
 800483a:	6826      	ldr	r6, [r4, #0]
 800483c:	6960      	ldr	r0, [r4, #20]
 800483e:	1d1d      	adds	r5, r3, #4
 8004840:	600d      	str	r5, [r1, #0]
 8004842:	0635      	lsls	r5, r6, #24
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	d501      	bpl.n	800484c <_printf_i+0x1cc>
 8004848:	6018      	str	r0, [r3, #0]
 800484a:	e002      	b.n	8004852 <_printf_i+0x1d2>
 800484c:	0671      	lsls	r1, r6, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0x1c8>
 8004850:	8018      	strh	r0, [r3, #0]
 8004852:	2300      	movs	r3, #0
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	4616      	mov	r6, r2
 8004858:	e7ba      	b.n	80047d0 <_printf_i+0x150>
 800485a:	680b      	ldr	r3, [r1, #0]
 800485c:	1d1a      	adds	r2, r3, #4
 800485e:	600a      	str	r2, [r1, #0]
 8004860:	681e      	ldr	r6, [r3, #0]
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	2100      	movs	r1, #0
 8004866:	4630      	mov	r0, r6
 8004868:	f7fb fcba 	bl	80001e0 <memchr>
 800486c:	b108      	cbz	r0, 8004872 <_printf_i+0x1f2>
 800486e:	1b80      	subs	r0, r0, r6
 8004870:	6060      	str	r0, [r4, #4]
 8004872:	6863      	ldr	r3, [r4, #4]
 8004874:	6123      	str	r3, [r4, #16]
 8004876:	2300      	movs	r3, #0
 8004878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487c:	e7a8      	b.n	80047d0 <_printf_i+0x150>
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	4632      	mov	r2, r6
 8004882:	4649      	mov	r1, r9
 8004884:	4640      	mov	r0, r8
 8004886:	47d0      	blx	sl
 8004888:	3001      	adds	r0, #1
 800488a:	d0ab      	beq.n	80047e4 <_printf_i+0x164>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	079b      	lsls	r3, r3, #30
 8004890:	d413      	bmi.n	80048ba <_printf_i+0x23a>
 8004892:	68e0      	ldr	r0, [r4, #12]
 8004894:	9b03      	ldr	r3, [sp, #12]
 8004896:	4298      	cmp	r0, r3
 8004898:	bfb8      	it	lt
 800489a:	4618      	movlt	r0, r3
 800489c:	e7a4      	b.n	80047e8 <_printf_i+0x168>
 800489e:	2301      	movs	r3, #1
 80048a0:	4632      	mov	r2, r6
 80048a2:	4649      	mov	r1, r9
 80048a4:	4640      	mov	r0, r8
 80048a6:	47d0      	blx	sl
 80048a8:	3001      	adds	r0, #1
 80048aa:	d09b      	beq.n	80047e4 <_printf_i+0x164>
 80048ac:	3501      	adds	r5, #1
 80048ae:	68e3      	ldr	r3, [r4, #12]
 80048b0:	9903      	ldr	r1, [sp, #12]
 80048b2:	1a5b      	subs	r3, r3, r1
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	dcf2      	bgt.n	800489e <_printf_i+0x21e>
 80048b8:	e7eb      	b.n	8004892 <_printf_i+0x212>
 80048ba:	2500      	movs	r5, #0
 80048bc:	f104 0619 	add.w	r6, r4, #25
 80048c0:	e7f5      	b.n	80048ae <_printf_i+0x22e>
 80048c2:	bf00      	nop
 80048c4:	08006886 	.word	0x08006886
 80048c8:	08006897 	.word	0x08006897

080048cc <_sbrk_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d06      	ldr	r5, [pc, #24]	; (80048e8 <_sbrk_r+0x1c>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	f7fc fc2a 	bl	8001130 <_sbrk>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_sbrk_r+0x1a>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_sbrk_r+0x1a>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200002e8 	.word	0x200002e8

080048ec <quorem>:
 80048ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f0:	6903      	ldr	r3, [r0, #16]
 80048f2:	690c      	ldr	r4, [r1, #16]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	4607      	mov	r7, r0
 80048f8:	f2c0 8081 	blt.w	80049fe <quorem+0x112>
 80048fc:	3c01      	subs	r4, #1
 80048fe:	f101 0814 	add.w	r8, r1, #20
 8004902:	f100 0514 	add.w	r5, r0, #20
 8004906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004914:	3301      	adds	r3, #1
 8004916:	429a      	cmp	r2, r3
 8004918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800491c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004920:	fbb2 f6f3 	udiv	r6, r2, r3
 8004924:	d331      	bcc.n	800498a <quorem+0x9e>
 8004926:	f04f 0e00 	mov.w	lr, #0
 800492a:	4640      	mov	r0, r8
 800492c:	46ac      	mov	ip, r5
 800492e:	46f2      	mov	sl, lr
 8004930:	f850 2b04 	ldr.w	r2, [r0], #4
 8004934:	b293      	uxth	r3, r2
 8004936:	fb06 e303 	mla	r3, r6, r3, lr
 800493a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800493e:	b29b      	uxth	r3, r3
 8004940:	ebaa 0303 	sub.w	r3, sl, r3
 8004944:	0c12      	lsrs	r2, r2, #16
 8004946:	f8dc a000 	ldr.w	sl, [ip]
 800494a:	fb06 e202 	mla	r2, r6, r2, lr
 800494e:	fa13 f38a 	uxtah	r3, r3, sl
 8004952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004956:	fa1f fa82 	uxth.w	sl, r2
 800495a:	f8dc 2000 	ldr.w	r2, [ip]
 800495e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004966:	b29b      	uxth	r3, r3
 8004968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800496c:	4581      	cmp	r9, r0
 800496e:	f84c 3b04 	str.w	r3, [ip], #4
 8004972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004976:	d2db      	bcs.n	8004930 <quorem+0x44>
 8004978:	f855 300b 	ldr.w	r3, [r5, fp]
 800497c:	b92b      	cbnz	r3, 800498a <quorem+0x9e>
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	3b04      	subs	r3, #4
 8004982:	429d      	cmp	r5, r3
 8004984:	461a      	mov	r2, r3
 8004986:	d32e      	bcc.n	80049e6 <quorem+0xfa>
 8004988:	613c      	str	r4, [r7, #16]
 800498a:	4638      	mov	r0, r7
 800498c:	f001 f8b6 	bl	8005afc <__mcmp>
 8004990:	2800      	cmp	r0, #0
 8004992:	db24      	blt.n	80049de <quorem+0xf2>
 8004994:	3601      	adds	r6, #1
 8004996:	4628      	mov	r0, r5
 8004998:	f04f 0c00 	mov.w	ip, #0
 800499c:	f858 2b04 	ldr.w	r2, [r8], #4
 80049a0:	f8d0 e000 	ldr.w	lr, [r0]
 80049a4:	b293      	uxth	r3, r2
 80049a6:	ebac 0303 	sub.w	r3, ip, r3
 80049aa:	0c12      	lsrs	r2, r2, #16
 80049ac:	fa13 f38e 	uxtah	r3, r3, lr
 80049b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049be:	45c1      	cmp	r9, r8
 80049c0:	f840 3b04 	str.w	r3, [r0], #4
 80049c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049c8:	d2e8      	bcs.n	800499c <quorem+0xb0>
 80049ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049d2:	b922      	cbnz	r2, 80049de <quorem+0xf2>
 80049d4:	3b04      	subs	r3, #4
 80049d6:	429d      	cmp	r5, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	d30a      	bcc.n	80049f2 <quorem+0x106>
 80049dc:	613c      	str	r4, [r7, #16]
 80049de:	4630      	mov	r0, r6
 80049e0:	b003      	add	sp, #12
 80049e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	d1cc      	bne.n	8004988 <quorem+0x9c>
 80049ee:	3c01      	subs	r4, #1
 80049f0:	e7c7      	b.n	8004982 <quorem+0x96>
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	3b04      	subs	r3, #4
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	d1f0      	bne.n	80049dc <quorem+0xf0>
 80049fa:	3c01      	subs	r4, #1
 80049fc:	e7eb      	b.n	80049d6 <quorem+0xea>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e7ee      	b.n	80049e0 <quorem+0xf4>
 8004a02:	0000      	movs	r0, r0
 8004a04:	0000      	movs	r0, r0
	...

08004a08 <_dtoa_r>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	ed2d 8b02 	vpush	{d8}
 8004a10:	ec57 6b10 	vmov	r6, r7, d0
 8004a14:	b095      	sub	sp, #84	; 0x54
 8004a16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a22:	4604      	mov	r4, r0
 8004a24:	9209      	str	r2, [sp, #36]	; 0x24
 8004a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a28:	b975      	cbnz	r5, 8004a48 <_dtoa_r+0x40>
 8004a2a:	2010      	movs	r0, #16
 8004a2c:	f7ff fa1c 	bl	8003e68 <malloc>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6260      	str	r0, [r4, #36]	; 0x24
 8004a34:	b920      	cbnz	r0, 8004a40 <_dtoa_r+0x38>
 8004a36:	4bb2      	ldr	r3, [pc, #712]	; (8004d00 <_dtoa_r+0x2f8>)
 8004a38:	21ea      	movs	r1, #234	; 0xea
 8004a3a:	48b2      	ldr	r0, [pc, #712]	; (8004d04 <_dtoa_r+0x2fc>)
 8004a3c:	f001 f96e 	bl	8005d1c <__assert_func>
 8004a40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a44:	6005      	str	r5, [r0, #0]
 8004a46:	60c5      	str	r5, [r0, #12]
 8004a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	b151      	cbz	r1, 8004a64 <_dtoa_r+0x5c>
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	604a      	str	r2, [r1, #4]
 8004a52:	2301      	movs	r3, #1
 8004a54:	4093      	lsls	r3, r2
 8004a56:	608b      	str	r3, [r1, #8]
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f000 fe11 	bl	8005680 <_Bfree>
 8004a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	1e3b      	subs	r3, r7, #0
 8004a66:	bfb9      	ittee	lt
 8004a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a6c:	9303      	strlt	r3, [sp, #12]
 8004a6e:	2300      	movge	r3, #0
 8004a70:	f8c8 3000 	strge.w	r3, [r8]
 8004a74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004a78:	4ba3      	ldr	r3, [pc, #652]	; (8004d08 <_dtoa_r+0x300>)
 8004a7a:	bfbc      	itt	lt
 8004a7c:	2201      	movlt	r2, #1
 8004a7e:	f8c8 2000 	strlt.w	r2, [r8]
 8004a82:	ea33 0309 	bics.w	r3, r3, r9
 8004a86:	d11b      	bne.n	8004ac0 <_dtoa_r+0xb8>
 8004a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a94:	4333      	orrs	r3, r6
 8004a96:	f000 857a 	beq.w	800558e <_dtoa_r+0xb86>
 8004a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a9c:	b963      	cbnz	r3, 8004ab8 <_dtoa_r+0xb0>
 8004a9e:	4b9b      	ldr	r3, [pc, #620]	; (8004d0c <_dtoa_r+0x304>)
 8004aa0:	e024      	b.n	8004aec <_dtoa_r+0xe4>
 8004aa2:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <_dtoa_r+0x308>)
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	9800      	ldr	r0, [sp, #0]
 8004aae:	b015      	add	sp, #84	; 0x54
 8004ab0:	ecbd 8b02 	vpop	{d8}
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	4b94      	ldr	r3, [pc, #592]	; (8004d0c <_dtoa_r+0x304>)
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	3303      	adds	r3, #3
 8004abe:	e7f3      	b.n	8004aa8 <_dtoa_r+0xa0>
 8004ac0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	ec51 0b17 	vmov	r0, r1, d7
 8004aca:	2300      	movs	r3, #0
 8004acc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004ad0:	f7fb fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ad4:	4680      	mov	r8, r0
 8004ad6:	b158      	cbz	r0, 8004af0 <_dtoa_r+0xe8>
 8004ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ada:	2301      	movs	r3, #1
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8551 	beq.w	8005588 <_dtoa_r+0xb80>
 8004ae6:	488b      	ldr	r0, [pc, #556]	; (8004d14 <_dtoa_r+0x30c>)
 8004ae8:	6018      	str	r0, [r3, #0]
 8004aea:	1e43      	subs	r3, r0, #1
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	e7dd      	b.n	8004aac <_dtoa_r+0xa4>
 8004af0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004af4:	aa12      	add	r2, sp, #72	; 0x48
 8004af6:	a913      	add	r1, sp, #76	; 0x4c
 8004af8:	4620      	mov	r0, r4
 8004afa:	f001 f8a3 	bl	8005c44 <__d2b>
 8004afe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b02:	4683      	mov	fp, r0
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	d07c      	beq.n	8004c02 <_dtoa_r+0x1fa>
 8004b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004b16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b22:	4b7d      	ldr	r3, [pc, #500]	; (8004d18 <_dtoa_r+0x310>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	4630      	mov	r0, r6
 8004b28:	4639      	mov	r1, r7
 8004b2a:	f7fb fbad 	bl	8000288 <__aeabi_dsub>
 8004b2e:	a36e      	add	r3, pc, #440	; (adr r3, 8004ce8 <_dtoa_r+0x2e0>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f7fb fd60 	bl	80005f8 <__aeabi_dmul>
 8004b38:	a36d      	add	r3, pc, #436	; (adr r3, 8004cf0 <_dtoa_r+0x2e8>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fba5 	bl	800028c <__adddf3>
 8004b42:	4606      	mov	r6, r0
 8004b44:	4628      	mov	r0, r5
 8004b46:	460f      	mov	r7, r1
 8004b48:	f7fb fcec 	bl	8000524 <__aeabi_i2d>
 8004b4c:	a36a      	add	r3, pc, #424	; (adr r3, 8004cf8 <_dtoa_r+0x2f0>)
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f7fb fd51 	bl	80005f8 <__aeabi_dmul>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	f7fb fb95 	bl	800028c <__adddf3>
 8004b62:	4606      	mov	r6, r0
 8004b64:	460f      	mov	r7, r1
 8004b66:	f7fb fff7 	bl	8000b58 <__aeabi_d2iz>
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4682      	mov	sl, r0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4630      	mov	r0, r6
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fb ffb2 	bl	8000adc <__aeabi_dcmplt>
 8004b78:	b148      	cbz	r0, 8004b8e <_dtoa_r+0x186>
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f7fb fcd2 	bl	8000524 <__aeabi_i2d>
 8004b80:	4632      	mov	r2, r6
 8004b82:	463b      	mov	r3, r7
 8004b84:	f7fb ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b88:	b908      	cbnz	r0, 8004b8e <_dtoa_r+0x186>
 8004b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b8e:	f1ba 0f16 	cmp.w	sl, #22
 8004b92:	d854      	bhi.n	8004c3e <_dtoa_r+0x236>
 8004b94:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <_dtoa_r+0x314>)
 8004b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ba2:	f7fb ff9b 	bl	8000adc <__aeabi_dcmplt>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d04b      	beq.n	8004c42 <_dtoa_r+0x23a>
 8004baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bae:	2300      	movs	r3, #0
 8004bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8004bb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bb4:	1b5d      	subs	r5, r3, r5
 8004bb6:	1e6b      	subs	r3, r5, #1
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	bf43      	ittte	mi
 8004bbc:	2300      	movmi	r3, #0
 8004bbe:	f1c5 0801 	rsbmi	r8, r5, #1
 8004bc2:	9304      	strmi	r3, [sp, #16]
 8004bc4:	f04f 0800 	movpl.w	r8, #0
 8004bc8:	f1ba 0f00 	cmp.w	sl, #0
 8004bcc:	db3b      	blt.n	8004c46 <_dtoa_r+0x23e>
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004bd4:	4453      	add	r3, sl
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9306      	str	r3, [sp, #24]
 8004bdc:	9b05      	ldr	r3, [sp, #20]
 8004bde:	2b09      	cmp	r3, #9
 8004be0:	d869      	bhi.n	8004cb6 <_dtoa_r+0x2ae>
 8004be2:	2b05      	cmp	r3, #5
 8004be4:	bfc4      	itt	gt
 8004be6:	3b04      	subgt	r3, #4
 8004be8:	9305      	strgt	r3, [sp, #20]
 8004bea:	9b05      	ldr	r3, [sp, #20]
 8004bec:	f1a3 0302 	sub.w	r3, r3, #2
 8004bf0:	bfcc      	ite	gt
 8004bf2:	2500      	movgt	r5, #0
 8004bf4:	2501      	movle	r5, #1
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d869      	bhi.n	8004cce <_dtoa_r+0x2c6>
 8004bfa:	e8df f003 	tbb	[pc, r3]
 8004bfe:	4e2c      	.short	0x4e2c
 8004c00:	5a4c      	.short	0x5a4c
 8004c02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004c06:	441d      	add	r5, r3
 8004c08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	bfc1      	itttt	gt
 8004c10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c18:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c20:	bfda      	itte	le
 8004c22:	f1c3 0320 	rsble	r3, r3, #32
 8004c26:	fa06 f003 	lslle.w	r0, r6, r3
 8004c2a:	4318      	orrgt	r0, r3
 8004c2c:	f7fb fc6a 	bl	8000504 <__aeabi_ui2d>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4606      	mov	r6, r0
 8004c34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c38:	3d01      	subs	r5, #1
 8004c3a:	9310      	str	r3, [sp, #64]	; 0x40
 8004c3c:	e771      	b.n	8004b22 <_dtoa_r+0x11a>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e7b6      	b.n	8004bb0 <_dtoa_r+0x1a8>
 8004c42:	900e      	str	r0, [sp, #56]	; 0x38
 8004c44:	e7b5      	b.n	8004bb2 <_dtoa_r+0x1aa>
 8004c46:	f1ca 0300 	rsb	r3, sl, #0
 8004c4a:	9306      	str	r3, [sp, #24]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	eba8 080a 	sub.w	r8, r8, sl
 8004c52:	930d      	str	r3, [sp, #52]	; 0x34
 8004c54:	e7c2      	b.n	8004bdc <_dtoa_r+0x1d4>
 8004c56:	2300      	movs	r3, #0
 8004c58:	9308      	str	r3, [sp, #32]
 8004c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	dc39      	bgt.n	8004cd4 <_dtoa_r+0x2cc>
 8004c60:	f04f 0901 	mov.w	r9, #1
 8004c64:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c68:	464b      	mov	r3, r9
 8004c6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004c6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c70:	2200      	movs	r2, #0
 8004c72:	6042      	str	r2, [r0, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	f102 0614 	add.w	r6, r2, #20
 8004c7a:	429e      	cmp	r6, r3
 8004c7c:	6841      	ldr	r1, [r0, #4]
 8004c7e:	d92f      	bls.n	8004ce0 <_dtoa_r+0x2d8>
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 fcbd 	bl	8005600 <_Balloc>
 8004c86:	9000      	str	r0, [sp, #0]
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d14b      	bne.n	8004d24 <_dtoa_r+0x31c>
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <_dtoa_r+0x318>)
 8004c8e:	4602      	mov	r2, r0
 8004c90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c94:	e6d1      	b.n	8004a3a <_dtoa_r+0x32>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e7de      	b.n	8004c58 <_dtoa_r+0x250>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9308      	str	r3, [sp, #32]
 8004c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca0:	eb0a 0903 	add.w	r9, sl, r3
 8004ca4:	f109 0301 	add.w	r3, r9, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	bfb8      	it	lt
 8004cae:	2301      	movlt	r3, #1
 8004cb0:	e7dd      	b.n	8004c6e <_dtoa_r+0x266>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7f2      	b.n	8004c9c <_dtoa_r+0x294>
 8004cb6:	2501      	movs	r5, #1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	9508      	str	r5, [sp, #32]
 8004cbe:	f04f 39ff 	mov.w	r9, #4294967295
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004cc8:	2312      	movs	r3, #18
 8004cca:	9209      	str	r2, [sp, #36]	; 0x24
 8004ccc:	e7cf      	b.n	8004c6e <_dtoa_r+0x266>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9308      	str	r3, [sp, #32]
 8004cd2:	e7f4      	b.n	8004cbe <_dtoa_r+0x2b6>
 8004cd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004cd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004cdc:	464b      	mov	r3, r9
 8004cde:	e7c6      	b.n	8004c6e <_dtoa_r+0x266>
 8004ce0:	3101      	adds	r1, #1
 8004ce2:	6041      	str	r1, [r0, #4]
 8004ce4:	0052      	lsls	r2, r2, #1
 8004ce6:	e7c6      	b.n	8004c76 <_dtoa_r+0x26e>
 8004ce8:	636f4361 	.word	0x636f4361
 8004cec:	3fd287a7 	.word	0x3fd287a7
 8004cf0:	8b60c8b3 	.word	0x8b60c8b3
 8004cf4:	3fc68a28 	.word	0x3fc68a28
 8004cf8:	509f79fb 	.word	0x509f79fb
 8004cfc:	3fd34413 	.word	0x3fd34413
 8004d00:	080068b5 	.word	0x080068b5
 8004d04:	080068cc 	.word	0x080068cc
 8004d08:	7ff00000 	.word	0x7ff00000
 8004d0c:	080068b1 	.word	0x080068b1
 8004d10:	080068a8 	.word	0x080068a8
 8004d14:	08006885 	.word	0x08006885
 8004d18:	3ff80000 	.word	0x3ff80000
 8004d1c:	080069c8 	.word	0x080069c8
 8004d20:	0800692b 	.word	0x0800692b
 8004d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d26:	9a00      	ldr	r2, [sp, #0]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	9b01      	ldr	r3, [sp, #4]
 8004d2c:	2b0e      	cmp	r3, #14
 8004d2e:	f200 80ad 	bhi.w	8004e8c <_dtoa_r+0x484>
 8004d32:	2d00      	cmp	r5, #0
 8004d34:	f000 80aa 	beq.w	8004e8c <_dtoa_r+0x484>
 8004d38:	f1ba 0f00 	cmp.w	sl, #0
 8004d3c:	dd36      	ble.n	8004dac <_dtoa_r+0x3a4>
 8004d3e:	4ac3      	ldr	r2, [pc, #780]	; (800504c <_dtoa_r+0x644>)
 8004d40:	f00a 030f 	and.w	r3, sl, #15
 8004d44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d48:	ed93 7b00 	vldr	d7, [r3]
 8004d4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004d50:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004d54:	eeb0 8a47 	vmov.f32	s16, s14
 8004d58:	eef0 8a67 	vmov.f32	s17, s15
 8004d5c:	d016      	beq.n	8004d8c <_dtoa_r+0x384>
 8004d5e:	4bbc      	ldr	r3, [pc, #752]	; (8005050 <_dtoa_r+0x648>)
 8004d60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d68:	f7fb fd70 	bl	800084c <__aeabi_ddiv>
 8004d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d70:	f007 070f 	and.w	r7, r7, #15
 8004d74:	2503      	movs	r5, #3
 8004d76:	4eb6      	ldr	r6, [pc, #728]	; (8005050 <_dtoa_r+0x648>)
 8004d78:	b957      	cbnz	r7, 8004d90 <_dtoa_r+0x388>
 8004d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d7e:	ec53 2b18 	vmov	r2, r3, d8
 8004d82:	f7fb fd63 	bl	800084c <__aeabi_ddiv>
 8004d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d8a:	e029      	b.n	8004de0 <_dtoa_r+0x3d8>
 8004d8c:	2502      	movs	r5, #2
 8004d8e:	e7f2      	b.n	8004d76 <_dtoa_r+0x36e>
 8004d90:	07f9      	lsls	r1, r7, #31
 8004d92:	d508      	bpl.n	8004da6 <_dtoa_r+0x39e>
 8004d94:	ec51 0b18 	vmov	r0, r1, d8
 8004d98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d9c:	f7fb fc2c 	bl	80005f8 <__aeabi_dmul>
 8004da0:	ec41 0b18 	vmov	d8, r0, r1
 8004da4:	3501      	adds	r5, #1
 8004da6:	107f      	asrs	r7, r7, #1
 8004da8:	3608      	adds	r6, #8
 8004daa:	e7e5      	b.n	8004d78 <_dtoa_r+0x370>
 8004dac:	f000 80a6 	beq.w	8004efc <_dtoa_r+0x4f4>
 8004db0:	f1ca 0600 	rsb	r6, sl, #0
 8004db4:	4ba5      	ldr	r3, [pc, #660]	; (800504c <_dtoa_r+0x644>)
 8004db6:	4fa6      	ldr	r7, [pc, #664]	; (8005050 <_dtoa_r+0x648>)
 8004db8:	f006 020f 	and.w	r2, r6, #15
 8004dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dc8:	f7fb fc16 	bl	80005f8 <__aeabi_dmul>
 8004dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dd0:	1136      	asrs	r6, r6, #4
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2502      	movs	r5, #2
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	f040 8085 	bne.w	8004ee6 <_dtoa_r+0x4de>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1d2      	bne.n	8004d86 <_dtoa_r+0x37e>
 8004de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 808c 	beq.w	8004f00 <_dtoa_r+0x4f8>
 8004de8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004dec:	4b99      	ldr	r3, [pc, #612]	; (8005054 <_dtoa_r+0x64c>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	4630      	mov	r0, r6
 8004df2:	4639      	mov	r1, r7
 8004df4:	f7fb fe72 	bl	8000adc <__aeabi_dcmplt>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	f000 8081 	beq.w	8004f00 <_dtoa_r+0x4f8>
 8004dfe:	9b01      	ldr	r3, [sp, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d07d      	beq.n	8004f00 <_dtoa_r+0x4f8>
 8004e04:	f1b9 0f00 	cmp.w	r9, #0
 8004e08:	dd3c      	ble.n	8004e84 <_dtoa_r+0x47c>
 8004e0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	2200      	movs	r2, #0
 8004e12:	4b91      	ldr	r3, [pc, #580]	; (8005058 <_dtoa_r+0x650>)
 8004e14:	4630      	mov	r0, r6
 8004e16:	4639      	mov	r1, r7
 8004e18:	f7fb fbee 	bl	80005f8 <__aeabi_dmul>
 8004e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e20:	3501      	adds	r5, #1
 8004e22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004e26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7fb fb7a 	bl	8000524 <__aeabi_i2d>
 8004e30:	4632      	mov	r2, r6
 8004e32:	463b      	mov	r3, r7
 8004e34:	f7fb fbe0 	bl	80005f8 <__aeabi_dmul>
 8004e38:	4b88      	ldr	r3, [pc, #544]	; (800505c <_dtoa_r+0x654>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f7fb fa26 	bl	800028c <__adddf3>
 8004e40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d15c      	bne.n	8004f0a <_dtoa_r+0x502>
 8004e50:	4b83      	ldr	r3, [pc, #524]	; (8005060 <_dtoa_r+0x658>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	4630      	mov	r0, r6
 8004e56:	4639      	mov	r1, r7
 8004e58:	f7fb fa16 	bl	8000288 <__aeabi_dsub>
 8004e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e60:	4606      	mov	r6, r0
 8004e62:	460f      	mov	r7, r1
 8004e64:	f7fb fe58 	bl	8000b18 <__aeabi_dcmpgt>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	f040 8296 	bne.w	800539a <_dtoa_r+0x992>
 8004e6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004e72:	4630      	mov	r0, r6
 8004e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e78:	4639      	mov	r1, r7
 8004e7a:	f7fb fe2f 	bl	8000adc <__aeabi_dcmplt>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f040 8288 	bne.w	8005394 <_dtoa_r+0x98c>
 8004e84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f2c0 8158 	blt.w	8005144 <_dtoa_r+0x73c>
 8004e94:	f1ba 0f0e 	cmp.w	sl, #14
 8004e98:	f300 8154 	bgt.w	8005144 <_dtoa_r+0x73c>
 8004e9c:	4b6b      	ldr	r3, [pc, #428]	; (800504c <_dtoa_r+0x644>)
 8004e9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f280 80e3 	bge.w	8005074 <_dtoa_r+0x66c>
 8004eae:	9b01      	ldr	r3, [sp, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f300 80df 	bgt.w	8005074 <_dtoa_r+0x66c>
 8004eb6:	f040 826d 	bne.w	8005394 <_dtoa_r+0x98c>
 8004eba:	4b69      	ldr	r3, [pc, #420]	; (8005060 <_dtoa_r+0x658>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	f7fb fb99 	bl	80005f8 <__aeabi_dmul>
 8004ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eca:	f7fb fe1b 	bl	8000b04 <__aeabi_dcmpge>
 8004ece:	9e01      	ldr	r6, [sp, #4]
 8004ed0:	4637      	mov	r7, r6
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f040 8243 	bne.w	800535e <_dtoa_r+0x956>
 8004ed8:	9d00      	ldr	r5, [sp, #0]
 8004eda:	2331      	movs	r3, #49	; 0x31
 8004edc:	f805 3b01 	strb.w	r3, [r5], #1
 8004ee0:	f10a 0a01 	add.w	sl, sl, #1
 8004ee4:	e23f      	b.n	8005366 <_dtoa_r+0x95e>
 8004ee6:	07f2      	lsls	r2, r6, #31
 8004ee8:	d505      	bpl.n	8004ef6 <_dtoa_r+0x4ee>
 8004eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eee:	f7fb fb83 	bl	80005f8 <__aeabi_dmul>
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	1076      	asrs	r6, r6, #1
 8004ef8:	3708      	adds	r7, #8
 8004efa:	e76c      	b.n	8004dd6 <_dtoa_r+0x3ce>
 8004efc:	2502      	movs	r5, #2
 8004efe:	e76f      	b.n	8004de0 <_dtoa_r+0x3d8>
 8004f00:	9b01      	ldr	r3, [sp, #4]
 8004f02:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f06:	930c      	str	r3, [sp, #48]	; 0x30
 8004f08:	e78d      	b.n	8004e26 <_dtoa_r+0x41e>
 8004f0a:	9900      	ldr	r1, [sp, #0]
 8004f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f10:	4b4e      	ldr	r3, [pc, #312]	; (800504c <_dtoa_r+0x644>)
 8004f12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f16:	4401      	add	r1, r0
 8004f18:	9102      	str	r1, [sp, #8]
 8004f1a:	9908      	ldr	r1, [sp, #32]
 8004f1c:	eeb0 8a47 	vmov.f32	s16, s14
 8004f20:	eef0 8a67 	vmov.f32	s17, s15
 8004f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d045      	beq.n	8004fbc <_dtoa_r+0x5b4>
 8004f30:	494c      	ldr	r1, [pc, #304]	; (8005064 <_dtoa_r+0x65c>)
 8004f32:	2000      	movs	r0, #0
 8004f34:	f7fb fc8a 	bl	800084c <__aeabi_ddiv>
 8004f38:	ec53 2b18 	vmov	r2, r3, d8
 8004f3c:	f7fb f9a4 	bl	8000288 <__aeabi_dsub>
 8004f40:	9d00      	ldr	r5, [sp, #0]
 8004f42:	ec41 0b18 	vmov	d8, r0, r1
 8004f46:	4639      	mov	r1, r7
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f7fb fe05 	bl	8000b58 <__aeabi_d2iz>
 8004f4e:	900c      	str	r0, [sp, #48]	; 0x30
 8004f50:	f7fb fae8 	bl	8000524 <__aeabi_i2d>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb f994 	bl	8000288 <__aeabi_dsub>
 8004f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f62:	3330      	adds	r3, #48	; 0x30
 8004f64:	f805 3b01 	strb.w	r3, [r5], #1
 8004f68:	ec53 2b18 	vmov	r2, r3, d8
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	f7fb fdb4 	bl	8000adc <__aeabi_dcmplt>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d165      	bne.n	8005044 <_dtoa_r+0x63c>
 8004f78:	4632      	mov	r2, r6
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	4935      	ldr	r1, [pc, #212]	; (8005054 <_dtoa_r+0x64c>)
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fb f982 	bl	8000288 <__aeabi_dsub>
 8004f84:	ec53 2b18 	vmov	r2, r3, d8
 8004f88:	f7fb fda8 	bl	8000adc <__aeabi_dcmplt>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f040 80b9 	bne.w	8005104 <_dtoa_r+0x6fc>
 8004f92:	9b02      	ldr	r3, [sp, #8]
 8004f94:	429d      	cmp	r5, r3
 8004f96:	f43f af75 	beq.w	8004e84 <_dtoa_r+0x47c>
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <_dtoa_r+0x650>)
 8004f9c:	ec51 0b18 	vmov	r0, r1, d8
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f7fb fb29 	bl	80005f8 <__aeabi_dmul>
 8004fa6:	4b2c      	ldr	r3, [pc, #176]	; (8005058 <_dtoa_r+0x650>)
 8004fa8:	ec41 0b18 	vmov	d8, r0, r1
 8004fac:	2200      	movs	r2, #0
 8004fae:	4630      	mov	r0, r6
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	f7fb fb21 	bl	80005f8 <__aeabi_dmul>
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	e7c4      	b.n	8004f46 <_dtoa_r+0x53e>
 8004fbc:	ec51 0b17 	vmov	r0, r1, d7
 8004fc0:	f7fb fb1a 	bl	80005f8 <__aeabi_dmul>
 8004fc4:	9b02      	ldr	r3, [sp, #8]
 8004fc6:	9d00      	ldr	r5, [sp, #0]
 8004fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8004fca:	ec41 0b18 	vmov	d8, r0, r1
 8004fce:	4639      	mov	r1, r7
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f7fb fdc1 	bl	8000b58 <__aeabi_d2iz>
 8004fd6:	9011      	str	r0, [sp, #68]	; 0x44
 8004fd8:	f7fb faa4 	bl	8000524 <__aeabi_i2d>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f7fb f950 	bl	8000288 <__aeabi_dsub>
 8004fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fea:	3330      	adds	r3, #48	; 0x30
 8004fec:	f805 3b01 	strb.w	r3, [r5], #1
 8004ff0:	9b02      	ldr	r3, [sp, #8]
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	460f      	mov	r7, r1
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	d134      	bne.n	8005068 <_dtoa_r+0x660>
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <_dtoa_r+0x65c>)
 8005000:	ec51 0b18 	vmov	r0, r1, d8
 8005004:	f7fb f942 	bl	800028c <__adddf3>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb fd82 	bl	8000b18 <__aeabi_dcmpgt>
 8005014:	2800      	cmp	r0, #0
 8005016:	d175      	bne.n	8005104 <_dtoa_r+0x6fc>
 8005018:	ec53 2b18 	vmov	r2, r3, d8
 800501c:	4911      	ldr	r1, [pc, #68]	; (8005064 <_dtoa_r+0x65c>)
 800501e:	2000      	movs	r0, #0
 8005020:	f7fb f932 	bl	8000288 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4630      	mov	r0, r6
 800502a:	4639      	mov	r1, r7
 800502c:	f7fb fd56 	bl	8000adc <__aeabi_dcmplt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f43f af27 	beq.w	8004e84 <_dtoa_r+0x47c>
 8005036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005038:	1e6b      	subs	r3, r5, #1
 800503a:	930c      	str	r3, [sp, #48]	; 0x30
 800503c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005040:	2b30      	cmp	r3, #48	; 0x30
 8005042:	d0f8      	beq.n	8005036 <_dtoa_r+0x62e>
 8005044:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005048:	e04a      	b.n	80050e0 <_dtoa_r+0x6d8>
 800504a:	bf00      	nop
 800504c:	080069c8 	.word	0x080069c8
 8005050:	080069a0 	.word	0x080069a0
 8005054:	3ff00000 	.word	0x3ff00000
 8005058:	40240000 	.word	0x40240000
 800505c:	401c0000 	.word	0x401c0000
 8005060:	40140000 	.word	0x40140000
 8005064:	3fe00000 	.word	0x3fe00000
 8005068:	4baf      	ldr	r3, [pc, #700]	; (8005328 <_dtoa_r+0x920>)
 800506a:	f7fb fac5 	bl	80005f8 <__aeabi_dmul>
 800506e:	4606      	mov	r6, r0
 8005070:	460f      	mov	r7, r1
 8005072:	e7ac      	b.n	8004fce <_dtoa_r+0x5c6>
 8005074:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005078:	9d00      	ldr	r5, [sp, #0]
 800507a:	4642      	mov	r2, r8
 800507c:	464b      	mov	r3, r9
 800507e:	4630      	mov	r0, r6
 8005080:	4639      	mov	r1, r7
 8005082:	f7fb fbe3 	bl	800084c <__aeabi_ddiv>
 8005086:	f7fb fd67 	bl	8000b58 <__aeabi_d2iz>
 800508a:	9002      	str	r0, [sp, #8]
 800508c:	f7fb fa4a 	bl	8000524 <__aeabi_i2d>
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	f7fb fab0 	bl	80005f8 <__aeabi_dmul>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4630      	mov	r0, r6
 800509e:	4639      	mov	r1, r7
 80050a0:	f7fb f8f2 	bl	8000288 <__aeabi_dsub>
 80050a4:	9e02      	ldr	r6, [sp, #8]
 80050a6:	9f01      	ldr	r7, [sp, #4]
 80050a8:	3630      	adds	r6, #48	; 0x30
 80050aa:	f805 6b01 	strb.w	r6, [r5], #1
 80050ae:	9e00      	ldr	r6, [sp, #0]
 80050b0:	1bae      	subs	r6, r5, r6
 80050b2:	42b7      	cmp	r7, r6
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	d137      	bne.n	800512a <_dtoa_r+0x722>
 80050ba:	f7fb f8e7 	bl	800028c <__adddf3>
 80050be:	4642      	mov	r2, r8
 80050c0:	464b      	mov	r3, r9
 80050c2:	4606      	mov	r6, r0
 80050c4:	460f      	mov	r7, r1
 80050c6:	f7fb fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80050ca:	b9c8      	cbnz	r0, 8005100 <_dtoa_r+0x6f8>
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	4630      	mov	r0, r6
 80050d2:	4639      	mov	r1, r7
 80050d4:	f7fb fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80050d8:	b110      	cbz	r0, 80050e0 <_dtoa_r+0x6d8>
 80050da:	9b02      	ldr	r3, [sp, #8]
 80050dc:	07d9      	lsls	r1, r3, #31
 80050de:	d40f      	bmi.n	8005100 <_dtoa_r+0x6f8>
 80050e0:	4620      	mov	r0, r4
 80050e2:	4659      	mov	r1, fp
 80050e4:	f000 facc 	bl	8005680 <_Bfree>
 80050e8:	2300      	movs	r3, #0
 80050ea:	702b      	strb	r3, [r5, #0]
 80050ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050ee:	f10a 0001 	add.w	r0, sl, #1
 80050f2:	6018      	str	r0, [r3, #0]
 80050f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f43f acd8 	beq.w	8004aac <_dtoa_r+0xa4>
 80050fc:	601d      	str	r5, [r3, #0]
 80050fe:	e4d5      	b.n	8004aac <_dtoa_r+0xa4>
 8005100:	f8cd a01c 	str.w	sl, [sp, #28]
 8005104:	462b      	mov	r3, r5
 8005106:	461d      	mov	r5, r3
 8005108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800510c:	2a39      	cmp	r2, #57	; 0x39
 800510e:	d108      	bne.n	8005122 <_dtoa_r+0x71a>
 8005110:	9a00      	ldr	r2, [sp, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d1f7      	bne.n	8005106 <_dtoa_r+0x6fe>
 8005116:	9a07      	ldr	r2, [sp, #28]
 8005118:	9900      	ldr	r1, [sp, #0]
 800511a:	3201      	adds	r2, #1
 800511c:	9207      	str	r2, [sp, #28]
 800511e:	2230      	movs	r2, #48	; 0x30
 8005120:	700a      	strb	r2, [r1, #0]
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	3201      	adds	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e78c      	b.n	8005044 <_dtoa_r+0x63c>
 800512a:	4b7f      	ldr	r3, [pc, #508]	; (8005328 <_dtoa_r+0x920>)
 800512c:	2200      	movs	r2, #0
 800512e:	f7fb fa63 	bl	80005f8 <__aeabi_dmul>
 8005132:	2200      	movs	r2, #0
 8005134:	2300      	movs	r3, #0
 8005136:	4606      	mov	r6, r0
 8005138:	460f      	mov	r7, r1
 800513a:	f7fb fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800513e:	2800      	cmp	r0, #0
 8005140:	d09b      	beq.n	800507a <_dtoa_r+0x672>
 8005142:	e7cd      	b.n	80050e0 <_dtoa_r+0x6d8>
 8005144:	9a08      	ldr	r2, [sp, #32]
 8005146:	2a00      	cmp	r2, #0
 8005148:	f000 80c4 	beq.w	80052d4 <_dtoa_r+0x8cc>
 800514c:	9a05      	ldr	r2, [sp, #20]
 800514e:	2a01      	cmp	r2, #1
 8005150:	f300 80a8 	bgt.w	80052a4 <_dtoa_r+0x89c>
 8005154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005156:	2a00      	cmp	r2, #0
 8005158:	f000 80a0 	beq.w	800529c <_dtoa_r+0x894>
 800515c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005160:	9e06      	ldr	r6, [sp, #24]
 8005162:	4645      	mov	r5, r8
 8005164:	9a04      	ldr	r2, [sp, #16]
 8005166:	2101      	movs	r1, #1
 8005168:	441a      	add	r2, r3
 800516a:	4620      	mov	r0, r4
 800516c:	4498      	add	r8, r3
 800516e:	9204      	str	r2, [sp, #16]
 8005170:	f000 fb42 	bl	80057f8 <__i2b>
 8005174:	4607      	mov	r7, r0
 8005176:	2d00      	cmp	r5, #0
 8005178:	dd0b      	ble.n	8005192 <_dtoa_r+0x78a>
 800517a:	9b04      	ldr	r3, [sp, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	dd08      	ble.n	8005192 <_dtoa_r+0x78a>
 8005180:	42ab      	cmp	r3, r5
 8005182:	9a04      	ldr	r2, [sp, #16]
 8005184:	bfa8      	it	ge
 8005186:	462b      	movge	r3, r5
 8005188:	eba8 0803 	sub.w	r8, r8, r3
 800518c:	1aed      	subs	r5, r5, r3
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	9b06      	ldr	r3, [sp, #24]
 8005194:	b1fb      	cbz	r3, 80051d6 <_dtoa_r+0x7ce>
 8005196:	9b08      	ldr	r3, [sp, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 809f 	beq.w	80052dc <_dtoa_r+0x8d4>
 800519e:	2e00      	cmp	r6, #0
 80051a0:	dd11      	ble.n	80051c6 <_dtoa_r+0x7be>
 80051a2:	4639      	mov	r1, r7
 80051a4:	4632      	mov	r2, r6
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 fbe2 	bl	8005970 <__pow5mult>
 80051ac:	465a      	mov	r2, fp
 80051ae:	4601      	mov	r1, r0
 80051b0:	4607      	mov	r7, r0
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fb36 	bl	8005824 <__multiply>
 80051b8:	4659      	mov	r1, fp
 80051ba:	9007      	str	r0, [sp, #28]
 80051bc:	4620      	mov	r0, r4
 80051be:	f000 fa5f 	bl	8005680 <_Bfree>
 80051c2:	9b07      	ldr	r3, [sp, #28]
 80051c4:	469b      	mov	fp, r3
 80051c6:	9b06      	ldr	r3, [sp, #24]
 80051c8:	1b9a      	subs	r2, r3, r6
 80051ca:	d004      	beq.n	80051d6 <_dtoa_r+0x7ce>
 80051cc:	4659      	mov	r1, fp
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fbce 	bl	8005970 <__pow5mult>
 80051d4:	4683      	mov	fp, r0
 80051d6:	2101      	movs	r1, #1
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 fb0d 	bl	80057f8 <__i2b>
 80051de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	4606      	mov	r6, r0
 80051e4:	dd7c      	ble.n	80052e0 <_dtoa_r+0x8d8>
 80051e6:	461a      	mov	r2, r3
 80051e8:	4601      	mov	r1, r0
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 fbc0 	bl	8005970 <__pow5mult>
 80051f0:	9b05      	ldr	r3, [sp, #20]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	4606      	mov	r6, r0
 80051f6:	dd76      	ble.n	80052e6 <_dtoa_r+0x8de>
 80051f8:	2300      	movs	r3, #0
 80051fa:	9306      	str	r3, [sp, #24]
 80051fc:	6933      	ldr	r3, [r6, #16]
 80051fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005202:	6918      	ldr	r0, [r3, #16]
 8005204:	f000 faa8 	bl	8005758 <__hi0bits>
 8005208:	f1c0 0020 	rsb	r0, r0, #32
 800520c:	9b04      	ldr	r3, [sp, #16]
 800520e:	4418      	add	r0, r3
 8005210:	f010 001f 	ands.w	r0, r0, #31
 8005214:	f000 8086 	beq.w	8005324 <_dtoa_r+0x91c>
 8005218:	f1c0 0320 	rsb	r3, r0, #32
 800521c:	2b04      	cmp	r3, #4
 800521e:	dd7f      	ble.n	8005320 <_dtoa_r+0x918>
 8005220:	f1c0 001c 	rsb	r0, r0, #28
 8005224:	9b04      	ldr	r3, [sp, #16]
 8005226:	4403      	add	r3, r0
 8005228:	4480      	add	r8, r0
 800522a:	4405      	add	r5, r0
 800522c:	9304      	str	r3, [sp, #16]
 800522e:	f1b8 0f00 	cmp.w	r8, #0
 8005232:	dd05      	ble.n	8005240 <_dtoa_r+0x838>
 8005234:	4659      	mov	r1, fp
 8005236:	4642      	mov	r2, r8
 8005238:	4620      	mov	r0, r4
 800523a:	f000 fbf3 	bl	8005a24 <__lshift>
 800523e:	4683      	mov	fp, r0
 8005240:	9b04      	ldr	r3, [sp, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	dd05      	ble.n	8005252 <_dtoa_r+0x84a>
 8005246:	4631      	mov	r1, r6
 8005248:	461a      	mov	r2, r3
 800524a:	4620      	mov	r0, r4
 800524c:	f000 fbea 	bl	8005a24 <__lshift>
 8005250:	4606      	mov	r6, r0
 8005252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d069      	beq.n	800532c <_dtoa_r+0x924>
 8005258:	4631      	mov	r1, r6
 800525a:	4658      	mov	r0, fp
 800525c:	f000 fc4e 	bl	8005afc <__mcmp>
 8005260:	2800      	cmp	r0, #0
 8005262:	da63      	bge.n	800532c <_dtoa_r+0x924>
 8005264:	2300      	movs	r3, #0
 8005266:	4659      	mov	r1, fp
 8005268:	220a      	movs	r2, #10
 800526a:	4620      	mov	r0, r4
 800526c:	f000 fa2a 	bl	80056c4 <__multadd>
 8005270:	9b08      	ldr	r3, [sp, #32]
 8005272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005276:	4683      	mov	fp, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 818f 	beq.w	800559c <_dtoa_r+0xb94>
 800527e:	4639      	mov	r1, r7
 8005280:	2300      	movs	r3, #0
 8005282:	220a      	movs	r2, #10
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fa1d 	bl	80056c4 <__multadd>
 800528a:	f1b9 0f00 	cmp.w	r9, #0
 800528e:	4607      	mov	r7, r0
 8005290:	f300 808e 	bgt.w	80053b0 <_dtoa_r+0x9a8>
 8005294:	9b05      	ldr	r3, [sp, #20]
 8005296:	2b02      	cmp	r3, #2
 8005298:	dc50      	bgt.n	800533c <_dtoa_r+0x934>
 800529a:	e089      	b.n	80053b0 <_dtoa_r+0x9a8>
 800529c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800529e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052a2:	e75d      	b.n	8005160 <_dtoa_r+0x758>
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	1e5e      	subs	r6, r3, #1
 80052a8:	9b06      	ldr	r3, [sp, #24]
 80052aa:	42b3      	cmp	r3, r6
 80052ac:	bfbf      	itttt	lt
 80052ae:	9b06      	ldrlt	r3, [sp, #24]
 80052b0:	9606      	strlt	r6, [sp, #24]
 80052b2:	1af2      	sublt	r2, r6, r3
 80052b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80052b6:	bfb6      	itet	lt
 80052b8:	189b      	addlt	r3, r3, r2
 80052ba:	1b9e      	subge	r6, r3, r6
 80052bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80052be:	9b01      	ldr	r3, [sp, #4]
 80052c0:	bfb8      	it	lt
 80052c2:	2600      	movlt	r6, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bfb5      	itete	lt
 80052c8:	eba8 0503 	sublt.w	r5, r8, r3
 80052cc:	9b01      	ldrge	r3, [sp, #4]
 80052ce:	2300      	movlt	r3, #0
 80052d0:	4645      	movge	r5, r8
 80052d2:	e747      	b.n	8005164 <_dtoa_r+0x75c>
 80052d4:	9e06      	ldr	r6, [sp, #24]
 80052d6:	9f08      	ldr	r7, [sp, #32]
 80052d8:	4645      	mov	r5, r8
 80052da:	e74c      	b.n	8005176 <_dtoa_r+0x76e>
 80052dc:	9a06      	ldr	r2, [sp, #24]
 80052de:	e775      	b.n	80051cc <_dtoa_r+0x7c4>
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	dc18      	bgt.n	8005318 <_dtoa_r+0x910>
 80052e6:	9b02      	ldr	r3, [sp, #8]
 80052e8:	b9b3      	cbnz	r3, 8005318 <_dtoa_r+0x910>
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	b9a3      	cbnz	r3, 800531c <_dtoa_r+0x914>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f8:	0d1b      	lsrs	r3, r3, #20
 80052fa:	051b      	lsls	r3, r3, #20
 80052fc:	b12b      	cbz	r3, 800530a <_dtoa_r+0x902>
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	3301      	adds	r3, #1
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	f108 0801 	add.w	r8, r8, #1
 8005308:	2301      	movs	r3, #1
 800530a:	9306      	str	r3, [sp, #24]
 800530c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800530e:	2b00      	cmp	r3, #0
 8005310:	f47f af74 	bne.w	80051fc <_dtoa_r+0x7f4>
 8005314:	2001      	movs	r0, #1
 8005316:	e779      	b.n	800520c <_dtoa_r+0x804>
 8005318:	2300      	movs	r3, #0
 800531a:	e7f6      	b.n	800530a <_dtoa_r+0x902>
 800531c:	9b02      	ldr	r3, [sp, #8]
 800531e:	e7f4      	b.n	800530a <_dtoa_r+0x902>
 8005320:	d085      	beq.n	800522e <_dtoa_r+0x826>
 8005322:	4618      	mov	r0, r3
 8005324:	301c      	adds	r0, #28
 8005326:	e77d      	b.n	8005224 <_dtoa_r+0x81c>
 8005328:	40240000 	.word	0x40240000
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	dc38      	bgt.n	80053a4 <_dtoa_r+0x99c>
 8005332:	9b05      	ldr	r3, [sp, #20]
 8005334:	2b02      	cmp	r3, #2
 8005336:	dd35      	ble.n	80053a4 <_dtoa_r+0x99c>
 8005338:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800533c:	f1b9 0f00 	cmp.w	r9, #0
 8005340:	d10d      	bne.n	800535e <_dtoa_r+0x956>
 8005342:	4631      	mov	r1, r6
 8005344:	464b      	mov	r3, r9
 8005346:	2205      	movs	r2, #5
 8005348:	4620      	mov	r0, r4
 800534a:	f000 f9bb 	bl	80056c4 <__multadd>
 800534e:	4601      	mov	r1, r0
 8005350:	4606      	mov	r6, r0
 8005352:	4658      	mov	r0, fp
 8005354:	f000 fbd2 	bl	8005afc <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	f73f adbd 	bgt.w	8004ed8 <_dtoa_r+0x4d0>
 800535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005360:	9d00      	ldr	r5, [sp, #0]
 8005362:	ea6f 0a03 	mvn.w	sl, r3
 8005366:	f04f 0800 	mov.w	r8, #0
 800536a:	4631      	mov	r1, r6
 800536c:	4620      	mov	r0, r4
 800536e:	f000 f987 	bl	8005680 <_Bfree>
 8005372:	2f00      	cmp	r7, #0
 8005374:	f43f aeb4 	beq.w	80050e0 <_dtoa_r+0x6d8>
 8005378:	f1b8 0f00 	cmp.w	r8, #0
 800537c:	d005      	beq.n	800538a <_dtoa_r+0x982>
 800537e:	45b8      	cmp	r8, r7
 8005380:	d003      	beq.n	800538a <_dtoa_r+0x982>
 8005382:	4641      	mov	r1, r8
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f97b 	bl	8005680 <_Bfree>
 800538a:	4639      	mov	r1, r7
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f977 	bl	8005680 <_Bfree>
 8005392:	e6a5      	b.n	80050e0 <_dtoa_r+0x6d8>
 8005394:	2600      	movs	r6, #0
 8005396:	4637      	mov	r7, r6
 8005398:	e7e1      	b.n	800535e <_dtoa_r+0x956>
 800539a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800539c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053a0:	4637      	mov	r7, r6
 80053a2:	e599      	b.n	8004ed8 <_dtoa_r+0x4d0>
 80053a4:	9b08      	ldr	r3, [sp, #32]
 80053a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80fd 	beq.w	80055aa <_dtoa_r+0xba2>
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	dd05      	ble.n	80053c0 <_dtoa_r+0x9b8>
 80053b4:	4639      	mov	r1, r7
 80053b6:	462a      	mov	r2, r5
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fb33 	bl	8005a24 <__lshift>
 80053be:	4607      	mov	r7, r0
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d05c      	beq.n	8005480 <_dtoa_r+0xa78>
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f919 	bl	8005600 <_Balloc>
 80053ce:	4605      	mov	r5, r0
 80053d0:	b928      	cbnz	r0, 80053de <_dtoa_r+0x9d6>
 80053d2:	4b80      	ldr	r3, [pc, #512]	; (80055d4 <_dtoa_r+0xbcc>)
 80053d4:	4602      	mov	r2, r0
 80053d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80053da:	f7ff bb2e 	b.w	8004a3a <_dtoa_r+0x32>
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	3202      	adds	r2, #2
 80053e2:	0092      	lsls	r2, r2, #2
 80053e4:	f107 010c 	add.w	r1, r7, #12
 80053e8:	300c      	adds	r0, #12
 80053ea:	f7fe fd45 	bl	8003e78 <memcpy>
 80053ee:	2201      	movs	r2, #1
 80053f0:	4629      	mov	r1, r5
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fb16 	bl	8005a24 <__lshift>
 80053f8:	9b00      	ldr	r3, [sp, #0]
 80053fa:	3301      	adds	r3, #1
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	9b00      	ldr	r3, [sp, #0]
 8005400:	444b      	add	r3, r9
 8005402:	9307      	str	r3, [sp, #28]
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	46b8      	mov	r8, r7
 800540c:	9306      	str	r3, [sp, #24]
 800540e:	4607      	mov	r7, r0
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	4631      	mov	r1, r6
 8005414:	3b01      	subs	r3, #1
 8005416:	4658      	mov	r0, fp
 8005418:	9302      	str	r3, [sp, #8]
 800541a:	f7ff fa67 	bl	80048ec <quorem>
 800541e:	4603      	mov	r3, r0
 8005420:	3330      	adds	r3, #48	; 0x30
 8005422:	9004      	str	r0, [sp, #16]
 8005424:	4641      	mov	r1, r8
 8005426:	4658      	mov	r0, fp
 8005428:	9308      	str	r3, [sp, #32]
 800542a:	f000 fb67 	bl	8005afc <__mcmp>
 800542e:	463a      	mov	r2, r7
 8005430:	4681      	mov	r9, r0
 8005432:	4631      	mov	r1, r6
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fb7d 	bl	8005b34 <__mdiff>
 800543a:	68c2      	ldr	r2, [r0, #12]
 800543c:	9b08      	ldr	r3, [sp, #32]
 800543e:	4605      	mov	r5, r0
 8005440:	bb02      	cbnz	r2, 8005484 <_dtoa_r+0xa7c>
 8005442:	4601      	mov	r1, r0
 8005444:	4658      	mov	r0, fp
 8005446:	f000 fb59 	bl	8005afc <__mcmp>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	4602      	mov	r2, r0
 800544e:	4629      	mov	r1, r5
 8005450:	4620      	mov	r0, r4
 8005452:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005456:	f000 f913 	bl	8005680 <_Bfree>
 800545a:	9b05      	ldr	r3, [sp, #20]
 800545c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800545e:	9d01      	ldr	r5, [sp, #4]
 8005460:	ea43 0102 	orr.w	r1, r3, r2
 8005464:	9b06      	ldr	r3, [sp, #24]
 8005466:	430b      	orrs	r3, r1
 8005468:	9b08      	ldr	r3, [sp, #32]
 800546a:	d10d      	bne.n	8005488 <_dtoa_r+0xa80>
 800546c:	2b39      	cmp	r3, #57	; 0x39
 800546e:	d029      	beq.n	80054c4 <_dtoa_r+0xabc>
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	dd01      	ble.n	800547a <_dtoa_r+0xa72>
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	3331      	adds	r3, #49	; 0x31
 800547a:	9a02      	ldr	r2, [sp, #8]
 800547c:	7013      	strb	r3, [r2, #0]
 800547e:	e774      	b.n	800536a <_dtoa_r+0x962>
 8005480:	4638      	mov	r0, r7
 8005482:	e7b9      	b.n	80053f8 <_dtoa_r+0x9f0>
 8005484:	2201      	movs	r2, #1
 8005486:	e7e2      	b.n	800544e <_dtoa_r+0xa46>
 8005488:	f1b9 0f00 	cmp.w	r9, #0
 800548c:	db06      	blt.n	800549c <_dtoa_r+0xa94>
 800548e:	9905      	ldr	r1, [sp, #20]
 8005490:	ea41 0909 	orr.w	r9, r1, r9
 8005494:	9906      	ldr	r1, [sp, #24]
 8005496:	ea59 0101 	orrs.w	r1, r9, r1
 800549a:	d120      	bne.n	80054de <_dtoa_r+0xad6>
 800549c:	2a00      	cmp	r2, #0
 800549e:	ddec      	ble.n	800547a <_dtoa_r+0xa72>
 80054a0:	4659      	mov	r1, fp
 80054a2:	2201      	movs	r2, #1
 80054a4:	4620      	mov	r0, r4
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	f000 fabc 	bl	8005a24 <__lshift>
 80054ac:	4631      	mov	r1, r6
 80054ae:	4683      	mov	fp, r0
 80054b0:	f000 fb24 	bl	8005afc <__mcmp>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	dc02      	bgt.n	80054c0 <_dtoa_r+0xab8>
 80054ba:	d1de      	bne.n	800547a <_dtoa_r+0xa72>
 80054bc:	07da      	lsls	r2, r3, #31
 80054be:	d5dc      	bpl.n	800547a <_dtoa_r+0xa72>
 80054c0:	2b39      	cmp	r3, #57	; 0x39
 80054c2:	d1d8      	bne.n	8005476 <_dtoa_r+0xa6e>
 80054c4:	9a02      	ldr	r2, [sp, #8]
 80054c6:	2339      	movs	r3, #57	; 0x39
 80054c8:	7013      	strb	r3, [r2, #0]
 80054ca:	462b      	mov	r3, r5
 80054cc:	461d      	mov	r5, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80054d4:	2a39      	cmp	r2, #57	; 0x39
 80054d6:	d050      	beq.n	800557a <_dtoa_r+0xb72>
 80054d8:	3201      	adds	r2, #1
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	e745      	b.n	800536a <_dtoa_r+0x962>
 80054de:	2a00      	cmp	r2, #0
 80054e0:	dd03      	ble.n	80054ea <_dtoa_r+0xae2>
 80054e2:	2b39      	cmp	r3, #57	; 0x39
 80054e4:	d0ee      	beq.n	80054c4 <_dtoa_r+0xabc>
 80054e6:	3301      	adds	r3, #1
 80054e8:	e7c7      	b.n	800547a <_dtoa_r+0xa72>
 80054ea:	9a01      	ldr	r2, [sp, #4]
 80054ec:	9907      	ldr	r1, [sp, #28]
 80054ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054f2:	428a      	cmp	r2, r1
 80054f4:	d02a      	beq.n	800554c <_dtoa_r+0xb44>
 80054f6:	4659      	mov	r1, fp
 80054f8:	2300      	movs	r3, #0
 80054fa:	220a      	movs	r2, #10
 80054fc:	4620      	mov	r0, r4
 80054fe:	f000 f8e1 	bl	80056c4 <__multadd>
 8005502:	45b8      	cmp	r8, r7
 8005504:	4683      	mov	fp, r0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	f04f 020a 	mov.w	r2, #10
 800550e:	4641      	mov	r1, r8
 8005510:	4620      	mov	r0, r4
 8005512:	d107      	bne.n	8005524 <_dtoa_r+0xb1c>
 8005514:	f000 f8d6 	bl	80056c4 <__multadd>
 8005518:	4680      	mov	r8, r0
 800551a:	4607      	mov	r7, r0
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	3301      	adds	r3, #1
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	e775      	b.n	8005410 <_dtoa_r+0xa08>
 8005524:	f000 f8ce 	bl	80056c4 <__multadd>
 8005528:	4639      	mov	r1, r7
 800552a:	4680      	mov	r8, r0
 800552c:	2300      	movs	r3, #0
 800552e:	220a      	movs	r2, #10
 8005530:	4620      	mov	r0, r4
 8005532:	f000 f8c7 	bl	80056c4 <__multadd>
 8005536:	4607      	mov	r7, r0
 8005538:	e7f0      	b.n	800551c <_dtoa_r+0xb14>
 800553a:	f1b9 0f00 	cmp.w	r9, #0
 800553e:	9a00      	ldr	r2, [sp, #0]
 8005540:	bfcc      	ite	gt
 8005542:	464d      	movgt	r5, r9
 8005544:	2501      	movle	r5, #1
 8005546:	4415      	add	r5, r2
 8005548:	f04f 0800 	mov.w	r8, #0
 800554c:	4659      	mov	r1, fp
 800554e:	2201      	movs	r2, #1
 8005550:	4620      	mov	r0, r4
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	f000 fa66 	bl	8005a24 <__lshift>
 8005558:	4631      	mov	r1, r6
 800555a:	4683      	mov	fp, r0
 800555c:	f000 face 	bl	8005afc <__mcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	dcb2      	bgt.n	80054ca <_dtoa_r+0xac2>
 8005564:	d102      	bne.n	800556c <_dtoa_r+0xb64>
 8005566:	9b01      	ldr	r3, [sp, #4]
 8005568:	07db      	lsls	r3, r3, #31
 800556a:	d4ae      	bmi.n	80054ca <_dtoa_r+0xac2>
 800556c:	462b      	mov	r3, r5
 800556e:	461d      	mov	r5, r3
 8005570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005574:	2a30      	cmp	r2, #48	; 0x30
 8005576:	d0fa      	beq.n	800556e <_dtoa_r+0xb66>
 8005578:	e6f7      	b.n	800536a <_dtoa_r+0x962>
 800557a:	9a00      	ldr	r2, [sp, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d1a5      	bne.n	80054cc <_dtoa_r+0xac4>
 8005580:	f10a 0a01 	add.w	sl, sl, #1
 8005584:	2331      	movs	r3, #49	; 0x31
 8005586:	e779      	b.n	800547c <_dtoa_r+0xa74>
 8005588:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <_dtoa_r+0xbd0>)
 800558a:	f7ff baaf 	b.w	8004aec <_dtoa_r+0xe4>
 800558e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005590:	2b00      	cmp	r3, #0
 8005592:	f47f aa86 	bne.w	8004aa2 <_dtoa_r+0x9a>
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <_dtoa_r+0xbd4>)
 8005598:	f7ff baa8 	b.w	8004aec <_dtoa_r+0xe4>
 800559c:	f1b9 0f00 	cmp.w	r9, #0
 80055a0:	dc03      	bgt.n	80055aa <_dtoa_r+0xba2>
 80055a2:	9b05      	ldr	r3, [sp, #20]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	f73f aec9 	bgt.w	800533c <_dtoa_r+0x934>
 80055aa:	9d00      	ldr	r5, [sp, #0]
 80055ac:	4631      	mov	r1, r6
 80055ae:	4658      	mov	r0, fp
 80055b0:	f7ff f99c 	bl	80048ec <quorem>
 80055b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055b8:	f805 3b01 	strb.w	r3, [r5], #1
 80055bc:	9a00      	ldr	r2, [sp, #0]
 80055be:	1aaa      	subs	r2, r5, r2
 80055c0:	4591      	cmp	r9, r2
 80055c2:	ddba      	ble.n	800553a <_dtoa_r+0xb32>
 80055c4:	4659      	mov	r1, fp
 80055c6:	2300      	movs	r3, #0
 80055c8:	220a      	movs	r2, #10
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 f87a 	bl	80056c4 <__multadd>
 80055d0:	4683      	mov	fp, r0
 80055d2:	e7eb      	b.n	80055ac <_dtoa_r+0xba4>
 80055d4:	0800692b 	.word	0x0800692b
 80055d8:	08006884 	.word	0x08006884
 80055dc:	080068a8 	.word	0x080068a8

080055e0 <_localeconv_r>:
 80055e0:	4800      	ldr	r0, [pc, #0]	; (80055e4 <_localeconv_r+0x4>)
 80055e2:	4770      	bx	lr
 80055e4:	20000160 	.word	0x20000160

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f000 bbc8 	b.w	8005d7e <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	200002f0 	.word	0x200002f0

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f000 bbc3 	b.w	8005d80 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	200002f0 	.word	0x200002f0

08005600 <_Balloc>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	b976      	cbnz	r6, 8005628 <_Balloc+0x28>
 800560a:	2010      	movs	r0, #16
 800560c:	f7fe fc2c 	bl	8003e68 <malloc>
 8005610:	4602      	mov	r2, r0
 8005612:	6260      	str	r0, [r4, #36]	; 0x24
 8005614:	b920      	cbnz	r0, 8005620 <_Balloc+0x20>
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <_Balloc+0x78>)
 8005618:	4818      	ldr	r0, [pc, #96]	; (800567c <_Balloc+0x7c>)
 800561a:	2166      	movs	r1, #102	; 0x66
 800561c:	f000 fb7e 	bl	8005d1c <__assert_func>
 8005620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005624:	6006      	str	r6, [r0, #0]
 8005626:	60c6      	str	r6, [r0, #12]
 8005628:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800562a:	68f3      	ldr	r3, [r6, #12]
 800562c:	b183      	cbz	r3, 8005650 <_Balloc+0x50>
 800562e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005636:	b9b8      	cbnz	r0, 8005668 <_Balloc+0x68>
 8005638:	2101      	movs	r1, #1
 800563a:	fa01 f605 	lsl.w	r6, r1, r5
 800563e:	1d72      	adds	r2, r6, #5
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	4620      	mov	r0, r4
 8005644:	f000 fb5a 	bl	8005cfc <_calloc_r>
 8005648:	b160      	cbz	r0, 8005664 <_Balloc+0x64>
 800564a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800564e:	e00e      	b.n	800566e <_Balloc+0x6e>
 8005650:	2221      	movs	r2, #33	; 0x21
 8005652:	2104      	movs	r1, #4
 8005654:	4620      	mov	r0, r4
 8005656:	f000 fb51 	bl	8005cfc <_calloc_r>
 800565a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800565c:	60f0      	str	r0, [r6, #12]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e4      	bne.n	800562e <_Balloc+0x2e>
 8005664:	2000      	movs	r0, #0
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	6802      	ldr	r2, [r0, #0]
 800566a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800566e:	2300      	movs	r3, #0
 8005670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005674:	e7f7      	b.n	8005666 <_Balloc+0x66>
 8005676:	bf00      	nop
 8005678:	080068b5 	.word	0x080068b5
 800567c:	0800693c 	.word	0x0800693c

08005680 <_Bfree>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005684:	4605      	mov	r5, r0
 8005686:	460c      	mov	r4, r1
 8005688:	b976      	cbnz	r6, 80056a8 <_Bfree+0x28>
 800568a:	2010      	movs	r0, #16
 800568c:	f7fe fbec 	bl	8003e68 <malloc>
 8005690:	4602      	mov	r2, r0
 8005692:	6268      	str	r0, [r5, #36]	; 0x24
 8005694:	b920      	cbnz	r0, 80056a0 <_Bfree+0x20>
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <_Bfree+0x3c>)
 8005698:	4809      	ldr	r0, [pc, #36]	; (80056c0 <_Bfree+0x40>)
 800569a:	218a      	movs	r1, #138	; 0x8a
 800569c:	f000 fb3e 	bl	8005d1c <__assert_func>
 80056a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056a4:	6006      	str	r6, [r0, #0]
 80056a6:	60c6      	str	r6, [r0, #12]
 80056a8:	b13c      	cbz	r4, 80056ba <_Bfree+0x3a>
 80056aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056b4:	6021      	str	r1, [r4, #0]
 80056b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	080068b5 	.word	0x080068b5
 80056c0:	0800693c 	.word	0x0800693c

080056c4 <__multadd>:
 80056c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c8:	690e      	ldr	r6, [r1, #16]
 80056ca:	4607      	mov	r7, r0
 80056cc:	4698      	mov	r8, r3
 80056ce:	460c      	mov	r4, r1
 80056d0:	f101 0014 	add.w	r0, r1, #20
 80056d4:	2300      	movs	r3, #0
 80056d6:	6805      	ldr	r5, [r0, #0]
 80056d8:	b2a9      	uxth	r1, r5
 80056da:	fb02 8101 	mla	r1, r2, r1, r8
 80056de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80056e2:	0c2d      	lsrs	r5, r5, #16
 80056e4:	fb02 c505 	mla	r5, r2, r5, ip
 80056e8:	b289      	uxth	r1, r1
 80056ea:	3301      	adds	r3, #1
 80056ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80056f0:	429e      	cmp	r6, r3
 80056f2:	f840 1b04 	str.w	r1, [r0], #4
 80056f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80056fa:	dcec      	bgt.n	80056d6 <__multadd+0x12>
 80056fc:	f1b8 0f00 	cmp.w	r8, #0
 8005700:	d022      	beq.n	8005748 <__multadd+0x84>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	42b3      	cmp	r3, r6
 8005706:	dc19      	bgt.n	800573c <__multadd+0x78>
 8005708:	6861      	ldr	r1, [r4, #4]
 800570a:	4638      	mov	r0, r7
 800570c:	3101      	adds	r1, #1
 800570e:	f7ff ff77 	bl	8005600 <_Balloc>
 8005712:	4605      	mov	r5, r0
 8005714:	b928      	cbnz	r0, 8005722 <__multadd+0x5e>
 8005716:	4602      	mov	r2, r0
 8005718:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <__multadd+0x8c>)
 800571a:	480e      	ldr	r0, [pc, #56]	; (8005754 <__multadd+0x90>)
 800571c:	21b5      	movs	r1, #181	; 0xb5
 800571e:	f000 fafd 	bl	8005d1c <__assert_func>
 8005722:	6922      	ldr	r2, [r4, #16]
 8005724:	3202      	adds	r2, #2
 8005726:	f104 010c 	add.w	r1, r4, #12
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	300c      	adds	r0, #12
 800572e:	f7fe fba3 	bl	8003e78 <memcpy>
 8005732:	4621      	mov	r1, r4
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff ffa3 	bl	8005680 <_Bfree>
 800573a:	462c      	mov	r4, r5
 800573c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005740:	3601      	adds	r6, #1
 8005742:	f8c3 8014 	str.w	r8, [r3, #20]
 8005746:	6126      	str	r6, [r4, #16]
 8005748:	4620      	mov	r0, r4
 800574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574e:	bf00      	nop
 8005750:	0800692b 	.word	0x0800692b
 8005754:	0800693c 	.word	0x0800693c

08005758 <__hi0bits>:
 8005758:	0c03      	lsrs	r3, r0, #16
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	b9d3      	cbnz	r3, 8005794 <__hi0bits+0x3c>
 800575e:	0400      	lsls	r0, r0, #16
 8005760:	2310      	movs	r3, #16
 8005762:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005766:	bf04      	itt	eq
 8005768:	0200      	lsleq	r0, r0, #8
 800576a:	3308      	addeq	r3, #8
 800576c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005770:	bf04      	itt	eq
 8005772:	0100      	lsleq	r0, r0, #4
 8005774:	3304      	addeq	r3, #4
 8005776:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800577a:	bf04      	itt	eq
 800577c:	0080      	lsleq	r0, r0, #2
 800577e:	3302      	addeq	r3, #2
 8005780:	2800      	cmp	r0, #0
 8005782:	db05      	blt.n	8005790 <__hi0bits+0x38>
 8005784:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005788:	f103 0301 	add.w	r3, r3, #1
 800578c:	bf08      	it	eq
 800578e:	2320      	moveq	r3, #32
 8005790:	4618      	mov	r0, r3
 8005792:	4770      	bx	lr
 8005794:	2300      	movs	r3, #0
 8005796:	e7e4      	b.n	8005762 <__hi0bits+0xa>

08005798 <__lo0bits>:
 8005798:	6803      	ldr	r3, [r0, #0]
 800579a:	f013 0207 	ands.w	r2, r3, #7
 800579e:	4601      	mov	r1, r0
 80057a0:	d00b      	beq.n	80057ba <__lo0bits+0x22>
 80057a2:	07da      	lsls	r2, r3, #31
 80057a4:	d424      	bmi.n	80057f0 <__lo0bits+0x58>
 80057a6:	0798      	lsls	r0, r3, #30
 80057a8:	bf49      	itett	mi
 80057aa:	085b      	lsrmi	r3, r3, #1
 80057ac:	089b      	lsrpl	r3, r3, #2
 80057ae:	2001      	movmi	r0, #1
 80057b0:	600b      	strmi	r3, [r1, #0]
 80057b2:	bf5c      	itt	pl
 80057b4:	600b      	strpl	r3, [r1, #0]
 80057b6:	2002      	movpl	r0, #2
 80057b8:	4770      	bx	lr
 80057ba:	b298      	uxth	r0, r3
 80057bc:	b9b0      	cbnz	r0, 80057ec <__lo0bits+0x54>
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	2010      	movs	r0, #16
 80057c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057c6:	bf04      	itt	eq
 80057c8:	0a1b      	lsreq	r3, r3, #8
 80057ca:	3008      	addeq	r0, #8
 80057cc:	071a      	lsls	r2, r3, #28
 80057ce:	bf04      	itt	eq
 80057d0:	091b      	lsreq	r3, r3, #4
 80057d2:	3004      	addeq	r0, #4
 80057d4:	079a      	lsls	r2, r3, #30
 80057d6:	bf04      	itt	eq
 80057d8:	089b      	lsreq	r3, r3, #2
 80057da:	3002      	addeq	r0, #2
 80057dc:	07da      	lsls	r2, r3, #31
 80057de:	d403      	bmi.n	80057e8 <__lo0bits+0x50>
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	f100 0001 	add.w	r0, r0, #1
 80057e6:	d005      	beq.n	80057f4 <__lo0bits+0x5c>
 80057e8:	600b      	str	r3, [r1, #0]
 80057ea:	4770      	bx	lr
 80057ec:	4610      	mov	r0, r2
 80057ee:	e7e8      	b.n	80057c2 <__lo0bits+0x2a>
 80057f0:	2000      	movs	r0, #0
 80057f2:	4770      	bx	lr
 80057f4:	2020      	movs	r0, #32
 80057f6:	4770      	bx	lr

080057f8 <__i2b>:
 80057f8:	b510      	push	{r4, lr}
 80057fa:	460c      	mov	r4, r1
 80057fc:	2101      	movs	r1, #1
 80057fe:	f7ff feff 	bl	8005600 <_Balloc>
 8005802:	4602      	mov	r2, r0
 8005804:	b928      	cbnz	r0, 8005812 <__i2b+0x1a>
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <__i2b+0x24>)
 8005808:	4805      	ldr	r0, [pc, #20]	; (8005820 <__i2b+0x28>)
 800580a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800580e:	f000 fa85 	bl	8005d1c <__assert_func>
 8005812:	2301      	movs	r3, #1
 8005814:	6144      	str	r4, [r0, #20]
 8005816:	6103      	str	r3, [r0, #16]
 8005818:	bd10      	pop	{r4, pc}
 800581a:	bf00      	nop
 800581c:	0800692b 	.word	0x0800692b
 8005820:	0800693c 	.word	0x0800693c

08005824 <__multiply>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	4614      	mov	r4, r2
 800582a:	690a      	ldr	r2, [r1, #16]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	bfb8      	it	lt
 8005832:	460b      	movlt	r3, r1
 8005834:	460d      	mov	r5, r1
 8005836:	bfbc      	itt	lt
 8005838:	4625      	movlt	r5, r4
 800583a:	461c      	movlt	r4, r3
 800583c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005840:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005844:	68ab      	ldr	r3, [r5, #8]
 8005846:	6869      	ldr	r1, [r5, #4]
 8005848:	eb0a 0709 	add.w	r7, sl, r9
 800584c:	42bb      	cmp	r3, r7
 800584e:	b085      	sub	sp, #20
 8005850:	bfb8      	it	lt
 8005852:	3101      	addlt	r1, #1
 8005854:	f7ff fed4 	bl	8005600 <_Balloc>
 8005858:	b930      	cbnz	r0, 8005868 <__multiply+0x44>
 800585a:	4602      	mov	r2, r0
 800585c:	4b42      	ldr	r3, [pc, #264]	; (8005968 <__multiply+0x144>)
 800585e:	4843      	ldr	r0, [pc, #268]	; (800596c <__multiply+0x148>)
 8005860:	f240 115d 	movw	r1, #349	; 0x15d
 8005864:	f000 fa5a 	bl	8005d1c <__assert_func>
 8005868:	f100 0614 	add.w	r6, r0, #20
 800586c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005870:	4633      	mov	r3, r6
 8005872:	2200      	movs	r2, #0
 8005874:	4543      	cmp	r3, r8
 8005876:	d31e      	bcc.n	80058b6 <__multiply+0x92>
 8005878:	f105 0c14 	add.w	ip, r5, #20
 800587c:	f104 0314 	add.w	r3, r4, #20
 8005880:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005884:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005888:	9202      	str	r2, [sp, #8]
 800588a:	ebac 0205 	sub.w	r2, ip, r5
 800588e:	3a15      	subs	r2, #21
 8005890:	f022 0203 	bic.w	r2, r2, #3
 8005894:	3204      	adds	r2, #4
 8005896:	f105 0115 	add.w	r1, r5, #21
 800589a:	458c      	cmp	ip, r1
 800589c:	bf38      	it	cc
 800589e:	2204      	movcc	r2, #4
 80058a0:	9201      	str	r2, [sp, #4]
 80058a2:	9a02      	ldr	r2, [sp, #8]
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d808      	bhi.n	80058bc <__multiply+0x98>
 80058aa:	2f00      	cmp	r7, #0
 80058ac:	dc55      	bgt.n	800595a <__multiply+0x136>
 80058ae:	6107      	str	r7, [r0, #16]
 80058b0:	b005      	add	sp, #20
 80058b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b6:	f843 2b04 	str.w	r2, [r3], #4
 80058ba:	e7db      	b.n	8005874 <__multiply+0x50>
 80058bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80058c0:	f1ba 0f00 	cmp.w	sl, #0
 80058c4:	d020      	beq.n	8005908 <__multiply+0xe4>
 80058c6:	f105 0e14 	add.w	lr, r5, #20
 80058ca:	46b1      	mov	r9, r6
 80058cc:	2200      	movs	r2, #0
 80058ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 80058d2:	f8d9 b000 	ldr.w	fp, [r9]
 80058d6:	b2a1      	uxth	r1, r4
 80058d8:	fa1f fb8b 	uxth.w	fp, fp
 80058dc:	fb0a b101 	mla	r1, sl, r1, fp
 80058e0:	4411      	add	r1, r2
 80058e2:	f8d9 2000 	ldr.w	r2, [r9]
 80058e6:	0c24      	lsrs	r4, r4, #16
 80058e8:	0c12      	lsrs	r2, r2, #16
 80058ea:	fb0a 2404 	mla	r4, sl, r4, r2
 80058ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80058f2:	b289      	uxth	r1, r1
 80058f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80058f8:	45f4      	cmp	ip, lr
 80058fa:	f849 1b04 	str.w	r1, [r9], #4
 80058fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005902:	d8e4      	bhi.n	80058ce <__multiply+0xaa>
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	5072      	str	r2, [r6, r1]
 8005908:	9a03      	ldr	r2, [sp, #12]
 800590a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800590e:	3304      	adds	r3, #4
 8005910:	f1b9 0f00 	cmp.w	r9, #0
 8005914:	d01f      	beq.n	8005956 <__multiply+0x132>
 8005916:	6834      	ldr	r4, [r6, #0]
 8005918:	f105 0114 	add.w	r1, r5, #20
 800591c:	46b6      	mov	lr, r6
 800591e:	f04f 0a00 	mov.w	sl, #0
 8005922:	880a      	ldrh	r2, [r1, #0]
 8005924:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005928:	fb09 b202 	mla	r2, r9, r2, fp
 800592c:	4492      	add	sl, r2
 800592e:	b2a4      	uxth	r4, r4
 8005930:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005934:	f84e 4b04 	str.w	r4, [lr], #4
 8005938:	f851 4b04 	ldr.w	r4, [r1], #4
 800593c:	f8be 2000 	ldrh.w	r2, [lr]
 8005940:	0c24      	lsrs	r4, r4, #16
 8005942:	fb09 2404 	mla	r4, r9, r4, r2
 8005946:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800594a:	458c      	cmp	ip, r1
 800594c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005950:	d8e7      	bhi.n	8005922 <__multiply+0xfe>
 8005952:	9a01      	ldr	r2, [sp, #4]
 8005954:	50b4      	str	r4, [r6, r2]
 8005956:	3604      	adds	r6, #4
 8005958:	e7a3      	b.n	80058a2 <__multiply+0x7e>
 800595a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1a5      	bne.n	80058ae <__multiply+0x8a>
 8005962:	3f01      	subs	r7, #1
 8005964:	e7a1      	b.n	80058aa <__multiply+0x86>
 8005966:	bf00      	nop
 8005968:	0800692b 	.word	0x0800692b
 800596c:	0800693c 	.word	0x0800693c

08005970 <__pow5mult>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	4615      	mov	r5, r2
 8005976:	f012 0203 	ands.w	r2, r2, #3
 800597a:	4606      	mov	r6, r0
 800597c:	460f      	mov	r7, r1
 800597e:	d007      	beq.n	8005990 <__pow5mult+0x20>
 8005980:	4c25      	ldr	r4, [pc, #148]	; (8005a18 <__pow5mult+0xa8>)
 8005982:	3a01      	subs	r2, #1
 8005984:	2300      	movs	r3, #0
 8005986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800598a:	f7ff fe9b 	bl	80056c4 <__multadd>
 800598e:	4607      	mov	r7, r0
 8005990:	10ad      	asrs	r5, r5, #2
 8005992:	d03d      	beq.n	8005a10 <__pow5mult+0xa0>
 8005994:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005996:	b97c      	cbnz	r4, 80059b8 <__pow5mult+0x48>
 8005998:	2010      	movs	r0, #16
 800599a:	f7fe fa65 	bl	8003e68 <malloc>
 800599e:	4602      	mov	r2, r0
 80059a0:	6270      	str	r0, [r6, #36]	; 0x24
 80059a2:	b928      	cbnz	r0, 80059b0 <__pow5mult+0x40>
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <__pow5mult+0xac>)
 80059a6:	481e      	ldr	r0, [pc, #120]	; (8005a20 <__pow5mult+0xb0>)
 80059a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80059ac:	f000 f9b6 	bl	8005d1c <__assert_func>
 80059b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059b4:	6004      	str	r4, [r0, #0]
 80059b6:	60c4      	str	r4, [r0, #12]
 80059b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059c0:	b94c      	cbnz	r4, 80059d6 <__pow5mult+0x66>
 80059c2:	f240 2171 	movw	r1, #625	; 0x271
 80059c6:	4630      	mov	r0, r6
 80059c8:	f7ff ff16 	bl	80057f8 <__i2b>
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80059d2:	4604      	mov	r4, r0
 80059d4:	6003      	str	r3, [r0, #0]
 80059d6:	f04f 0900 	mov.w	r9, #0
 80059da:	07eb      	lsls	r3, r5, #31
 80059dc:	d50a      	bpl.n	80059f4 <__pow5mult+0x84>
 80059de:	4639      	mov	r1, r7
 80059e0:	4622      	mov	r2, r4
 80059e2:	4630      	mov	r0, r6
 80059e4:	f7ff ff1e 	bl	8005824 <__multiply>
 80059e8:	4639      	mov	r1, r7
 80059ea:	4680      	mov	r8, r0
 80059ec:	4630      	mov	r0, r6
 80059ee:	f7ff fe47 	bl	8005680 <_Bfree>
 80059f2:	4647      	mov	r7, r8
 80059f4:	106d      	asrs	r5, r5, #1
 80059f6:	d00b      	beq.n	8005a10 <__pow5mult+0xa0>
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	b938      	cbnz	r0, 8005a0c <__pow5mult+0x9c>
 80059fc:	4622      	mov	r2, r4
 80059fe:	4621      	mov	r1, r4
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7ff ff0f 	bl	8005824 <__multiply>
 8005a06:	6020      	str	r0, [r4, #0]
 8005a08:	f8c0 9000 	str.w	r9, [r0]
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	e7e4      	b.n	80059da <__pow5mult+0x6a>
 8005a10:	4638      	mov	r0, r7
 8005a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a16:	bf00      	nop
 8005a18:	08006a90 	.word	0x08006a90
 8005a1c:	080068b5 	.word	0x080068b5
 8005a20:	0800693c 	.word	0x0800693c

08005a24 <__lshift>:
 8005a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	460c      	mov	r4, r1
 8005a2a:	6849      	ldr	r1, [r1, #4]
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	4607      	mov	r7, r0
 8005a36:	4691      	mov	r9, r2
 8005a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a3c:	f108 0601 	add.w	r6, r8, #1
 8005a40:	42b3      	cmp	r3, r6
 8005a42:	db0b      	blt.n	8005a5c <__lshift+0x38>
 8005a44:	4638      	mov	r0, r7
 8005a46:	f7ff fddb 	bl	8005600 <_Balloc>
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	b948      	cbnz	r0, 8005a62 <__lshift+0x3e>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <__lshift+0xd0>)
 8005a52:	4829      	ldr	r0, [pc, #164]	; (8005af8 <__lshift+0xd4>)
 8005a54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a58:	f000 f960 	bl	8005d1c <__assert_func>
 8005a5c:	3101      	adds	r1, #1
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	e7ee      	b.n	8005a40 <__lshift+0x1c>
 8005a62:	2300      	movs	r3, #0
 8005a64:	f100 0114 	add.w	r1, r0, #20
 8005a68:	f100 0210 	add.w	r2, r0, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	4553      	cmp	r3, sl
 8005a70:	db33      	blt.n	8005ada <__lshift+0xb6>
 8005a72:	6920      	ldr	r0, [r4, #16]
 8005a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a78:	f104 0314 	add.w	r3, r4, #20
 8005a7c:	f019 091f 	ands.w	r9, r9, #31
 8005a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a88:	d02b      	beq.n	8005ae2 <__lshift+0xbe>
 8005a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a8e:	468a      	mov	sl, r1
 8005a90:	2200      	movs	r2, #0
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	fa00 f009 	lsl.w	r0, r0, r9
 8005a98:	4302      	orrs	r2, r0
 8005a9a:	f84a 2b04 	str.w	r2, [sl], #4
 8005a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa2:	459c      	cmp	ip, r3
 8005aa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005aa8:	d8f3      	bhi.n	8005a92 <__lshift+0x6e>
 8005aaa:	ebac 0304 	sub.w	r3, ip, r4
 8005aae:	3b15      	subs	r3, #21
 8005ab0:	f023 0303 	bic.w	r3, r3, #3
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	f104 0015 	add.w	r0, r4, #21
 8005aba:	4584      	cmp	ip, r0
 8005abc:	bf38      	it	cc
 8005abe:	2304      	movcc	r3, #4
 8005ac0:	50ca      	str	r2, [r1, r3]
 8005ac2:	b10a      	cbz	r2, 8005ac8 <__lshift+0xa4>
 8005ac4:	f108 0602 	add.w	r6, r8, #2
 8005ac8:	3e01      	subs	r6, #1
 8005aca:	4638      	mov	r0, r7
 8005acc:	612e      	str	r6, [r5, #16]
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f7ff fdd6 	bl	8005680 <_Bfree>
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ade:	3301      	adds	r3, #1
 8005ae0:	e7c5      	b.n	8005a6e <__lshift+0x4a>
 8005ae2:	3904      	subs	r1, #4
 8005ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005aec:	459c      	cmp	ip, r3
 8005aee:	d8f9      	bhi.n	8005ae4 <__lshift+0xc0>
 8005af0:	e7ea      	b.n	8005ac8 <__lshift+0xa4>
 8005af2:	bf00      	nop
 8005af4:	0800692b 	.word	0x0800692b
 8005af8:	0800693c 	.word	0x0800693c

08005afc <__mcmp>:
 8005afc:	b530      	push	{r4, r5, lr}
 8005afe:	6902      	ldr	r2, [r0, #16]
 8005b00:	690c      	ldr	r4, [r1, #16]
 8005b02:	1b12      	subs	r2, r2, r4
 8005b04:	d10e      	bne.n	8005b24 <__mcmp+0x28>
 8005b06:	f100 0314 	add.w	r3, r0, #20
 8005b0a:	3114      	adds	r1, #20
 8005b0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005b10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005b14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005b18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005b1c:	42a5      	cmp	r5, r4
 8005b1e:	d003      	beq.n	8005b28 <__mcmp+0x2c>
 8005b20:	d305      	bcc.n	8005b2e <__mcmp+0x32>
 8005b22:	2201      	movs	r2, #1
 8005b24:	4610      	mov	r0, r2
 8005b26:	bd30      	pop	{r4, r5, pc}
 8005b28:	4283      	cmp	r3, r0
 8005b2a:	d3f3      	bcc.n	8005b14 <__mcmp+0x18>
 8005b2c:	e7fa      	b.n	8005b24 <__mcmp+0x28>
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	e7f7      	b.n	8005b24 <__mcmp+0x28>

08005b34 <__mdiff>:
 8005b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	460c      	mov	r4, r1
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4617      	mov	r7, r2
 8005b42:	f7ff ffdb 	bl	8005afc <__mcmp>
 8005b46:	1e05      	subs	r5, r0, #0
 8005b48:	d110      	bne.n	8005b6c <__mdiff+0x38>
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f7ff fd57 	bl	8005600 <_Balloc>
 8005b52:	b930      	cbnz	r0, 8005b62 <__mdiff+0x2e>
 8005b54:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <__mdiff+0x108>)
 8005b56:	4602      	mov	r2, r0
 8005b58:	f240 2132 	movw	r1, #562	; 0x232
 8005b5c:	4838      	ldr	r0, [pc, #224]	; (8005c40 <__mdiff+0x10c>)
 8005b5e:	f000 f8dd 	bl	8005d1c <__assert_func>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6c:	bfa4      	itt	ge
 8005b6e:	463b      	movge	r3, r7
 8005b70:	4627      	movge	r7, r4
 8005b72:	4630      	mov	r0, r6
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	bfa6      	itte	ge
 8005b78:	461c      	movge	r4, r3
 8005b7a:	2500      	movge	r5, #0
 8005b7c:	2501      	movlt	r5, #1
 8005b7e:	f7ff fd3f 	bl	8005600 <_Balloc>
 8005b82:	b920      	cbnz	r0, 8005b8e <__mdiff+0x5a>
 8005b84:	4b2d      	ldr	r3, [pc, #180]	; (8005c3c <__mdiff+0x108>)
 8005b86:	4602      	mov	r2, r0
 8005b88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b8c:	e7e6      	b.n	8005b5c <__mdiff+0x28>
 8005b8e:	693e      	ldr	r6, [r7, #16]
 8005b90:	60c5      	str	r5, [r0, #12]
 8005b92:	6925      	ldr	r5, [r4, #16]
 8005b94:	f107 0114 	add.w	r1, r7, #20
 8005b98:	f104 0914 	add.w	r9, r4, #20
 8005b9c:	f100 0e14 	add.w	lr, r0, #20
 8005ba0:	f107 0210 	add.w	r2, r7, #16
 8005ba4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005ba8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005bac:	46f2      	mov	sl, lr
 8005bae:	2700      	movs	r7, #0
 8005bb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005bb8:	fa1f f883 	uxth.w	r8, r3
 8005bbc:	fa17 f78b 	uxtah	r7, r7, fp
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	eba7 0808 	sub.w	r8, r7, r8
 8005bc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005bca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005bce:	fa1f f888 	uxth.w	r8, r8
 8005bd2:	141f      	asrs	r7, r3, #16
 8005bd4:	454d      	cmp	r5, r9
 8005bd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005bda:	f84a 3b04 	str.w	r3, [sl], #4
 8005bde:	d8e7      	bhi.n	8005bb0 <__mdiff+0x7c>
 8005be0:	1b2b      	subs	r3, r5, r4
 8005be2:	3b15      	subs	r3, #21
 8005be4:	f023 0303 	bic.w	r3, r3, #3
 8005be8:	3304      	adds	r3, #4
 8005bea:	3415      	adds	r4, #21
 8005bec:	42a5      	cmp	r5, r4
 8005bee:	bf38      	it	cc
 8005bf0:	2304      	movcc	r3, #4
 8005bf2:	4419      	add	r1, r3
 8005bf4:	4473      	add	r3, lr
 8005bf6:	469e      	mov	lr, r3
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	4565      	cmp	r5, ip
 8005bfc:	d30e      	bcc.n	8005c1c <__mdiff+0xe8>
 8005bfe:	f10c 0203 	add.w	r2, ip, #3
 8005c02:	1a52      	subs	r2, r2, r1
 8005c04:	f022 0203 	bic.w	r2, r2, #3
 8005c08:	3903      	subs	r1, #3
 8005c0a:	458c      	cmp	ip, r1
 8005c0c:	bf38      	it	cc
 8005c0e:	2200      	movcc	r2, #0
 8005c10:	441a      	add	r2, r3
 8005c12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005c16:	b17b      	cbz	r3, 8005c38 <__mdiff+0x104>
 8005c18:	6106      	str	r6, [r0, #16]
 8005c1a:	e7a5      	b.n	8005b68 <__mdiff+0x34>
 8005c1c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005c20:	fa17 f488 	uxtah	r4, r7, r8
 8005c24:	1422      	asrs	r2, r4, #16
 8005c26:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005c2a:	b2a4      	uxth	r4, r4
 8005c2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005c30:	f84e 4b04 	str.w	r4, [lr], #4
 8005c34:	1417      	asrs	r7, r2, #16
 8005c36:	e7e0      	b.n	8005bfa <__mdiff+0xc6>
 8005c38:	3e01      	subs	r6, #1
 8005c3a:	e7ea      	b.n	8005c12 <__mdiff+0xde>
 8005c3c:	0800692b 	.word	0x0800692b
 8005c40:	0800693c 	.word	0x0800693c

08005c44 <__d2b>:
 8005c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c48:	4689      	mov	r9, r1
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	ec57 6b10 	vmov	r6, r7, d0
 8005c50:	4690      	mov	r8, r2
 8005c52:	f7ff fcd5 	bl	8005600 <_Balloc>
 8005c56:	4604      	mov	r4, r0
 8005c58:	b930      	cbnz	r0, 8005c68 <__d2b+0x24>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <__d2b+0xb0>)
 8005c5e:	4826      	ldr	r0, [pc, #152]	; (8005cf8 <__d2b+0xb4>)
 8005c60:	f240 310a 	movw	r1, #778	; 0x30a
 8005c64:	f000 f85a 	bl	8005d1c <__assert_func>
 8005c68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c70:	bb35      	cbnz	r5, 8005cc0 <__d2b+0x7c>
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	d028      	beq.n	8005cca <__d2b+0x86>
 8005c78:	4668      	mov	r0, sp
 8005c7a:	9600      	str	r6, [sp, #0]
 8005c7c:	f7ff fd8c 	bl	8005798 <__lo0bits>
 8005c80:	9900      	ldr	r1, [sp, #0]
 8005c82:	b300      	cbz	r0, 8005cc6 <__d2b+0x82>
 8005c84:	9a01      	ldr	r2, [sp, #4]
 8005c86:	f1c0 0320 	rsb	r3, r0, #32
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	40c2      	lsrs	r2, r0
 8005c92:	6163      	str	r3, [r4, #20]
 8005c94:	9201      	str	r2, [sp, #4]
 8005c96:	9b01      	ldr	r3, [sp, #4]
 8005c98:	61a3      	str	r3, [r4, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bf14      	ite	ne
 8005c9e:	2202      	movne	r2, #2
 8005ca0:	2201      	moveq	r2, #1
 8005ca2:	6122      	str	r2, [r4, #16]
 8005ca4:	b1d5      	cbz	r5, 8005cdc <__d2b+0x98>
 8005ca6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005caa:	4405      	add	r5, r0
 8005cac:	f8c9 5000 	str.w	r5, [r9]
 8005cb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cb4:	f8c8 0000 	str.w	r0, [r8]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	b003      	add	sp, #12
 8005cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc4:	e7d5      	b.n	8005c72 <__d2b+0x2e>
 8005cc6:	6161      	str	r1, [r4, #20]
 8005cc8:	e7e5      	b.n	8005c96 <__d2b+0x52>
 8005cca:	a801      	add	r0, sp, #4
 8005ccc:	f7ff fd64 	bl	8005798 <__lo0bits>
 8005cd0:	9b01      	ldr	r3, [sp, #4]
 8005cd2:	6163      	str	r3, [r4, #20]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	6122      	str	r2, [r4, #16]
 8005cd8:	3020      	adds	r0, #32
 8005cda:	e7e3      	b.n	8005ca4 <__d2b+0x60>
 8005cdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ce0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ce4:	f8c9 0000 	str.w	r0, [r9]
 8005ce8:	6918      	ldr	r0, [r3, #16]
 8005cea:	f7ff fd35 	bl	8005758 <__hi0bits>
 8005cee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cf2:	e7df      	b.n	8005cb4 <__d2b+0x70>
 8005cf4:	0800692b 	.word	0x0800692b
 8005cf8:	0800693c 	.word	0x0800693c

08005cfc <_calloc_r>:
 8005cfc:	b513      	push	{r0, r1, r4, lr}
 8005cfe:	434a      	muls	r2, r1
 8005d00:	4611      	mov	r1, r2
 8005d02:	9201      	str	r2, [sp, #4]
 8005d04:	f7fe f91e 	bl	8003f44 <_malloc_r>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	b118      	cbz	r0, 8005d14 <_calloc_r+0x18>
 8005d0c:	9a01      	ldr	r2, [sp, #4]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	f7fe f8c0 	bl	8003e94 <memset>
 8005d14:	4620      	mov	r0, r4
 8005d16:	b002      	add	sp, #8
 8005d18:	bd10      	pop	{r4, pc}
	...

08005d1c <__assert_func>:
 8005d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d1e:	4614      	mov	r4, r2
 8005d20:	461a      	mov	r2, r3
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <__assert_func+0x2c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4605      	mov	r5, r0
 8005d28:	68d8      	ldr	r0, [r3, #12]
 8005d2a:	b14c      	cbz	r4, 8005d40 <__assert_func+0x24>
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <__assert_func+0x30>)
 8005d2e:	9100      	str	r1, [sp, #0]
 8005d30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d34:	4906      	ldr	r1, [pc, #24]	; (8005d50 <__assert_func+0x34>)
 8005d36:	462b      	mov	r3, r5
 8005d38:	f000 f80e 	bl	8005d58 <fiprintf>
 8005d3c:	f000 fa5a 	bl	80061f4 <abort>
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <__assert_func+0x38>)
 8005d42:	461c      	mov	r4, r3
 8005d44:	e7f3      	b.n	8005d2e <__assert_func+0x12>
 8005d46:	bf00      	nop
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	08006a9c 	.word	0x08006a9c
 8005d50:	08006aa9 	.word	0x08006aa9
 8005d54:	08006ad7 	.word	0x08006ad7

08005d58 <fiprintf>:
 8005d58:	b40e      	push	{r1, r2, r3}
 8005d5a:	b503      	push	{r0, r1, lr}
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	ab03      	add	r3, sp, #12
 8005d60:	4805      	ldr	r0, [pc, #20]	; (8005d78 <fiprintf+0x20>)
 8005d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	f000 f845 	bl	8005df8 <_vfiprintf_r>
 8005d6e:	b002      	add	sp, #8
 8005d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d74:	b003      	add	sp, #12
 8005d76:	4770      	bx	lr
 8005d78:	2000000c 	.word	0x2000000c

08005d7c <__retarget_lock_init_recursive>:
 8005d7c:	4770      	bx	lr

08005d7e <__retarget_lock_acquire_recursive>:
 8005d7e:	4770      	bx	lr

08005d80 <__retarget_lock_release_recursive>:
 8005d80:	4770      	bx	lr

08005d82 <__ascii_mbtowc>:
 8005d82:	b082      	sub	sp, #8
 8005d84:	b901      	cbnz	r1, 8005d88 <__ascii_mbtowc+0x6>
 8005d86:	a901      	add	r1, sp, #4
 8005d88:	b142      	cbz	r2, 8005d9c <__ascii_mbtowc+0x1a>
 8005d8a:	b14b      	cbz	r3, 8005da0 <__ascii_mbtowc+0x1e>
 8005d8c:	7813      	ldrb	r3, [r2, #0]
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	1e10      	subs	r0, r2, #0
 8005d94:	bf18      	it	ne
 8005d96:	2001      	movne	r0, #1
 8005d98:	b002      	add	sp, #8
 8005d9a:	4770      	bx	lr
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	e7fb      	b.n	8005d98 <__ascii_mbtowc+0x16>
 8005da0:	f06f 0001 	mvn.w	r0, #1
 8005da4:	e7f8      	b.n	8005d98 <__ascii_mbtowc+0x16>

08005da6 <__sfputc_r>:
 8005da6:	6893      	ldr	r3, [r2, #8]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	b410      	push	{r4}
 8005dae:	6093      	str	r3, [r2, #8]
 8005db0:	da08      	bge.n	8005dc4 <__sfputc_r+0x1e>
 8005db2:	6994      	ldr	r4, [r2, #24]
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	db01      	blt.n	8005dbc <__sfputc_r+0x16>
 8005db8:	290a      	cmp	r1, #10
 8005dba:	d103      	bne.n	8005dc4 <__sfputc_r+0x1e>
 8005dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc0:	f000 b94a 	b.w	8006058 <__swbuf_r>
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	1c58      	adds	r0, r3, #1
 8005dc8:	6010      	str	r0, [r2, #0]
 8005dca:	7019      	strb	r1, [r3, #0]
 8005dcc:	4608      	mov	r0, r1
 8005dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <__sfputs_r>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460f      	mov	r7, r1
 8005dda:	4614      	mov	r4, r2
 8005ddc:	18d5      	adds	r5, r2, r3
 8005dde:	42ac      	cmp	r4, r5
 8005de0:	d101      	bne.n	8005de6 <__sfputs_r+0x12>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e007      	b.n	8005df6 <__sfputs_r+0x22>
 8005de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dea:	463a      	mov	r2, r7
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7ff ffda 	bl	8005da6 <__sfputc_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d1f3      	bne.n	8005dde <__sfputs_r+0xa>
 8005df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005df8 <_vfiprintf_r>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	b09d      	sub	sp, #116	; 0x74
 8005e00:	4614      	mov	r4, r2
 8005e02:	4698      	mov	r8, r3
 8005e04:	4606      	mov	r6, r0
 8005e06:	b118      	cbz	r0, 8005e10 <_vfiprintf_r+0x18>
 8005e08:	6983      	ldr	r3, [r0, #24]
 8005e0a:	b90b      	cbnz	r3, 8005e10 <_vfiprintf_r+0x18>
 8005e0c:	f000 fb14 	bl	8006438 <__sinit>
 8005e10:	4b89      	ldr	r3, [pc, #548]	; (8006038 <_vfiprintf_r+0x240>)
 8005e12:	429d      	cmp	r5, r3
 8005e14:	d11b      	bne.n	8005e4e <_vfiprintf_r+0x56>
 8005e16:	6875      	ldr	r5, [r6, #4]
 8005e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e1a:	07d9      	lsls	r1, r3, #31
 8005e1c:	d405      	bmi.n	8005e2a <_vfiprintf_r+0x32>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	059a      	lsls	r2, r3, #22
 8005e22:	d402      	bmi.n	8005e2a <_vfiprintf_r+0x32>
 8005e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e26:	f7ff ffaa 	bl	8005d7e <__retarget_lock_acquire_recursive>
 8005e2a:	89ab      	ldrh	r3, [r5, #12]
 8005e2c:	071b      	lsls	r3, r3, #28
 8005e2e:	d501      	bpl.n	8005e34 <_vfiprintf_r+0x3c>
 8005e30:	692b      	ldr	r3, [r5, #16]
 8005e32:	b9eb      	cbnz	r3, 8005e70 <_vfiprintf_r+0x78>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 f96e 	bl	8006118 <__swsetup_r>
 8005e3c:	b1c0      	cbz	r0, 8005e70 <_vfiprintf_r+0x78>
 8005e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e40:	07dc      	lsls	r4, r3, #31
 8005e42:	d50e      	bpl.n	8005e62 <_vfiprintf_r+0x6a>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	b01d      	add	sp, #116	; 0x74
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	4b7b      	ldr	r3, [pc, #492]	; (800603c <_vfiprintf_r+0x244>)
 8005e50:	429d      	cmp	r5, r3
 8005e52:	d101      	bne.n	8005e58 <_vfiprintf_r+0x60>
 8005e54:	68b5      	ldr	r5, [r6, #8]
 8005e56:	e7df      	b.n	8005e18 <_vfiprintf_r+0x20>
 8005e58:	4b79      	ldr	r3, [pc, #484]	; (8006040 <_vfiprintf_r+0x248>)
 8005e5a:	429d      	cmp	r5, r3
 8005e5c:	bf08      	it	eq
 8005e5e:	68f5      	ldreq	r5, [r6, #12]
 8005e60:	e7da      	b.n	8005e18 <_vfiprintf_r+0x20>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	0598      	lsls	r0, r3, #22
 8005e66:	d4ed      	bmi.n	8005e44 <_vfiprintf_r+0x4c>
 8005e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e6a:	f7ff ff89 	bl	8005d80 <__retarget_lock_release_recursive>
 8005e6e:	e7e9      	b.n	8005e44 <_vfiprintf_r+0x4c>
 8005e70:	2300      	movs	r3, #0
 8005e72:	9309      	str	r3, [sp, #36]	; 0x24
 8005e74:	2320      	movs	r3, #32
 8005e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7e:	2330      	movs	r3, #48	; 0x30
 8005e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006044 <_vfiprintf_r+0x24c>
 8005e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e88:	f04f 0901 	mov.w	r9, #1
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	469a      	mov	sl, r3
 8005e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e94:	b10a      	cbz	r2, 8005e9a <_vfiprintf_r+0xa2>
 8005e96:	2a25      	cmp	r2, #37	; 0x25
 8005e98:	d1f9      	bne.n	8005e8e <_vfiprintf_r+0x96>
 8005e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e9e:	d00b      	beq.n	8005eb8 <_vfiprintf_r+0xc0>
 8005ea0:	465b      	mov	r3, fp
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff ff94 	bl	8005dd4 <__sfputs_r>
 8005eac:	3001      	adds	r0, #1
 8005eae:	f000 80aa 	beq.w	8006006 <_vfiprintf_r+0x20e>
 8005eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb4:	445a      	add	r2, fp
 8005eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80a2 	beq.w	8006006 <_vfiprintf_r+0x20e>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ecc:	f10a 0a01 	add.w	sl, sl, #1
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eda:	4654      	mov	r4, sl
 8005edc:	2205      	movs	r2, #5
 8005ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee2:	4858      	ldr	r0, [pc, #352]	; (8006044 <_vfiprintf_r+0x24c>)
 8005ee4:	f7fa f97c 	bl	80001e0 <memchr>
 8005ee8:	9a04      	ldr	r2, [sp, #16]
 8005eea:	b9d8      	cbnz	r0, 8005f24 <_vfiprintf_r+0x12c>
 8005eec:	06d1      	lsls	r1, r2, #27
 8005eee:	bf44      	itt	mi
 8005ef0:	2320      	movmi	r3, #32
 8005ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef6:	0713      	lsls	r3, r2, #28
 8005ef8:	bf44      	itt	mi
 8005efa:	232b      	movmi	r3, #43	; 0x2b
 8005efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f00:	f89a 3000 	ldrb.w	r3, [sl]
 8005f04:	2b2a      	cmp	r3, #42	; 0x2a
 8005f06:	d015      	beq.n	8005f34 <_vfiprintf_r+0x13c>
 8005f08:	9a07      	ldr	r2, [sp, #28]
 8005f0a:	4654      	mov	r4, sl
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f04f 0c0a 	mov.w	ip, #10
 8005f12:	4621      	mov	r1, r4
 8005f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f18:	3b30      	subs	r3, #48	; 0x30
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d94e      	bls.n	8005fbc <_vfiprintf_r+0x1c4>
 8005f1e:	b1b0      	cbz	r0, 8005f4e <_vfiprintf_r+0x156>
 8005f20:	9207      	str	r2, [sp, #28]
 8005f22:	e014      	b.n	8005f4e <_vfiprintf_r+0x156>
 8005f24:	eba0 0308 	sub.w	r3, r0, r8
 8005f28:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	46a2      	mov	sl, r4
 8005f32:	e7d2      	b.n	8005eda <_vfiprintf_r+0xe2>
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	1d19      	adds	r1, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	9103      	str	r1, [sp, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfbb      	ittet	lt
 8005f40:	425b      	neglt	r3, r3
 8005f42:	f042 0202 	orrlt.w	r2, r2, #2
 8005f46:	9307      	strge	r3, [sp, #28]
 8005f48:	9307      	strlt	r3, [sp, #28]
 8005f4a:	bfb8      	it	lt
 8005f4c:	9204      	strlt	r2, [sp, #16]
 8005f4e:	7823      	ldrb	r3, [r4, #0]
 8005f50:	2b2e      	cmp	r3, #46	; 0x2e
 8005f52:	d10c      	bne.n	8005f6e <_vfiprintf_r+0x176>
 8005f54:	7863      	ldrb	r3, [r4, #1]
 8005f56:	2b2a      	cmp	r3, #42	; 0x2a
 8005f58:	d135      	bne.n	8005fc6 <_vfiprintf_r+0x1ce>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9203      	str	r2, [sp, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfb8      	it	lt
 8005f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f6a:	3402      	adds	r4, #2
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006054 <_vfiprintf_r+0x25c>
 8005f72:	7821      	ldrb	r1, [r4, #0]
 8005f74:	2203      	movs	r2, #3
 8005f76:	4650      	mov	r0, sl
 8005f78:	f7fa f932 	bl	80001e0 <memchr>
 8005f7c:	b140      	cbz	r0, 8005f90 <_vfiprintf_r+0x198>
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	eba0 000a 	sub.w	r0, r0, sl
 8005f84:	fa03 f000 	lsl.w	r0, r3, r0
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	4303      	orrs	r3, r0
 8005f8c:	3401      	adds	r4, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f94:	482c      	ldr	r0, [pc, #176]	; (8006048 <_vfiprintf_r+0x250>)
 8005f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	f7fa f920 	bl	80001e0 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d03f      	beq.n	8006024 <_vfiprintf_r+0x22c>
 8005fa4:	4b29      	ldr	r3, [pc, #164]	; (800604c <_vfiprintf_r+0x254>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_vfiprintf_r+0x1f8>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	443b      	add	r3, r7
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	e767      	b.n	8005e8c <_vfiprintf_r+0x94>
 8005fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7a5      	b.n	8005f12 <_vfiprintf_r+0x11a>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	; 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_vfiprintf_r+0x1ee>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c5      	beq.n	8005f6e <_vfiprintf_r+0x176>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c3      	b.n	8005f6e <_vfiprintf_r+0x176>
 8005fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fea:	4604      	mov	r4, r0
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f0      	b.n	8005fd2 <_vfiprintf_r+0x1da>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4b16      	ldr	r3, [pc, #88]	; (8006050 <_vfiprintf_r+0x258>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7fe f89c 	bl	8004138 <_printf_float>
 8006000:	4607      	mov	r7, r0
 8006002:	1c78      	adds	r0, r7, #1
 8006004:	d1d6      	bne.n	8005fb4 <_vfiprintf_r+0x1bc>
 8006006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006008:	07d9      	lsls	r1, r3, #31
 800600a:	d405      	bmi.n	8006018 <_vfiprintf_r+0x220>
 800600c:	89ab      	ldrh	r3, [r5, #12]
 800600e:	059a      	lsls	r2, r3, #22
 8006010:	d402      	bmi.n	8006018 <_vfiprintf_r+0x220>
 8006012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006014:	f7ff feb4 	bl	8005d80 <__retarget_lock_release_recursive>
 8006018:	89ab      	ldrh	r3, [r5, #12]
 800601a:	065b      	lsls	r3, r3, #25
 800601c:	f53f af12 	bmi.w	8005e44 <_vfiprintf_r+0x4c>
 8006020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006022:	e711      	b.n	8005e48 <_vfiprintf_r+0x50>
 8006024:	ab03      	add	r3, sp, #12
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	462a      	mov	r2, r5
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <_vfiprintf_r+0x258>)
 800602c:	a904      	add	r1, sp, #16
 800602e:	4630      	mov	r0, r6
 8006030:	f7fe fb26 	bl	8004680 <_printf_i>
 8006034:	e7e4      	b.n	8006000 <_vfiprintf_r+0x208>
 8006036:	bf00      	nop
 8006038:	08006c14 	.word	0x08006c14
 800603c:	08006c34 	.word	0x08006c34
 8006040:	08006bf4 	.word	0x08006bf4
 8006044:	08006ae2 	.word	0x08006ae2
 8006048:	08006aec 	.word	0x08006aec
 800604c:	08004139 	.word	0x08004139
 8006050:	08005dd5 	.word	0x08005dd5
 8006054:	08006ae8 	.word	0x08006ae8

08006058 <__swbuf_r>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	460e      	mov	r6, r1
 800605c:	4614      	mov	r4, r2
 800605e:	4605      	mov	r5, r0
 8006060:	b118      	cbz	r0, 800606a <__swbuf_r+0x12>
 8006062:	6983      	ldr	r3, [r0, #24]
 8006064:	b90b      	cbnz	r3, 800606a <__swbuf_r+0x12>
 8006066:	f000 f9e7 	bl	8006438 <__sinit>
 800606a:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <__swbuf_r+0x98>)
 800606c:	429c      	cmp	r4, r3
 800606e:	d12b      	bne.n	80060c8 <__swbuf_r+0x70>
 8006070:	686c      	ldr	r4, [r5, #4]
 8006072:	69a3      	ldr	r3, [r4, #24]
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	071a      	lsls	r2, r3, #28
 800607a:	d52f      	bpl.n	80060dc <__swbuf_r+0x84>
 800607c:	6923      	ldr	r3, [r4, #16]
 800607e:	b36b      	cbz	r3, 80060dc <__swbuf_r+0x84>
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	1ac0      	subs	r0, r0, r3
 8006086:	6963      	ldr	r3, [r4, #20]
 8006088:	b2f6      	uxtb	r6, r6
 800608a:	4283      	cmp	r3, r0
 800608c:	4637      	mov	r7, r6
 800608e:	dc04      	bgt.n	800609a <__swbuf_r+0x42>
 8006090:	4621      	mov	r1, r4
 8006092:	4628      	mov	r0, r5
 8006094:	f000 f93c 	bl	8006310 <_fflush_r>
 8006098:	bb30      	cbnz	r0, 80060e8 <__swbuf_r+0x90>
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	3b01      	subs	r3, #1
 800609e:	60a3      	str	r3, [r4, #8]
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	701e      	strb	r6, [r3, #0]
 80060a8:	6963      	ldr	r3, [r4, #20]
 80060aa:	3001      	adds	r0, #1
 80060ac:	4283      	cmp	r3, r0
 80060ae:	d004      	beq.n	80060ba <__swbuf_r+0x62>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d506      	bpl.n	80060c4 <__swbuf_r+0x6c>
 80060b6:	2e0a      	cmp	r6, #10
 80060b8:	d104      	bne.n	80060c4 <__swbuf_r+0x6c>
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f927 	bl	8006310 <_fflush_r>
 80060c2:	b988      	cbnz	r0, 80060e8 <__swbuf_r+0x90>
 80060c4:	4638      	mov	r0, r7
 80060c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <__swbuf_r+0x9c>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d101      	bne.n	80060d2 <__swbuf_r+0x7a>
 80060ce:	68ac      	ldr	r4, [r5, #8]
 80060d0:	e7cf      	b.n	8006072 <__swbuf_r+0x1a>
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <__swbuf_r+0xa0>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	bf08      	it	eq
 80060d8:	68ec      	ldreq	r4, [r5, #12]
 80060da:	e7ca      	b.n	8006072 <__swbuf_r+0x1a>
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f81a 	bl	8006118 <__swsetup_r>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0cb      	beq.n	8006080 <__swbuf_r+0x28>
 80060e8:	f04f 37ff 	mov.w	r7, #4294967295
 80060ec:	e7ea      	b.n	80060c4 <__swbuf_r+0x6c>
 80060ee:	bf00      	nop
 80060f0:	08006c14 	.word	0x08006c14
 80060f4:	08006c34 	.word	0x08006c34
 80060f8:	08006bf4 	.word	0x08006bf4

080060fc <__ascii_wctomb>:
 80060fc:	b149      	cbz	r1, 8006112 <__ascii_wctomb+0x16>
 80060fe:	2aff      	cmp	r2, #255	; 0xff
 8006100:	bf85      	ittet	hi
 8006102:	238a      	movhi	r3, #138	; 0x8a
 8006104:	6003      	strhi	r3, [r0, #0]
 8006106:	700a      	strbls	r2, [r1, #0]
 8006108:	f04f 30ff 	movhi.w	r0, #4294967295
 800610c:	bf98      	it	ls
 800610e:	2001      	movls	r0, #1
 8006110:	4770      	bx	lr
 8006112:	4608      	mov	r0, r1
 8006114:	4770      	bx	lr
	...

08006118 <__swsetup_r>:
 8006118:	4b32      	ldr	r3, [pc, #200]	; (80061e4 <__swsetup_r+0xcc>)
 800611a:	b570      	push	{r4, r5, r6, lr}
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	4606      	mov	r6, r0
 8006120:	460c      	mov	r4, r1
 8006122:	b125      	cbz	r5, 800612e <__swsetup_r+0x16>
 8006124:	69ab      	ldr	r3, [r5, #24]
 8006126:	b913      	cbnz	r3, 800612e <__swsetup_r+0x16>
 8006128:	4628      	mov	r0, r5
 800612a:	f000 f985 	bl	8006438 <__sinit>
 800612e:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <__swsetup_r+0xd0>)
 8006130:	429c      	cmp	r4, r3
 8006132:	d10f      	bne.n	8006154 <__swsetup_r+0x3c>
 8006134:	686c      	ldr	r4, [r5, #4]
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800613c:	0719      	lsls	r1, r3, #28
 800613e:	d42c      	bmi.n	800619a <__swsetup_r+0x82>
 8006140:	06dd      	lsls	r5, r3, #27
 8006142:	d411      	bmi.n	8006168 <__swsetup_r+0x50>
 8006144:	2309      	movs	r3, #9
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	e03e      	b.n	80061d2 <__swsetup_r+0xba>
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <__swsetup_r+0xd4>)
 8006156:	429c      	cmp	r4, r3
 8006158:	d101      	bne.n	800615e <__swsetup_r+0x46>
 800615a:	68ac      	ldr	r4, [r5, #8]
 800615c:	e7eb      	b.n	8006136 <__swsetup_r+0x1e>
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <__swsetup_r+0xd8>)
 8006160:	429c      	cmp	r4, r3
 8006162:	bf08      	it	eq
 8006164:	68ec      	ldreq	r4, [r5, #12]
 8006166:	e7e6      	b.n	8006136 <__swsetup_r+0x1e>
 8006168:	0758      	lsls	r0, r3, #29
 800616a:	d512      	bpl.n	8006192 <__swsetup_r+0x7a>
 800616c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800616e:	b141      	cbz	r1, 8006182 <__swsetup_r+0x6a>
 8006170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006174:	4299      	cmp	r1, r3
 8006176:	d002      	beq.n	800617e <__swsetup_r+0x66>
 8006178:	4630      	mov	r0, r6
 800617a:	f7fd fe93 	bl	8003ea4 <_free_r>
 800617e:	2300      	movs	r3, #0
 8006180:	6363      	str	r3, [r4, #52]	; 0x34
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	2300      	movs	r3, #0
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	b94b      	cbnz	r3, 80061b2 <__swsetup_r+0x9a>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a8:	d003      	beq.n	80061b2 <__swsetup_r+0x9a>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 fa05 	bl	80065bc <__smakebuf_r>
 80061b2:	89a0      	ldrh	r0, [r4, #12]
 80061b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061b8:	f010 0301 	ands.w	r3, r0, #1
 80061bc:	d00a      	beq.n	80061d4 <__swsetup_r+0xbc>
 80061be:	2300      	movs	r3, #0
 80061c0:	60a3      	str	r3, [r4, #8]
 80061c2:	6963      	ldr	r3, [r4, #20]
 80061c4:	425b      	negs	r3, r3
 80061c6:	61a3      	str	r3, [r4, #24]
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	b943      	cbnz	r3, 80061de <__swsetup_r+0xc6>
 80061cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061d0:	d1ba      	bne.n	8006148 <__swsetup_r+0x30>
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	0781      	lsls	r1, r0, #30
 80061d6:	bf58      	it	pl
 80061d8:	6963      	ldrpl	r3, [r4, #20]
 80061da:	60a3      	str	r3, [r4, #8]
 80061dc:	e7f4      	b.n	80061c8 <__swsetup_r+0xb0>
 80061de:	2000      	movs	r0, #0
 80061e0:	e7f7      	b.n	80061d2 <__swsetup_r+0xba>
 80061e2:	bf00      	nop
 80061e4:	2000000c 	.word	0x2000000c
 80061e8:	08006c14 	.word	0x08006c14
 80061ec:	08006c34 	.word	0x08006c34
 80061f0:	08006bf4 	.word	0x08006bf4

080061f4 <abort>:
 80061f4:	b508      	push	{r3, lr}
 80061f6:	2006      	movs	r0, #6
 80061f8:	f000 fa48 	bl	800668c <raise>
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7fa ff1f 	bl	8001040 <_exit>
	...

08006204 <__sflush_r>:
 8006204:	898a      	ldrh	r2, [r1, #12]
 8006206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	4605      	mov	r5, r0
 800620c:	0710      	lsls	r0, r2, #28
 800620e:	460c      	mov	r4, r1
 8006210:	d458      	bmi.n	80062c4 <__sflush_r+0xc0>
 8006212:	684b      	ldr	r3, [r1, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dc05      	bgt.n	8006224 <__sflush_r+0x20>
 8006218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	dc02      	bgt.n	8006224 <__sflush_r+0x20>
 800621e:	2000      	movs	r0, #0
 8006220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006226:	2e00      	cmp	r6, #0
 8006228:	d0f9      	beq.n	800621e <__sflush_r+0x1a>
 800622a:	2300      	movs	r3, #0
 800622c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006230:	682f      	ldr	r7, [r5, #0]
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	d032      	beq.n	800629c <__sflush_r+0x98>
 8006236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	075a      	lsls	r2, r3, #29
 800623c:	d505      	bpl.n	800624a <__sflush_r+0x46>
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006244:	b10b      	cbz	r3, 800624a <__sflush_r+0x46>
 8006246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006248:	1ac0      	subs	r0, r0, r3
 800624a:	2300      	movs	r3, #0
 800624c:	4602      	mov	r2, r0
 800624e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006250:	6a21      	ldr	r1, [r4, #32]
 8006252:	4628      	mov	r0, r5
 8006254:	47b0      	blx	r6
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	d106      	bne.n	800626a <__sflush_r+0x66>
 800625c:	6829      	ldr	r1, [r5, #0]
 800625e:	291d      	cmp	r1, #29
 8006260:	d82c      	bhi.n	80062bc <__sflush_r+0xb8>
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <__sflush_r+0x108>)
 8006264:	40ca      	lsrs	r2, r1
 8006266:	07d6      	lsls	r6, r2, #31
 8006268:	d528      	bpl.n	80062bc <__sflush_r+0xb8>
 800626a:	2200      	movs	r2, #0
 800626c:	6062      	str	r2, [r4, #4]
 800626e:	04d9      	lsls	r1, r3, #19
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	d504      	bpl.n	8006280 <__sflush_r+0x7c>
 8006276:	1c42      	adds	r2, r0, #1
 8006278:	d101      	bne.n	800627e <__sflush_r+0x7a>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	b903      	cbnz	r3, 8006280 <__sflush_r+0x7c>
 800627e:	6560      	str	r0, [r4, #84]	; 0x54
 8006280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006282:	602f      	str	r7, [r5, #0]
 8006284:	2900      	cmp	r1, #0
 8006286:	d0ca      	beq.n	800621e <__sflush_r+0x1a>
 8006288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800628c:	4299      	cmp	r1, r3
 800628e:	d002      	beq.n	8006296 <__sflush_r+0x92>
 8006290:	4628      	mov	r0, r5
 8006292:	f7fd fe07 	bl	8003ea4 <_free_r>
 8006296:	2000      	movs	r0, #0
 8006298:	6360      	str	r0, [r4, #52]	; 0x34
 800629a:	e7c1      	b.n	8006220 <__sflush_r+0x1c>
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	2301      	movs	r3, #1
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b0      	blx	r6
 80062a4:	1c41      	adds	r1, r0, #1
 80062a6:	d1c7      	bne.n	8006238 <__sflush_r+0x34>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0c4      	beq.n	8006238 <__sflush_r+0x34>
 80062ae:	2b1d      	cmp	r3, #29
 80062b0:	d001      	beq.n	80062b6 <__sflush_r+0xb2>
 80062b2:	2b16      	cmp	r3, #22
 80062b4:	d101      	bne.n	80062ba <__sflush_r+0xb6>
 80062b6:	602f      	str	r7, [r5, #0]
 80062b8:	e7b1      	b.n	800621e <__sflush_r+0x1a>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	e7ad      	b.n	8006220 <__sflush_r+0x1c>
 80062c4:	690f      	ldr	r7, [r1, #16]
 80062c6:	2f00      	cmp	r7, #0
 80062c8:	d0a9      	beq.n	800621e <__sflush_r+0x1a>
 80062ca:	0793      	lsls	r3, r2, #30
 80062cc:	680e      	ldr	r6, [r1, #0]
 80062ce:	bf08      	it	eq
 80062d0:	694b      	ldreq	r3, [r1, #20]
 80062d2:	600f      	str	r7, [r1, #0]
 80062d4:	bf18      	it	ne
 80062d6:	2300      	movne	r3, #0
 80062d8:	eba6 0807 	sub.w	r8, r6, r7
 80062dc:	608b      	str	r3, [r1, #8]
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	dd9c      	ble.n	800621e <__sflush_r+0x1a>
 80062e4:	6a21      	ldr	r1, [r4, #32]
 80062e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062e8:	4643      	mov	r3, r8
 80062ea:	463a      	mov	r2, r7
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b0      	blx	r6
 80062f0:	2800      	cmp	r0, #0
 80062f2:	dc06      	bgt.n	8006302 <__sflush_r+0xfe>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e78e      	b.n	8006220 <__sflush_r+0x1c>
 8006302:	4407      	add	r7, r0
 8006304:	eba8 0800 	sub.w	r8, r8, r0
 8006308:	e7e9      	b.n	80062de <__sflush_r+0xda>
 800630a:	bf00      	nop
 800630c:	20400001 	.word	0x20400001

08006310 <_fflush_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	4605      	mov	r5, r0
 8006316:	460c      	mov	r4, r1
 8006318:	b913      	cbnz	r3, 8006320 <_fflush_r+0x10>
 800631a:	2500      	movs	r5, #0
 800631c:	4628      	mov	r0, r5
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	b118      	cbz	r0, 800632a <_fflush_r+0x1a>
 8006322:	6983      	ldr	r3, [r0, #24]
 8006324:	b90b      	cbnz	r3, 800632a <_fflush_r+0x1a>
 8006326:	f000 f887 	bl	8006438 <__sinit>
 800632a:	4b14      	ldr	r3, [pc, #80]	; (800637c <_fflush_r+0x6c>)
 800632c:	429c      	cmp	r4, r3
 800632e:	d11b      	bne.n	8006368 <_fflush_r+0x58>
 8006330:	686c      	ldr	r4, [r5, #4]
 8006332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ef      	beq.n	800631a <_fflush_r+0xa>
 800633a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800633c:	07d0      	lsls	r0, r2, #31
 800633e:	d404      	bmi.n	800634a <_fflush_r+0x3a>
 8006340:	0599      	lsls	r1, r3, #22
 8006342:	d402      	bmi.n	800634a <_fflush_r+0x3a>
 8006344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006346:	f7ff fd1a 	bl	8005d7e <__retarget_lock_acquire_recursive>
 800634a:	4628      	mov	r0, r5
 800634c:	4621      	mov	r1, r4
 800634e:	f7ff ff59 	bl	8006204 <__sflush_r>
 8006352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	4605      	mov	r5, r0
 8006358:	d4e0      	bmi.n	800631c <_fflush_r+0xc>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	059b      	lsls	r3, r3, #22
 800635e:	d4dd      	bmi.n	800631c <_fflush_r+0xc>
 8006360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006362:	f7ff fd0d 	bl	8005d80 <__retarget_lock_release_recursive>
 8006366:	e7d9      	b.n	800631c <_fflush_r+0xc>
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <_fflush_r+0x70>)
 800636a:	429c      	cmp	r4, r3
 800636c:	d101      	bne.n	8006372 <_fflush_r+0x62>
 800636e:	68ac      	ldr	r4, [r5, #8]
 8006370:	e7df      	b.n	8006332 <_fflush_r+0x22>
 8006372:	4b04      	ldr	r3, [pc, #16]	; (8006384 <_fflush_r+0x74>)
 8006374:	429c      	cmp	r4, r3
 8006376:	bf08      	it	eq
 8006378:	68ec      	ldreq	r4, [r5, #12]
 800637a:	e7da      	b.n	8006332 <_fflush_r+0x22>
 800637c:	08006c14 	.word	0x08006c14
 8006380:	08006c34 	.word	0x08006c34
 8006384:	08006bf4 	.word	0x08006bf4

08006388 <std>:
 8006388:	2300      	movs	r3, #0
 800638a:	b510      	push	{r4, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	e9c0 3300 	strd	r3, r3, [r0]
 8006392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006396:	6083      	str	r3, [r0, #8]
 8006398:	8181      	strh	r1, [r0, #12]
 800639a:	6643      	str	r3, [r0, #100]	; 0x64
 800639c:	81c2      	strh	r2, [r0, #14]
 800639e:	6183      	str	r3, [r0, #24]
 80063a0:	4619      	mov	r1, r3
 80063a2:	2208      	movs	r2, #8
 80063a4:	305c      	adds	r0, #92	; 0x5c
 80063a6:	f7fd fd75 	bl	8003e94 <memset>
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <std+0x38>)
 80063ac:	6263      	str	r3, [r4, #36]	; 0x24
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <std+0x3c>)
 80063b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <std+0x40>)
 80063b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <std+0x44>)
 80063b8:	6224      	str	r4, [r4, #32]
 80063ba:	6323      	str	r3, [r4, #48]	; 0x30
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	bf00      	nop
 80063c0:	080066c5 	.word	0x080066c5
 80063c4:	080066e7 	.word	0x080066e7
 80063c8:	0800671f 	.word	0x0800671f
 80063cc:	08006743 	.word	0x08006743

080063d0 <_cleanup_r>:
 80063d0:	4901      	ldr	r1, [pc, #4]	; (80063d8 <_cleanup_r+0x8>)
 80063d2:	f000 b8af 	b.w	8006534 <_fwalk_reent>
 80063d6:	bf00      	nop
 80063d8:	08006311 	.word	0x08006311

080063dc <__sfmoreglue>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	1e4a      	subs	r2, r1, #1
 80063e0:	2568      	movs	r5, #104	; 0x68
 80063e2:	4355      	muls	r5, r2
 80063e4:	460e      	mov	r6, r1
 80063e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063ea:	f7fd fdab 	bl	8003f44 <_malloc_r>
 80063ee:	4604      	mov	r4, r0
 80063f0:	b140      	cbz	r0, 8006404 <__sfmoreglue+0x28>
 80063f2:	2100      	movs	r1, #0
 80063f4:	e9c0 1600 	strd	r1, r6, [r0]
 80063f8:	300c      	adds	r0, #12
 80063fa:	60a0      	str	r0, [r4, #8]
 80063fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006400:	f7fd fd48 	bl	8003e94 <memset>
 8006404:	4620      	mov	r0, r4
 8006406:	bd70      	pop	{r4, r5, r6, pc}

08006408 <__sfp_lock_acquire>:
 8006408:	4801      	ldr	r0, [pc, #4]	; (8006410 <__sfp_lock_acquire+0x8>)
 800640a:	f7ff bcb8 	b.w	8005d7e <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	200002f4 	.word	0x200002f4

08006414 <__sfp_lock_release>:
 8006414:	4801      	ldr	r0, [pc, #4]	; (800641c <__sfp_lock_release+0x8>)
 8006416:	f7ff bcb3 	b.w	8005d80 <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	200002f4 	.word	0x200002f4

08006420 <__sinit_lock_acquire>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__sinit_lock_acquire+0x8>)
 8006422:	f7ff bcac 	b.w	8005d7e <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	200002ef 	.word	0x200002ef

0800642c <__sinit_lock_release>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__sinit_lock_release+0x8>)
 800642e:	f7ff bca7 	b.w	8005d80 <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	200002ef 	.word	0x200002ef

08006438 <__sinit>:
 8006438:	b510      	push	{r4, lr}
 800643a:	4604      	mov	r4, r0
 800643c:	f7ff fff0 	bl	8006420 <__sinit_lock_acquire>
 8006440:	69a3      	ldr	r3, [r4, #24]
 8006442:	b11b      	cbz	r3, 800644c <__sinit+0x14>
 8006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006448:	f7ff bff0 	b.w	800642c <__sinit_lock_release>
 800644c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006450:	6523      	str	r3, [r4, #80]	; 0x50
 8006452:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <__sinit+0x68>)
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <__sinit+0x6c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	62a2      	str	r2, [r4, #40]	; 0x28
 800645a:	42a3      	cmp	r3, r4
 800645c:	bf04      	itt	eq
 800645e:	2301      	moveq	r3, #1
 8006460:	61a3      	streq	r3, [r4, #24]
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f820 	bl	80064a8 <__sfp>
 8006468:	6060      	str	r0, [r4, #4]
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f81c 	bl	80064a8 <__sfp>
 8006470:	60a0      	str	r0, [r4, #8]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f818 	bl	80064a8 <__sfp>
 8006478:	2200      	movs	r2, #0
 800647a:	60e0      	str	r0, [r4, #12]
 800647c:	2104      	movs	r1, #4
 800647e:	6860      	ldr	r0, [r4, #4]
 8006480:	f7ff ff82 	bl	8006388 <std>
 8006484:	68a0      	ldr	r0, [r4, #8]
 8006486:	2201      	movs	r2, #1
 8006488:	2109      	movs	r1, #9
 800648a:	f7ff ff7d 	bl	8006388 <std>
 800648e:	68e0      	ldr	r0, [r4, #12]
 8006490:	2202      	movs	r2, #2
 8006492:	2112      	movs	r1, #18
 8006494:	f7ff ff78 	bl	8006388 <std>
 8006498:	2301      	movs	r3, #1
 800649a:	61a3      	str	r3, [r4, #24]
 800649c:	e7d2      	b.n	8006444 <__sinit+0xc>
 800649e:	bf00      	nop
 80064a0:	08006870 	.word	0x08006870
 80064a4:	080063d1 	.word	0x080063d1

080064a8 <__sfp>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	4607      	mov	r7, r0
 80064ac:	f7ff ffac 	bl	8006408 <__sfp_lock_acquire>
 80064b0:	4b1e      	ldr	r3, [pc, #120]	; (800652c <__sfp+0x84>)
 80064b2:	681e      	ldr	r6, [r3, #0]
 80064b4:	69b3      	ldr	r3, [r6, #24]
 80064b6:	b913      	cbnz	r3, 80064be <__sfp+0x16>
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7ff ffbd 	bl	8006438 <__sinit>
 80064be:	3648      	adds	r6, #72	; 0x48
 80064c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	d503      	bpl.n	80064d0 <__sfp+0x28>
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	b30b      	cbz	r3, 8006510 <__sfp+0x68>
 80064cc:	6836      	ldr	r6, [r6, #0]
 80064ce:	e7f7      	b.n	80064c0 <__sfp+0x18>
 80064d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064d4:	b9d5      	cbnz	r5, 800650c <__sfp+0x64>
 80064d6:	4b16      	ldr	r3, [pc, #88]	; (8006530 <__sfp+0x88>)
 80064d8:	60e3      	str	r3, [r4, #12]
 80064da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064de:	6665      	str	r5, [r4, #100]	; 0x64
 80064e0:	f7ff fc4c 	bl	8005d7c <__retarget_lock_init_recursive>
 80064e4:	f7ff ff96 	bl	8006414 <__sfp_lock_release>
 80064e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064f0:	6025      	str	r5, [r4, #0]
 80064f2:	61a5      	str	r5, [r4, #24]
 80064f4:	2208      	movs	r2, #8
 80064f6:	4629      	mov	r1, r5
 80064f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064fc:	f7fd fcca 	bl	8003e94 <memset>
 8006500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006508:	4620      	mov	r0, r4
 800650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650c:	3468      	adds	r4, #104	; 0x68
 800650e:	e7d9      	b.n	80064c4 <__sfp+0x1c>
 8006510:	2104      	movs	r1, #4
 8006512:	4638      	mov	r0, r7
 8006514:	f7ff ff62 	bl	80063dc <__sfmoreglue>
 8006518:	4604      	mov	r4, r0
 800651a:	6030      	str	r0, [r6, #0]
 800651c:	2800      	cmp	r0, #0
 800651e:	d1d5      	bne.n	80064cc <__sfp+0x24>
 8006520:	f7ff ff78 	bl	8006414 <__sfp_lock_release>
 8006524:	230c      	movs	r3, #12
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	e7ee      	b.n	8006508 <__sfp+0x60>
 800652a:	bf00      	nop
 800652c:	08006870 	.word	0x08006870
 8006530:	ffff0001 	.word	0xffff0001

08006534 <_fwalk_reent>:
 8006534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006538:	4606      	mov	r6, r0
 800653a:	4688      	mov	r8, r1
 800653c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006540:	2700      	movs	r7, #0
 8006542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006546:	f1b9 0901 	subs.w	r9, r9, #1
 800654a:	d505      	bpl.n	8006558 <_fwalk_reent+0x24>
 800654c:	6824      	ldr	r4, [r4, #0]
 800654e:	2c00      	cmp	r4, #0
 8006550:	d1f7      	bne.n	8006542 <_fwalk_reent+0xe>
 8006552:	4638      	mov	r0, r7
 8006554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006558:	89ab      	ldrh	r3, [r5, #12]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d907      	bls.n	800656e <_fwalk_reent+0x3a>
 800655e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006562:	3301      	adds	r3, #1
 8006564:	d003      	beq.n	800656e <_fwalk_reent+0x3a>
 8006566:	4629      	mov	r1, r5
 8006568:	4630      	mov	r0, r6
 800656a:	47c0      	blx	r8
 800656c:	4307      	orrs	r7, r0
 800656e:	3568      	adds	r5, #104	; 0x68
 8006570:	e7e9      	b.n	8006546 <_fwalk_reent+0x12>

08006572 <__swhatbuf_r>:
 8006572:	b570      	push	{r4, r5, r6, lr}
 8006574:	460e      	mov	r6, r1
 8006576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657a:	2900      	cmp	r1, #0
 800657c:	b096      	sub	sp, #88	; 0x58
 800657e:	4614      	mov	r4, r2
 8006580:	461d      	mov	r5, r3
 8006582:	da07      	bge.n	8006594 <__swhatbuf_r+0x22>
 8006584:	2300      	movs	r3, #0
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	89b3      	ldrh	r3, [r6, #12]
 800658a:	061a      	lsls	r2, r3, #24
 800658c:	d410      	bmi.n	80065b0 <__swhatbuf_r+0x3e>
 800658e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006592:	e00e      	b.n	80065b2 <__swhatbuf_r+0x40>
 8006594:	466a      	mov	r2, sp
 8006596:	f000 f8fb 	bl	8006790 <_fstat_r>
 800659a:	2800      	cmp	r0, #0
 800659c:	dbf2      	blt.n	8006584 <__swhatbuf_r+0x12>
 800659e:	9a01      	ldr	r2, [sp, #4]
 80065a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065a8:	425a      	negs	r2, r3
 80065aa:	415a      	adcs	r2, r3
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	e7ee      	b.n	800658e <__swhatbuf_r+0x1c>
 80065b0:	2340      	movs	r3, #64	; 0x40
 80065b2:	2000      	movs	r0, #0
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	b016      	add	sp, #88	; 0x58
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080065bc <__smakebuf_r>:
 80065bc:	898b      	ldrh	r3, [r1, #12]
 80065be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c0:	079d      	lsls	r5, r3, #30
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	d507      	bpl.n	80065d8 <__smakebuf_r+0x1c>
 80065c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	2301      	movs	r3, #1
 80065d2:	6163      	str	r3, [r4, #20]
 80065d4:	b002      	add	sp, #8
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	ab01      	add	r3, sp, #4
 80065da:	466a      	mov	r2, sp
 80065dc:	f7ff ffc9 	bl	8006572 <__swhatbuf_r>
 80065e0:	9900      	ldr	r1, [sp, #0]
 80065e2:	4605      	mov	r5, r0
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7fd fcad 	bl	8003f44 <_malloc_r>
 80065ea:	b948      	cbnz	r0, 8006600 <__smakebuf_r+0x44>
 80065ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d4ef      	bmi.n	80065d4 <__smakebuf_r+0x18>
 80065f4:	f023 0303 	bic.w	r3, r3, #3
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	e7e3      	b.n	80065c8 <__smakebuf_r+0xc>
 8006600:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <__smakebuf_r+0x7c>)
 8006602:	62b3      	str	r3, [r6, #40]	; 0x28
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	6020      	str	r0, [r4, #0]
 8006608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	6163      	str	r3, [r4, #20]
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	6120      	str	r0, [r4, #16]
 8006616:	b15b      	cbz	r3, 8006630 <__smakebuf_r+0x74>
 8006618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f8c9 	bl	80067b4 <_isatty_r>
 8006622:	b128      	cbz	r0, 8006630 <__smakebuf_r+0x74>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	89a0      	ldrh	r0, [r4, #12]
 8006632:	4305      	orrs	r5, r0
 8006634:	81a5      	strh	r5, [r4, #12]
 8006636:	e7cd      	b.n	80065d4 <__smakebuf_r+0x18>
 8006638:	080063d1 	.word	0x080063d1

0800663c <_raise_r>:
 800663c:	291f      	cmp	r1, #31
 800663e:	b538      	push	{r3, r4, r5, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	d904      	bls.n	8006650 <_raise_r+0x14>
 8006646:	2316      	movs	r3, #22
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006652:	b112      	cbz	r2, 800665a <_raise_r+0x1e>
 8006654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006658:	b94b      	cbnz	r3, 800666e <_raise_r+0x32>
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f830 	bl	80066c0 <_getpid_r>
 8006660:	462a      	mov	r2, r5
 8006662:	4601      	mov	r1, r0
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666a:	f000 b817 	b.w	800669c <_kill_r>
 800666e:	2b01      	cmp	r3, #1
 8006670:	d00a      	beq.n	8006688 <_raise_r+0x4c>
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	d103      	bne.n	800667e <_raise_r+0x42>
 8006676:	2316      	movs	r3, #22
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	2001      	movs	r0, #1
 800667c:	e7e7      	b.n	800664e <_raise_r+0x12>
 800667e:	2400      	movs	r4, #0
 8006680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006684:	4628      	mov	r0, r5
 8006686:	4798      	blx	r3
 8006688:	2000      	movs	r0, #0
 800668a:	e7e0      	b.n	800664e <_raise_r+0x12>

0800668c <raise>:
 800668c:	4b02      	ldr	r3, [pc, #8]	; (8006698 <raise+0xc>)
 800668e:	4601      	mov	r1, r0
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f7ff bfd3 	b.w	800663c <_raise_r>
 8006696:	bf00      	nop
 8006698:	2000000c 	.word	0x2000000c

0800669c <_kill_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d07      	ldr	r5, [pc, #28]	; (80066bc <_kill_r+0x20>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	f7fa fcb9 	bl	8001020 <_kill>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d102      	bne.n	80066b8 <_kill_r+0x1c>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	b103      	cbz	r3, 80066b8 <_kill_r+0x1c>
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	200002e8 	.word	0x200002e8

080066c0 <_getpid_r>:
 80066c0:	f7fa bca6 	b.w	8001010 <_getpid>

080066c4 <__sread>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	460c      	mov	r4, r1
 80066c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066cc:	f000 f894 	bl	80067f8 <_read_r>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	bfab      	itete	ge
 80066d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066d6:	89a3      	ldrhlt	r3, [r4, #12]
 80066d8:	181b      	addge	r3, r3, r0
 80066da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066de:	bfac      	ite	ge
 80066e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80066e2:	81a3      	strhlt	r3, [r4, #12]
 80066e4:	bd10      	pop	{r4, pc}

080066e6 <__swrite>:
 80066e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	461f      	mov	r7, r3
 80066ec:	898b      	ldrh	r3, [r1, #12]
 80066ee:	05db      	lsls	r3, r3, #23
 80066f0:	4605      	mov	r5, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	4616      	mov	r6, r2
 80066f6:	d505      	bpl.n	8006704 <__swrite+0x1e>
 80066f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fc:	2302      	movs	r3, #2
 80066fe:	2200      	movs	r2, #0
 8006700:	f000 f868 	bl	80067d4 <_lseek_r>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	4632      	mov	r2, r6
 8006712:	463b      	mov	r3, r7
 8006714:	4628      	mov	r0, r5
 8006716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671a:	f000 b817 	b.w	800674c <_write_r>

0800671e <__sseek>:
 800671e:	b510      	push	{r4, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	f000 f855 	bl	80067d4 <_lseek_r>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	bf15      	itete	ne
 8006730:	6560      	strne	r0, [r4, #84]	; 0x54
 8006732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800673a:	81a3      	strheq	r3, [r4, #12]
 800673c:	bf18      	it	ne
 800673e:	81a3      	strhne	r3, [r4, #12]
 8006740:	bd10      	pop	{r4, pc}

08006742 <__sclose>:
 8006742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006746:	f000 b813 	b.w	8006770 <_close_r>
	...

0800674c <_write_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d07      	ldr	r5, [pc, #28]	; (800676c <_write_r+0x20>)
 8006750:	4604      	mov	r4, r0
 8006752:	4608      	mov	r0, r1
 8006754:	4611      	mov	r1, r2
 8006756:	2200      	movs	r2, #0
 8006758:	602a      	str	r2, [r5, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f7fa fc97 	bl	800108e <_write>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_write_r+0x1e>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_write_r+0x1e>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200002e8 	.word	0x200002e8

08006770 <_close_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d06      	ldr	r5, [pc, #24]	; (800678c <_close_r+0x1c>)
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fa fca3 	bl	80010c6 <_close>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_close_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_close_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	200002e8 	.word	0x200002e8

08006790 <_fstat_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d07      	ldr	r5, [pc, #28]	; (80067b0 <_fstat_r+0x20>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	f7fa fc9e 	bl	80010de <_fstat>
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	d102      	bne.n	80067ac <_fstat_r+0x1c>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	b103      	cbz	r3, 80067ac <_fstat_r+0x1c>
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	bf00      	nop
 80067b0:	200002e8 	.word	0x200002e8

080067b4 <_isatty_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d06      	ldr	r5, [pc, #24]	; (80067d0 <_isatty_r+0x1c>)
 80067b8:	2300      	movs	r3, #0
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	602b      	str	r3, [r5, #0]
 80067c0:	f7fa fc9d 	bl	80010fe <_isatty>
 80067c4:	1c43      	adds	r3, r0, #1
 80067c6:	d102      	bne.n	80067ce <_isatty_r+0x1a>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	b103      	cbz	r3, 80067ce <_isatty_r+0x1a>
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	bd38      	pop	{r3, r4, r5, pc}
 80067d0:	200002e8 	.word	0x200002e8

080067d4 <_lseek_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	; (80067f4 <_lseek_r+0x20>)
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	602a      	str	r2, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f7fa fc96 	bl	8001114 <_lseek>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_lseek_r+0x1e>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_lseek_r+0x1e>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	200002e8 	.word	0x200002e8

080067f8 <_read_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	; (8006818 <_read_r+0x20>)
 80067fc:	4604      	mov	r4, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fa fc24 	bl	8001054 <_read>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_read_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_read_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	200002e8 	.word	0x200002e8

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
